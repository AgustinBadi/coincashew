---
description: Pasos r√°pidos para asegurar el nodo.
---

# Gu√≠a \| Mejores pr√°cticas de seguridad para un nodo beaconchain de validador ETH2

## ü§ñ Requisitos previos

* Servidor Ubuntu o Ubuntu instalado
* Servidor SSH instalado
* un cliente SSH o acceso a la ventana de terminal

En caso de que necesite instalar el servidor SSH, refi√©rase a:

{% embed url="https://www.simplified.guide/ubuntu/install-ssh-server" %}

En caso de que necesite un cliente SSH para su sistema operativo, refi√©rase a:

{% embed url="https://www.howtogeek.com/311287/how-to-connect-to-an-ssh-server-from-windows-macos-or-linux/" %}

## üßô‚ôÇCrear un usuario no root con privilegios de sudo

{% hint style="info" %}
Haz un h√°bito de iniciar sesi√≥n en tu servidor usando una cuenta que no sea root. Esto evitar√° la eliminaci√≥n accidental de archivos si comete un error. Por ejemplo, el comando `rm` puede borrar todo el servidor si se ejecuta incorrectamente usando un usuario ra√≠z.
{% endhint %}

{% hint style="danger" %}
üî•**Consejo**: NO use rutinamente la cuenta ra√≠z. Usa `su` o `sudo`, siempre.
{% endhint %}

SSH a su servidor con su cliente SSH

```bash
ssh username@server.public.ip.address
# ejemplo
# ssh myUsername@77.22.161.10
```

Crear un nuevo usuario llamado ethereum

```text
sudo useradd -m -s /bin/bash ethereum
```

Establecer la contrase√±a para el usuario de ethereum

```text
sudo passwd ethereum
```

A√±adir ethereum al grupo de sudo

```text
sudo usermod -aG sudo ethereum
```

## üîê **Deshabilita la autenticaci√≥n de contrase√±a SSH y solo utiliza claves SSH**

{% hint style="info" %}
Las reglas b√°sicas del endurecimiento del SSH son:

* No hay contrase√±a para el acceso SSH \(usar clave privada\)
* No permitir root a SSH \(los usuarios apropiados deber√≠an SSH, entonces `su` o `sudo`\)
* Utilice `sudo` para los usuarios para que los comandos sean registrados
* Registrar intentos de inicio de sesi√≥n no autorizados (y considerar software bloquear/banear a los usuarios que intentan acceder a su servidor demasiadas veces, como fail2ban\)
* Bloquear SSH a s√≥lo el rango ip que necesita \(si lo siente\)
{% endhint %}

Crear un nuevo par de claves SSH en su m√°quina local. Ejecute esto en su m√°quina local. Se le pedir√° que escriba un nombre de archivo en el que guardar la clave. Este ser√° tu nombre de clave ****.

Su elecci√≥n del algoritmo de clave p√∫blica [ED25519 o RSA](https://goteleport.com/blog/comparing-ssh-keys/).

{% tabs %}
{% tab title="ED25519" %}
```
ssh-keygen -t ed25519
```
{% endtab %}

{% tab title="RSA" %}
```bash
ssh-keygen -t rsa -b 4096
```
{% endtab %}
{% endtabs %}

Transfiere la clave p√∫blica a su nodo remoto. Actualiza **nombreclave.pub** apropiadamente.

```bash
ssh-copy-id -i $HOME/.ssh/keyname.pub ethereum@server.public.ip.address
```

Inicia sesi√≥n con tu nuevo usuario de ethereum

```text
ssh ethereum@server.public.ip.address
```

Desactivar el usuario root y el inicio de sesi√≥n basado en contrase√±a. Edita el archivo `/etc/ssh/sshd_config`

```text
sudo nano /ssh/sshd_config
```

Localice **ChallengeResponseAuthentication** y actualice a no ser

```text
ChallengeResponseAuthentication no
```

Localizar **PasswordAuthentication** sin actualizar

```text
PasswordAuthentication no
```

Localice **PermitRootLogin** y actualice a cero

```text
PermitRootLogin no
```

Localice **PermitEmptyPasswords** y actualice a ninguna

```text
PermitEmptyPasswords no
```

**Opcional**: Localice **Puerto** y personalice su **puerto** aleatorio.

{% hint style="info" %}
Usa un **puerto** aleatorio \# desde 1024 hasta 49141. [Comprobar posibles conflictos. ](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)
{% endhint %}

```bash
Port <port number>
```

Validar la sintaxis de su nueva configuraci√≥n SSH.

```text
sudo sshd -t
```

Si no hay errores con la validaci√≥n de sintaxis, vuelva a cargar el proceso SSH

```text
sudo service sshd reload
```

Verificar el inicio de sesi√≥n todav√≠a funciona

{% tabs %}
{% tab title="Standard SSH Port 22" %}
```text
ssh ethereum@server.public.ip.address
```
{% endtab %}

{% tab title="Custom SSH Port" %}
```bash
ssh ethereum@server.public.ip.address -p <custom port number>
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
Alternativamente, puede que necesite usar. Agrega la bandera `-p <port#>` si usaste un puerto SSH personalizado.

```bash
ssh -i <path to your SSH_key_name.pub> ethereum@server.public.ip.address
```
{% endhint %}

**Optional**: Make logging in easier by updating your local ssh config.

To simplify the ssh command needed to log in to your server, consider updating your local `$HOME/.ssh/config` file:

```bash
Host ethereum-server
  User ethereum
  HostName <server.public.ip.address>
  Port <custom port number>
```

This will allow you to log in with `ssh ethereum-server` rather than needing to pass through all ssh parameters explicitly.

## ü§ñ **Update your system**

{% hint style="warning" %}
It's critically important to keep your system up-to-date with the latest patches to prevent intruders from accessing your system.
{% endhint %}

```bash
sudo apt-get update -y && sudo apt-get upgrade -y
sudo apt-get autoremove
sudo apt-get autoclean
```

Enable automatic updates so you don't have to manually install them.

```text
sudo apt-get install unattended-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades
```

## üêª Disable root account

System admins should not frequently log in as root in order to maintain server security. Instead, you can use sudo execute that require low-level privileges.

```bash
# To disable the root account, simply use the -l option.
sudo passwd -l root
```

```bash
# If for some valid reason you need to re-enable the account, simply use the -u option.
sudo passwd -u root
```

## üõ† Setup Two Factor Authentication for SSH \[Optional\]

{% hint style="info" %}
SSH, the secure shell, is often used to access remote Linux systems. Because we often use it to connect with computers containing important data, it‚Äôs recommended to add another security layer. Here comes the two factor authentication \(_2FA_\).
{% endhint %}

```text
sudo apt install libpam-google-authenticator -y
```

To make SSH use the Google Authenticator PAM module, edit the `/etc/pam.d/sshd` file:

```text
sudo nano /etc/pam.d/sshd
```

Add the following line:

```text
auth required pam_google_authenticator.so
```

Now you need to restart the `sshd` daemon using:

```text
sudo systemctl restart sshd.service
```

Modify `/etc/ssh/sshd_config`

```text
sudo nano /ssh/sshd_config
```

Locate **ChallengeResponseAuthentication** and update to yes

```text
ChallengeResponseAuthentication yes
```

Locate **UsePAM** and update to yes

```text
UsePAM yes
```

Save the file and exit.

Run the **google-authenticator** command.

```text
google-authenticator
```

It will ask you a series of questions, here is a recommended configuration:

* Hacer fichas "base de tiempo": s√≠
* Actualizar el archivo `.google_autenticator` : s√≠
* No permitir m√∫ltiples usos: s√≠
* Aumentar el l√≠mite de tiempo de generaci√≥n original: sin
* Habilitar limitaci√≥n de velocidad: s√≠

You may have noticed the giant QR code that appeared during the process, underneath are your emergency scratch codes to be used if you don‚Äôt have access to your phone: write them down on paper and keep them in a safe place.

Now, open Google Authenticator on your phone and add your secret key to make two factor authentication work.

{% hint style="danger" %}
**Note**: If you are enabling 2FA on a remote machine that you access over SSH you need to follow **steps 2 and 3** of [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-18-04) to make 2FA work.
{% endhint %}

## üß© Secure Shared Memory

{% hint style="info" %}
One of the first things you should do is secure the shared [memory](https://www.lifewire.com/what-is-random-access-memory-ram-2618159) used on the system. If you're unaware, shared memory can be used in an attack against a running service. Because of this, secure that portion of system memory.

To learn more about secure shared memory, read this [techrepublic.com article](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/).
{% endhint %}

{% hint style="warning" %}
### Un caso excepcional

There may be a reason for you needing to have that memory space mounted in read/write mode \(such as a specific server application like **DappNode** that requires such access to the shared memory or standard applications like Google Chrome\). In this case, use the following line for the fstab file with instructions below.

```text
none /run/shm tmpfs rw,noexec,nosuid,nodev 0 0
```

The above line will mount the shared memory with read/write access but without permission to execute programs, change the UID of running programs, or to create block or character devices in the namespace. This a net security improvement over default settings.

### Usar con precauci√≥n

With some trial and error, you may discover some applications\(**like DappNode**\) do not work with shared memory in read-only mode. For the highest security and if compatible with your applications, it is a worthwhile endeavor to implement this secure shared memory setting.

Source: [techrepublic.com](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/)
{% endhint %}

Edit `/etc/fstab`

```text
sudo nano /etc/fstab
```

Insert the following line to the bottom of the file and save/close. This sets shared memory into read-only mode.

```text
tmpfs    /run/shm    tmpfs    ro,noexec,nosuid    0 0
```

Reboot the node in order for changes to take effect.

```text
sudo reboot
```

## ‚õì**Install Fail2ban**

{% hint style="info" %}
Fail2ban is an intrusion-prevention system that monitors log files and searches for particular patterns that correspond to a failed login attempt. If a certain number of failed logins are detected from a specific IP address \(within a specified amount of time\), fail2ban blocks access from that IP address.
{% endhint %}

```text
sudo apt-get install fail2ban -y
```

Edit a config file that monitors SSH logins.

```text
sudo nano /etc/fail2ban/jail.local
```

Add the following lines to the bottom of the file.

{% hint style="info" %}
üî• **Whitelisting IP address tip**: The `ignoreip` parameter accepts IP addresses, IP ranges or DNS hosts that you can specify to be allowed to connect. This is where you want to specify your local machine, local IP range or local domain, separated by spaces.

```bash
# Example
ignoreip = 192.168.1.0/24 127.0.0.1/8 
```
{% endhint %}

```bash
[sshd]
enabled = true
port = <22 or your random port number>
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
# whitelisted IP addresses
ignoreip = <list of whitelisted IP address, your local daily laptop/pc>
```

Save/close file.

Restart fail2ban for settings to take effect.

```text
sudo systemctl restart fail2ban
```

## üß±**Configure your Firewall**

The standard UFW firewall can be used to control network access to your node.

With any new installation, ufw is disabled by default. Enable it with the following settings.

* Puerto 22 \(o su puerto aleatorio \#\) TCP para conexi√≥n SSH
* Puertos para tr√°fico p2p
  * Faro utiliza el puerto 9000 tcp/udp
  * Teku utiliza el puerto 9000 tcp/udp
  * Prysm utiliza el puerto 13000 tcp y el puerto 12000 udp
  * Nimbus utiliza el puerto 9000 tcp/udp
  * Lodestar utiliza el puerto 30607 tcp y el puerto 9000 udp
* Nodo 30303 tcp/udp eth1

{% tabs %}
{% tab title="Lighthouse" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Prysm" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 13000/tcp
sudo ufw allow 12000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Teku" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 30607/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}
{% endtabs %}

{% hint style="danger" %}
Do not expose Grafana \(port 3000\) and Prometheus endpoint \(port 9090\) to the public internet as this invites a new attack surface! A secure solution would be to access Grafana through a ssh tunnel with Wireguard.
{% endhint %}

Only open the following ports on local home staking setups behind a home router firewall or other network firewall.

\*\*\*\*üî• **It is dangerous to open these ports on a VPS/cloud node.**

```bash
sudo ufw allow 3000/tcp
sudo ufw allow 9090/tcp
```

Confirm the settings are in effect.
> ```csharp
     To                         Action      From
     --                         ------      ----
[ 1] 22/tcp                     ALLOW IN    Anywhere
# SSH
[ 2] 3000/tcp                   ALLOW IN    Anywhere
# Grafana
[ 3] 9000/tcp                   ALLOW IN    Anywhere
# eth2 p2p traffic
[ 4] 9090/tcp                   ALLOW IN    Anywhere
# Prometheus
[ 5] 30303/tcp                  ALLOW IN    Anywhere
# eth1 node
[ 6] 22/tcp (v6)                ALLOW IN    Anywhere (v6)
# SSH
[ 7] 3000/tcp (v6)              ALLOW IN    Anywhere (v6)
# Grafana
[ 8] 9000/tcp (v6)              ALLOW IN    Anywhere (v6)
# eth2 p2p traffic
[ 9] 9090/tcp (v6)              ALLOW IN    Anywhere (v6)
# Prometheus
[10] 30303/tcp (v6)             ALLOW IN    Anywhere (v6)
# eth1 node
```

**\[ Optional but recommended \]** Whitelisting \(or permitting connections from a specific IP\) can be setup via the following command.

```bash
sudo ufw allow from <your local daily laptop/pc>
# Example
# sudo ufw allow from 192.168.50.22
```

{% hint style="info" %}
 üéä **Port Forwarding Tip:** You'll need to forward and open ports to your validator. Verifique que est√° trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## üìû Verify Listening Ports

If you want to maintain a secure server, you should validate the listening network ports every once in a while. This will provide you essential information about your network.

```bash
sudo ss -tulpn
# Example output. Aseg√∫rate de que los n√∫meros de puerto se vean bien.
# Netid  State    Recv-Q  Send-Q    Local Address:Port   Peer Address:Port   Process
# tcp    LISTEN   0       128       127.0.0.1:5052       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=22))
# tcp    LISTEN   0       128       127.0.0.1:5054       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=23))
# tcp    LISTEN   0       1024      0.0.0.0:9000         0.0.0.0:*           users:(("lighthouse",pid=12160,fd=21))
# udp    UNCONN   0       0         *:30303              *:*                 users:(("geth",pid=22117,fd=158))
# tcp    LISTEN   0       4096      *:30303              *:*                 users:(("geth",pid=22117,fd=156))
```

Alternatively you can use `netstat`

```bash
sudo netstat -tulpn
# Example output. Aseg√∫rate de que los n√∫meros de puerto se vean bien.
# Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
# tcp        0      0 127.0.0.1:5052          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 127.0.0.1:5054          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      12160/lighthouse
# tcp6       0      0 :::30303                :::*                    LISTEN      22117/geth
# udp6       0      0 :::30303                :::*                    LISTEN      22117/geth
```

## üë©üöÄ **Use** system user accounts - Principle of Least Privilege \[Advanced Users / Optional\]

{% hint style="info" %}
**Recommended for Advanced Users Only**

**Principle of Least Privilege**: Each eth2 process is assigned a _system user account_ and runs under the least amount of privileges required in order to function. This best practice protects against a scenario where a vulnerability or exploit discovered in a specific process might enable access other system processes.
{% endhint %}

```bash
# creates system user account for eth1 service
sudo adduser --system --no-create-home eth1

# creates system user account for validator service
sudo adduser --system --no-create-home validator

# creates system user account for beacon-chain service
sudo adduser --system --no-create-home beacon-chain

# creates system user account for slasher
sudo adduser --system --no-create-home slasher
```

{% hint style="danger" %}
\*\*\*\*üî• **Caveats For Advanced Users**

If you decide to use **system user accounts**, remember to replace the **systemd unit files** with the corresponding users.

```bash
# Example of beacon-chain.service unit file
User            = beacon-chain
```

Furthermore, ensure the correct **file ownership** is assigned to your **system user account** where applicable.

```bash
# Example of prysm validator's password file
sudo chown validator:validator -R $HOME/.eth2validators/validators-password.txt
```
{% endhint %}

## ‚ú® Additional validator node best practices

<table>
  <thead>
    <tr>
      <th style="text-align:left"></th>
      <th style="text-align:left"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align:left">Redes</td>
      <td style="text-align:left">
        <p></p>
        <p>Asigne direcciones IP internas est√°ticas tanto a su nodo validador como a su ordenador port√°til/port√°til diario.
          Esto es √∫til junto con la funci√≥n ufw y Fail2ban&apos;s de la lista blanca
. Normalmente, esto se puede configurar en la configuraci√≥n de tu enrutador&apos;s.
          Consulte el manual de su enrutador&apos;s para obtener instrucciones.</p>
      </td>
    </tr>
    <tr>
      <td style="text-align:left">Fuente de energ√≠a</td>
      <td style="text-align:left">En caso de aver√≠a de corriente, desea que su m√°quina validadora se reinicie tan
        como est√© disponible la energ√≠a. In the BIOS settings, change the <b>Restore on AC / Power Loss</b> or <b>After Power Loss</b> setting
        to always on. Mejor a√∫n, instale un suministro de energ√≠a ininterrumpido (UPS).</td>
    </tr>
    <tr>
      <td style="text-align:left">Borrar el historial de bash</td>
      <td style="text-align:left">
        <p>Al presionar la tecla de flecha hacia arriba, puedes ver comandos anteriores que pueden contener
          datos sensibles. Para aclarar esto, ejecute lo siguiente:</p>
        <p><code>shred -u ~/.bash_history &amp;&amp; touch ~/.bash_history</code>
        </p>
      </td>
    </tr>
  </tbody>
</table>

{% hint style="info" %}
Aseg√∫rese de revisar la [Lista de verificaci√≥n \| C√≥mo confirmar un validador funcional y saludable ETH2.](guide-or-how-to-setup-a-validator-on-eth2-mainnet/checklist-or-how-to-confirm-a-healthy-functional-eth2-validator.md)
{% endhint %}

## ü§ñ Start staking by building a validator

### Visita aqu√≠ para nuestra gu√≠a [Mainnet](guide-or-how-to-setup-a-validator-on-eth2-mainnet/) y aqu√≠ para nuestra [gu√≠a de Testnet](guide-or-how-to-setup-a-validator-on-eth2-testnet.md).

{% hint style="success" %}
Felicidades por completar la gu√≠a. ‚ú®

¬øEncontraste √∫til nuestra gu√≠a? Env√≠enos una se√±al con un consejo y seguiremos actualiz√°ndola.

Realmente nos da energ√≠a para seguir creando las mejores gu√≠as criptogr√°ficas.

Usa [cointr.ee para encontrar nuestras direcciones de donaci√≥n ](https://cointr.ee/coincashew). üôè

Cualquier comentario y todas las solicitudes de extracci√≥n son muy apreciadas. üåõ

Descubra y chatee con otros interesados en Discord @

[https://discord.gg/w8Bx8W2HPW](https://discord.gg/w8Bx8W2HPW)üòÉ
{% endhint %}

üéä **Actualizaci√≥n 2020-12**: Gracias a todos los colaboradores de [Gitcoin](https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew) , donde usted puede contribuir a trav√©s de [fondos cuadr√°ticos](https://vitalik.ca/general/2019/12/07/quadratic.html) y hacer un gran impacto. ¬°Financiaci√≥n completa! Gracias!üôè

{% embed url="https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew" %}

## üöÄ References

{% embed url="https://medium.com/@BaneBiddix/how-to-harden-your-ubuntu-18-04-server-ffc4b6658fe7" caption="" %}

{% embed url="https://linux-audit.com/ubuntu-server-hardening-guide-quick-and-secure/" caption="" %}

{% embed url="https://www.digitalocean.com/community/tutorials/how-to-harden-openssh-on-ubuntu-18-04" caption="" %}

{% embed url="https://ubuntu.com/tutorials/configure-ssh-2fa\#1-overview" caption="" %}

{% embed url="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/" %}

[https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3\#file-ubuntu-hardening-md](https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3#file-ubuntu-hardening-md)

{% embed url="https://www.lifewire.com/harden-ubuntu-server-security-4178243" caption="" %}

{% embed url="https://www.ubuntupit.com/best-linux-hardening-security-tips-a-comprehensive-checklist/" caption="" %}

