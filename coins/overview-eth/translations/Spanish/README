---
description: >-
  Convi√©rtete en un validador y ayuda a asegurar eth2, una cadena de bloques de pruebas. Cualquiera con 32 ETH puede unirse.
---

# Gu√≠a \| C√≥mo configurar un validador en la red principal de ETH2

{% hint style="success" %}
As of Jan 5 2021, this guide is updated for **mainnet.** üòÅ
{% endhint %}

#### ‚ú® Para la gu√≠a de red de pruebas, [por favor haga clic aqu√≠](../guide-or-how-to-setup-a-validator-on-eth2-testnet.md).

\*\*\*\*üéä **Actualizaci√≥n 2020-12**: Gracias a todos los colaboradores de [Gitcoin](https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew) , donde usted puede contribuir a trav√©s de [fondos cuadr√°ticos](https://vitalik.ca/general/2019/12/07/quadratic.html) y hacer un gran impacto. ¬°Financiaci√≥n completa! Gracias!üôè

{% embed url="https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew" %}

## üèÅ 0. Prerrequisitos

### üë©üíªHabilidades para operar un validador eth2 y nodo baliza

Como validador de eth2, normalmente tendr√°s las siguientes habilidades:

* conocimiento operativo de c√≥mo configurar, ejecutar y mantener un nodo y validador de baliza eth2 continuamente
* un compromiso a largo plazo para mantener su validador 24/7/365
* habilidades b√°sicas del sistema operativo

### üë®üíª Experiencia requerida para ser un validador exitoso

* han aprendido lo esencial viendo ['Introducci√≥n a la Eth2 & Staking for Beginners' por Superphiz](https://www.youtube.com/watch?v=tpkpW031RCI)
* han pasado o est√° inscrito activamente en el [curso de estudios de Eth2](https://ethereumstudymaster.com/)
* y han le√≠do la [8 Cosas que cada validador de Eth2 deber√≠a saber.](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

### üéó **Requisitos m√≠nimos de configuraci√≥n**

* **Sistema operativo:** Linux de 64-bit \\(i.e. Servidor LTS o escritorio Ubuntu 20.04\)
* **Procesador:** Dual core CPU, Intel Core i5‚Äì760 o AMD FX-8100 o mejor
* **Memory:** 8GB RAM
* **Almacenamiento:** 20GB SSD
* **Internet:** Conexi√≥n a Internet de banda ancha con velocidades de al menos 1 Mbps.
* **Poder:** Energ√≠a el√©ctrica fiable.
* **Saldo ETH:** al menos 32 ETH y algunos ETH por comisiones de dep√≥sito
* **Cartera**: Metamask instalado

### üèã‚ôÇ Configuraci√≥n recomendada de hardware

* **Sistema operativo:** Linux de 64-bit \\(i.e. Servidor LTS o escritorio Ubuntu 20.04\)
* **Procesador:** Quad core CPU, Intel Core i7‚Äì4770 o AMD FX-8310 o mejor
* **Memoria:** RAM de 16GB o m√°s
* **Almacenamiento:** SSD de 1TB o m√°s
* **Internet:** Conexiones a Internet de banda ancha con velocidades de al menos 10 Mbps sin l√≠mite de datos.
* **Poder:** Energ√≠a el√©ctrica fiable con alimentaci√≥n ininterrumpida \(UPS\)
* **Saldo ETH:** al menos 32 ETH y algunos ETH por comisiones de dep√≥sito
* **Cartera**: Metamask instalado

{% hint style="success" %}
‚ú® **Consejo del validador Pro**: Te recomendamos que comences con una nueva instancia de un sistema operativo, m√°quina virtual y/o m√°quina. Evite los dolores de cabeza no reutilizando claves de red de pruebas, billeteras, o bases de datos para su validador.
{% endhint %}

### üîì Mejores pr√°cticas recomendadas para validadores eth2

Si necesita ideas o un recordatorio sobre c√≥mo asegurar su validador, consulte

{% page-ref page="../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md" %}

### üõ† Setup Ubuntu

Si necesita instalar el servidor Ubuntu, refi√©rase a

{% embed url="https://ubuntu.com/tutorials/install-ubuntu-server\#1-overview" %}

O Escritorio Ubuntu,

{% page-ref page="../../overview-xtz/guide-how-to-setup-a-baker/install-ubuntu.md" %}

### üé≠ Configurar Metamask

Si necesita instalar Metamask, consulte

{% page-ref page="../../../wallets/browser-wallets/metamask-ethereum.md" %}

### üß© Supervisi√≥n del nodo validador de alto nivel

{% hint style="info" %}
Al final de esta gu√≠a, se construir√° un nodo que aloja tres componentes principales: un cliente validador, un cliente de la cadena beacon y un nodo eth1.

**Cliente validador** - Responible por producir nuevos bloques y certificaciones en la cadena del faro y las cadenas de fragmentos.

**Cliente de la cadena Beacon** - Responible para gestionar el estado de la cadena beacon, el desplazamiento del validador, y m√°s.

**Nodo Eth1** - Suministra dep√≥sitos entrantes del validador de la cadena de red principal eth1 al cliente de la cadena beacon.

Nota: Teku y Nimbus combinan ambos clientes en un solo proceso.
{% endhint %}

![C√≥mo encaja eth2 con Leslie el Rhino eth2, la mascota que lleva el nombre del inform√°tico estadounidense Leslie Lamport](../../../.gitbook/assets/eth2network.png)

## üå± 1. Comprar/intercambiar o consolidar ETH

{% hint style="info" %}
Cada 32 ETH que tengas te permite hacer 1 validador. Puede ejecutar miles de validadores con su nodo faro.
{% endhint %}

Su ETH \(o m√∫ltiplos de 32 ETH\) debe consolidarse en una sola direcci√≥n accesible con Metamask.

Si necesita comprar/intercambiar o recargar su ETH a un m√∫ltiplo de 32, eche un vistazo:

{% page-ref page="../guide-how-to-buy-eth.md" %}

## üë©üíª 2. Reg√≠strate para ser un validador en el Launchpad

1. Instale dependencias, la herramienta de dep√≥sito de la fundaci√≥n ethereum y genere sus dos conjuntos de pares de claves.

{% hint style="info" %}
Cada validador tendr√° dos conjuntos de pares de claves. Una **clave de firma** y una **clave de retiro.** Estas claves se derivan de una sola frase mnem√≥nica. [M√°s informaci√≥n sobre claves.](https://blog.ethereum.org/2020/05/21/keys/)
{% endhint %}

Tienes la opci√≥n de descargar la [herramienta de dep√≥sito de cimientos ethereum](https://github.com/ethereum/eth2.0-deposit-cli) preconstruida o construirla desde la fuente.

{% tabs %}
{% tab title="Build from source code" %}
Instalar dependencias.

```text
sudo apt update
sudo apt install python3-pip git -y
```

Descargar c√≥digo fuente e instalar.

```text
cd $HOME
git clon https://github.com/ethereum/eth2.0-deposit-cli.git eth2deposit-cli
cd eth2deposit-cli
sudo ./deposit.sh install
```

Crea una nueva mnem√≥nica.

```text
./deposit.sh new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Pre-built eth2deposit-cli" %}
Descargar eth2deposit-cli.

```bash
cd $HOME
wget https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.1.0/eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```

Verifique que la suma de verificaci√≥n SHA256 coincide con la suma de verificaci√≥n en la p√°gina de [lanzamientos](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.0.0).

```bash
echo "2107f26f9545f423530e3501ae616c222b6bf77774a4f2743effb8fe4bcbe7 *eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz" | shasum -a 256 --check
```

Ejemplo de salida v√°lida:

> eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz: OK

{% hint style="danger" %}
¬°Proceda solo si la comprobaci√≥n sha256 pasa con **OK**!
{% endhint %}

Extraer el archivo.

```text
tar -xvf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
mv eth2deposit-cli-ed5a6d3-linux-amd64 eth2deposit-cli
rm eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
cd eth2deposit-cli
```

Crea una nueva mnem√≥nica.

```text
./deposit new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
üî•**\[ Optional \] Consejo de seguridad Pro**: Ejecute la herramienta **eth2deposit-cli** y genere su **semilla mnem√≥nica** para sus claves de validador en una **m√°quina desconectada desconectada iniciada desde usb**.
{% endhint %}

Siga este [ethstaker.cc](https://ethstaker.cc/) exclusivo para la baja al hacer una usb arrancable.

### Parte 1 - Crear una unidad USB de arranque Ubuntu 20.04

{% embed url="https://www.youtube.com/watch?v=DTR3PzRtYU" %}

### Parte 2 - Instalar Ubuntu 20.04 desde la unidad USB

{% embed url="https://www.youtube.com/watch?v=C97\_6‚ñ∫ ufCE" %}

Usted puede copiar a trav√©s de USB key los binarios eth2deposit-cli preconstruidos de una m√°quina en l√≠nea a una m√°quina sin conexi√≥n, desconectada, arrancada de usb. Aseg√∫rese de desconectar el cable ethernet y/o WIFI.
{% endtab %}
{% endtabs %}

2. Siga las instrucciones y elija una **contrase√±a de KEYSTORE**. Esta contrase√±a encripta los archivos de su almac√©n de claves. Escribe tu mnem√≥nico y mant√©n esto seguro y **sin conexi√≥n**.

{% hint style="warning" %}
\*\*\*\*üöß **Precauci√≥n**: Solo deposite los 32 ETH por validador si est√° seguro de que el nodo ETH1 y el validador ETH2 estar√°n completamente sincronizados y listos para realizar las tareas de validador. Puede volver m√°s tarde a Launchpad con sus datos de dep√≥sito para terminar los siguientes pasos.
{% endhint %}

3. Sigue los pasos en [https://launchpad.ethereum.org/](https://launchpad.ethereum.org/) mientras te saltas los pasos que ya has completado. Estudiar el material general de la fase eth2 0. ¬°Entender eth2 es la clave del √©xito!

4. Volver al sitio web de launchpad, sube tu`deposit_data-#######.json` encontrado en el directorio `validator_keys`.

5. Con√©ctate al Launchpad con tu cartera Metamask, revisa y acepta los t√©rminos.

6. Confirmar la transacci√≥n\(s\). Hay una transacci√≥n de dep√≥sito de 32 ETH para cada validador.

{% hint style="info" %}
Your transaction is sending and depositing your ETH to the [official ETH2 deposit contract address. ](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)

**Compruebe**, _doble verificaci√≥n_, _**cheque triple**_ que la direcci√≥n oficial del contrato de dep√≥sito Eth2 es correcta.[`0x000000219ab540356cB839Cbe05303d7705Fa`](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)
{% endhint %}

{% hint style="danger" %}
\*\*\*\*üî• **Recordatorio de Crypto Cr√≠tico:** **Mant√©n tu mnem√≥nica, mant√©n tu ETH.**üöÄ

* Escriba su semilla mnem√≥nica **sin conexi√≥n**. _No es correo electr√≥nico. No en la nube._
* M√∫ltiples copias son mejores. _Mejor almacenado en una semilla de_ [_de metal._](https://jlopp.github.io/metal-bitcoin-storage-reviews/)
* Las claves de retiro se generar√°n a partir de este mnem√≥nico en el futuro.
* Hacer **copias de seguridad fuera de l√≠nea**, como una clave USB, de su directorio **`validator_keys`**.
{% endhint %}

## üõ∏ 3. Install a ETH1 node

{% hint style="info" %}
Ethereum 2.0 requiere una conexi√≥n a Ethereum 1.0 para monitorear los dep√≥sitos de 32 validadores ETH. Alojamiento de su propio nodo Ethereum 1.0 es la mejor manera de maximizar la descentralizaci√≥n y minimizar la dependencia de terceros como Infura.
{% endhint %}

{% hint style="warning" %}
The subsequent steps assume you have completed the [best practices security guide. ](../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md)

üõë No ejecute sus procesos como usuario de **ROOT**. üò±
{% endhint %}

Tu elecci√≥n de [**OpenEthereum**](https://www.parity.io/ethereum/)**,** [**Geth**](https://geth.ethereum.org/)**,** [**Besu**](https://besu.hyperledger.org/)**,** [**esp√≠ritu**](https://www.nethermind.io/) **o** [**Infura**](https://infura.io/)**.**

{% tabs %}
{% tab title="OpenEthereum \(Paridad\)" %}
{% hint style="info" %}
**OpenEthereum** - Es ****goal es ser el cliente m√°s r√°pido, ligero y seguro de Ethereum usando el **lenguaje de programaci√≥n de Rust**. OpenEthereum est√° licenciado bajo GPLv3 y puede ser utilizado para todas sus necesidades de Ethereum.
{% endhint %}

#### ‚öô Instalar dependencias

```text
sudo apt-get update
sudo apt-get install curl jq unzip -y
```

#### ü§ñ Install OpenEthereum

Revise la √∫ltima versi√≥n en [https://github.com/openethereum/openethereum/releases](https://github.com/openethereum/openethereum/releases)

Descargar autom√°ticamente la √∫ltima versi√≥n de linux, un-zip, a√±adir permisos de ejecuci√≥n y limpieza.

```bash
mkdir $HOME/openethereum
cd $HOME/openethereum
curl -s https://api.github.com/repos/openethereum/openethereum/releases/latest | jq -r ".assets[] | select(. ame) | .browser_download_url" | grep linux | xargs wget -q --show-progress
unzip -o openethereum*.zip
chmod +x openethereum
rm openethereum*.zip
```

**Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n `eth1.service`.

Simplemente copia/pega lo siguiente.

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = openethereum eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
ExecStart       = $(echo $HOME)/openethereum/openethereum --metrics --metrics-port=6060
Restart         = on-failure
RestartSec      = 3

[Install]
WantedBy    = multi-user.target
EOF
```

{% hint style="info" %}
**Nimbus Configuraci√≥n espec√≠fica**: A√±adir la siguiente bandera a la l√≠nea **ExecStart**.

```bash
--ws-origins=todos
```
{% endhint %}

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ‚õì Iniciar OpenEthereum

```text
sudo systemctl inicia eth1
```
{% endtab %}

{% tab title="Geth" %}
{% hint style="info" %}
**Geth** - Go Ethereum es una de las tres implementaciones originales \(junto con C++ y Python\) del protocolo Ethereum. Est√° escrito en **Go**, completamente de c√≥digo abierto y bajo licencia GNU LGPL v3.
{% endhint %}

Revise las √∫ltimas notas de la versi√≥n en [https://github.com/ethereum/go-ethereum/releases](https://github.com/ethereum/go-ethereum/releases)

#### üß¨ Instalar desde el repositorio

```text
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update -y
sudo apt-get install ethereum -y
```

‚öô **Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n `eth1.service`.

Simplemente copia/pega lo siguiente.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descripci√≥n = geth eth1 servicio
Quiere = network-online. Destinar
Despu√©s = red en l√≠nea. Destet 

[Service]
usuario = $(whoami)
ExecStart = /usr/bin/geth --http --metrics --pprof
Reiniciar = on-failure
RestartSec = 3

[Install]

 WantedBy = multi-usuario. objetivo
EOF
```

{% hint style="info" %}
**Nimbus Configuraci√≥n espec√≠fica**: A√±adir la siguiente bandera a la l√≠nea **ExecStart**.

```bash
--ws
```
{% endhint %}

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ‚õì Inicio geth

```text
sudo systemctl inicia eth1
```
{% endtab %}

{% tab title="Besu" %}
{% hint style="info" %}
**Hyperledger Besu** es un cliente Ethereum de c√≥digo abierto dise√±ado para aplicaciones empresariales exigentes que requieren un procesamiento de transacciones seguro y de alto rendimiento en una red privada. Est√° desarrollado bajo la licencia Apache 2.0 y escrito en **Java**.
{% endhint %}

#### üß¨ Instalar dependencia de java

```text
sudo apt update
sudo apt install openjdk-11-jdk -y
```

#### üåú Descargar y descomprimir Besu

Revise la √∫ltima versi√≥n en [https://github.com/hyperledger/besu/releases](https://github.com/hyperledger/besu/releases)

El archivo se puede descargar desde [https://dl.bintray.com/hyperledger-org/besu-repo](https://dl.bintray.com/hyperledger-org/besu-repo)

```text
cd
wget -O besu.tar.gz https://dl.bintray.com/hyperledger-org/besu-repo/besu-20.10.1.tar.gz
tar -xvf besu.tar.gz
rm besu.tar.gz
mv besu* besu
```

‚öô **Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n `eth1.service`.

Simplemente copia/pega lo siguiente.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descripci√≥n = besu eth1 servicio
Quiere = network-online. Destinar
Despu√©s = red en l√≠nea. Destet 

[Service]
usuario = $(whoami)
ExecStart = $(echo $HOME)/besu/bin/besu --metrics-enabled --rpc-http-enabled --data-path="$HOME/. esu"
Reiniciar = on-failure
RestartSec = 3

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ‚õì Iniciar besu

```text
sudo systemctl inicia eth1
```
{% endtab %}

{% tab title="Nethermind" %}
{% hint style="info" %}
**La mente** es un cliente de bandera Ethereum todo acerca del rendimiento y la flexibilidad. Construido en **. ET** n√∫cleo, una plataforma muy amplia, amigable con el aliento, la mente hace que la integraci√≥n con las infraestructuras existentes sea sencilla, sin perder de vista la estabilidad, la fiabilidad, la integridad de los datos y la seguridad.
{% endhint %}

#### ‚öô Instalar dependencias

```text
sudo apt-get update
sudo apt-get install curl libsnappy-dev libc6-dev jq libc6 unzip -y
```

#### üåú Descargar y descomprimir la mente

Revise la √∫ltima versi√≥n en [https://github.com/)[video] mindEth/nethermind/releases](https://github.com/NethermindEth/nethermind/releases)

Descargue autom√°ticamente la √∫ltima versi√≥n de linux, des-zip y limpieza.

```bash
mkdir $HOME/nethermind
chmod 775 $HOME/nethermind
cd $HOME/nethermind
curl -s https://api.github.com/repos/)[video] mindEth/nethermind/releases/latest | jq -r ". ssets[] | select(.name) | .browser_download_url" | grep linux | xargs wget -q --show-progress
unzip -o nethermind*.zip
rm nethermind*linux*.zip
```

‚öô **Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n `eth1.service`.

Simplemente copia/pega lo siguiente.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descripci√≥n = servicio eth1 nethermind
Quiere = network-online. Destinar
Despu√©s = red en l√≠nea. Destet 

[Service]
usuario = $(whoami)
ExecStart = $(echo $HOME)/nethermind/mind. unner --baseDbPath $HOME/.nethermind --Metrics.Enabled true --JsonRpc.Enabled true --Sync.DownloadBodiesInFastSync true --Sync.DownloadReceiptsInFastSync true --Sync.AncientBodiesBarrier 11052984 --Sync. ncientReceiptsBarrier 11052984
Restart = on-failure
RestartSec = 3

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ‚õì Iniciar la mente

```text
sudo systemctl inicia eth1
```

{% hint style="info" %}
**Nota sobre mensajes de error m√©trico**: Los ver√° hasta que el prometheus pushergateway est√© configurado en la secci√≥n 6. `Error en MetricPusher: System.Net.Http.HttpRequestException: Connection refused`
{% endhint %}
{% endtab %}

{% tab title="Configuraci√≥n m√≠nima de hardware \(Infura\)" %}
{% hint style="info" %}
Infura es adecuada para configuraciones de espacio limitado. Ejecute siempre su propio nodo eth1 completo cuando sea posible.
{% endhint %}

Reg√≠strate para obtener una clave de acceso API en [https://infura.io/](https://infura.io/)

1. Reg√≠strese para obtener una cuenta gratuita.
2. Confirme su direcci√≥n de correo electr√≥nico.
3. Visita tu panel de control [https://infura.io/dashboard](https://infura.io/dashboard)
4. Crear un proyecto, darle un nombre.
5. Seleccione **Mainnet** como ENDPOINT
6. Siga la configuraci√≥n espec√≠fica para su cliente eth2 que se encuentra a continuaci√≥n.

{% hint style="success" %}
Alternatively use a free Ethereum node such as [Chainstack ](https://chainstack.com)at [https://ethereumnodes.com/](https://ethereumnodes.com/)
{% endhint %}

## Configuraci√≥n espec√≠fica de Nimbus

1. Al crear el **archivo de unidad**de su sistema, actualice el par√°metro `--web-url` con este punto final.
2. Copiar el punto final del websocket. Comienza con `wss://`
3. Guarde esto para el paso 4, configurando su nodo eth2.

```bash
#ejemplo
--web3-url=<your wss:// infura endpoint>
```

## Configuraci√≥n espec√≠fica de Teku

1. Despu√©s de crear el `teku.yaml` ubicado en `ma√±ana/teku/teku.yaml`, actualiza el par√°metro `--eth1-endpoint` con este endpoint.
2. Copiar el punto final http. Comienza con `http://`
3. Guarde esto para el paso 4, configurando su nodo eth2.

```bash
#example
eth1-endpoint: <your https:// infura endpoint>
```

## Configuraci√≥n Espec√≠fica del Faro

1. Al crear su **sistema de cadena de beacon** **archivo unitario**, agregue el par√°metro `--eth1-endpoint` con este endpoint.
2. Copia el punto final **https**. Comienza con `https://`
3. Guarde esto para el paso 4, configurando su nodo eth2.

```bash
#example
--eth1-endpoint=<your https:// infura endpoint>
```

## Configuraci√≥n espec√≠fica del Prysm

1. Al crear su **archivo de unidad de sistema de cadena de beacon**, actualice el par√°metro `--http-web3provider` con este endpoint.
2. Copia el punto final **https**. Comienza con `https://`
3. Guarde esto para el paso 4, configurando su nodo eth2.

```bash
#example
--http-web3provider=<your https:// infura endpoint>
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
La sincronizaci√≥n de un nodo eth1 puede tardar hasta 1 semana. En m√°quinas de alta gama con internet gigabit, se espera que la sincronizaci√≥n tome menos de un d√≠a.
{% endhint %}

{% hint style="success" %}
Su nodo eth1 est√° completamente sincronizado cuando se producen estos eventos.

* **`OpenEthereum:`** `Imported #<block number>`
* **`Geth:`** `Importado nuevo segmento de cadena`
* **`Besu:`** `Importado #<block number>`
* **`mente:`** `Ya no sincronizando Cabeceras Antiguas`
{% endhint %}

#### üõ† Comandos √∫tiles de eth1.service

üóí **Para ver y seguir los registros eth1**

```text
journalctl -u eth1 -f
```

üóí **Para detener el servicio eth1**

```text
parada de sistema sudo eth1
```

## üåú 4. Configurar un nodo y validador de la cadena ETH2

Tu elecci√≥n de [Faro](https://github.com/sigp/lighthouse), [Nimbus](https://github.com/status-im/nimbus-eth2), [Teku](https://consensys.net/knowledge-base/ethereum-2/teku/), [Prysm](https://github.com/prysmaticlabs/prysm) o [Lodestar](https://lodestar.chainsafe.io/).

{% tabs %}
{% tab title="Lighthouse" %}
{% hint style="info" %}
[Lighthouse](https://github.com/sigp/lighthouse) es un cliente Eth2.0 centrado en la velocidad y la seguridad. El equipo detr√°s de ella, [Sigma Prime](https://sigmaprime.io/), es una empresa de seguridad e ingenier√≠a de software que ha financiado Lighthouse junto con la Fundaci√≥n Ethereum, Consensys, y particulares. Lighthouse est√° compilado en Rust y se ofrece bajo una licencia Apache 2.0.
{% endhint %}

## ‚öô 4.1. Instalar dependencia de rust

```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

Introduzca '1' para continuar con la instalaci√≥n por defecto.

Actualice sus variables de entorno.

```bash
echo export PATH="$HOME/.cargo/bin:$PATH" >> ~/.bashrc
source ~/.bashrc
```

Instalar dependencias de rust.

```text
sudo apt-get update
sudo apt install -y git gcc g++ make cmake pkg-config libssl-dev
```

## üí° 4.2. Construir Faro desde la fuente

```bash
mkdir ~/git
cd ~/git
git clone https://github.com/sigp/lighthouse. it
cd lighthouse
git fetch --all && git checkout estable && git pull
make
```

{% hint style="info" %}
En caso de errores de compilaci√≥n, ejecute la siguiente secuencia.

```text
actualizaci√≥n de rustup
limpieza de carga
hacer
```
{% endhint %}

{% hint style="info" %}
Este proceso de compilaci√≥n puede tardar unos minutos.
{% endhint %}

Verifique que el faro se ha instalado correctamente comprobando el n√∫mero de versi√≥n.

```text
faro --version
```

## üé© 4.3. Importar clave de validador

{% hint style="info" %}
Cuando importas tus claves en Lighthouse, las claves de tu validador\(s\) se almacenan en la carpeta `$HOME/.lighthouse/mainnet/validators`.
{% endhint %}

Ejecute el siguiente comando para importar sus claves de validador desde el directorio de herramientas eth2deposit-cli.

Introduzca su **contrase√±a de keystore** para importar cuentas.

```bash
importar validador de cuenta faro --network mainnet --directory=$HOME/eth2deposit-cli/validator_keys
```

Verifique que las cuentas se han importado correctamente.

```bash
lista de validadores de cuentas lighthouse --red mainnet
```

{% hint style="danger" %}
**ADVERTENCIA**: NO UTILICE LOS KEYSTORES ORIGINALES PARA VALIDAR CON OTROS CLIENTOS, O USTED SER√Å SLASHADO.
{% endhint %}

## üî• 4.4. Configurar desv√≠o de puertos y/o firewall

Espec√≠ficamente para su configuraci√≥n de red o configuraci√≥n de proveedores de nube, [aseg√∫rese de que los puertos firewall de su validador est√°n abiertos y alcanzables.](../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Lighthouse beacon chain** requiere el puerto 9000 para tcp y udp
* **eth1** node requiere el puerto 30303 para tcp y udp

{% hint style="info" %}
‚ú® **Consejo de reenv√≠o de puertos:** Tendr√°s que redirigir y abrir puertos a tu validador. Verifique que est√° trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## ‚õì 4.5. Iniciar la cadena del faro

#### üç∞ Benefits of using systemd for your beacon chain <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente su cadena de faros cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reinicie autom√°ticamente los procesos de la cadena de baliza bloqueada.
3. Maximice su tiempo de actividad y rendimiento de la cadena de balizas.

#### üõ† Instrucciones de configuraci√≥n para el sistema

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`beacon-chain.service`. Simplemente copie y pegue.

```bash
cat > $HOME/beacon-chain. ervice << EOF 
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripci√≥n = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. Destino 

[Service]
usuario = $(whoami)
ExecStart = $(which lighthouse) bn --staking --metrics --network mainnet
Reiniciar = on-failure

[Install][Install]
WantedBy = multi-usuario. objetivo
EOF
```

{% hint style="info" %}
\*\*\*\*\*üî• **Lighthouse Pro Tip:** En la l√≠nea **ExecStart** , a√±adir la bandera `--eth1-endpoints` permite redundantes nodos eth1. Separar con comas. Aseg√∫rate de que el endpoint no termina con una barra final o`/` Quitarlo.

```bash
# Ejemplo:
--eth1-endpoints http://localhost:8545,https://nodes.mewapi.io/rpc/eth,https://mainnet.eth.cloud.ava.do,https://mainnet.infura.io/v3/xxx
```

üí∏ Encuentra nodos de reserva gratuitos de ethereum en [https://ethereumnodes.com/](https://ethereumnodes.com/)
{% endhint %}

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/beacon-chain.service
```

Ejecute lo siguiente para habilitar auto-start al momento de arranque y luego inicie su servicio de nodo beacon.

```text
sudo systemctl daemon-reload
sudo systemctl habilita beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="info" %}
**Resoluci√≥n de problemas comunes**:

_La cadena de faros no se pudo conectar al servicio :8545?_

* En el archivo de unidad de cadena beacon bajo \[Service\], a√±adido, "`ExecStartPre = /bin/sleep 30`" para que espere 30 segundos a que se inicie el nodo eth1 antes de conectarse.

_CRIT id de cadena eth1 no v√°lido. Por favor, cambie al id de cadena correcto._

* Permitir que su nodo eth1 sincronice completamente con mainnet.
{% endhint %}

{% hint style="success" %}
Buen trabajo. Su cadena de faros est√° ahora gestionada por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=beacon-chain -f
```

```bash
#ver registro desde ayer
journalctl --unit=beacon-chain --.Ue=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=beacon-chain --.Ue=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=beacon-chain --.Ue='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si la cadena de baliza est√° activa

```text
sudo systemctl est√° activo beacon-chain
```

#### üîé Ver el estado de la cadena del faro

```text
sudo systemctl estado cadena beacon-becon
```

#### üîÑ Reiniciando la cadena del faro

```text
sudo systemctl recargar-o-reiniciar cadena beacon-
```

#### üõë Detener la cadena del faro

```text
sudo systemctl stop beacon-chain
```

## üß¨ 4.6. Iniciar el validador

#### üöÄ Configurar Graffiti y POAP

Configure su `graffiti`, un mensaje personalizado incluido en los bloques que su validador propone con √©xito, y gane un token POAP. [Genera tu cadena POAP suministrando una direcci√≥n de Ethereum 1.0 aqu√≠.](https://beaconcha.in/poap)

Ejecute el siguiente comando para establecer la variable `MY_GRAFFITI`. Reemplazar `<my POAP string or message>` entre las comillas simples.

```bash
MY_GRAFITI='<my POAP string or message>'
# Ejemplos
# MY_GRAFITI='poapAAAAACGatUA1bLuDnL4FMD13BfoD'
# MY_GRAFITI='eth2 rulez!'
```

{% hint style="info" %}
Aprende m√°s sobre [POAP - La ficha de prueba de asistencia. ](https://www.poap.xyz/)
{% endhint %}

#### üç∞ Beneficios de usar systemd para su validador <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente el validador cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reiniciar autom√°ticamente los procesos validadores bloqueados.
3. Maximice su validador a tiempo de espera y rendimiento.

#### üõ† Instrucciones de configuraci√≥n para el sistema

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`validator.service`. Simplemente copie y pegue.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validaci√≥n eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripci√≥n = servicio de validadores eth2
Quiere = network-online. apuntar cadena de faros. ervice
After = network-online. Objetivo 

[Service]
usuario = $(whoami)
ExecStart = $(which lighthouse) vc --network mainnet --graffiti "${MY_GRAFFITI}" --metrics 
Reiniciar = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/validator.service
```

Ejecute lo siguiente para habilitar auto-inicio al momento de arranque y luego inicie su validador.

```text
sudo systemctl daemon-reload
sudo systemctl habilitar validator
sudo systemctl start validator
```

{% hint style="success" %}
Buen trabajo. Su validador ahora est√° gestionado por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=validator -f
```

```bash
#ver registro desde ayer
journalctl --unit=validator --ma√±ana=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=validator --ma√±ana=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=validator --‚óè e='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si el validador est√° activo

```text
sudo systemctl es validador activo
```

#### üîé Ver el estado del validador

```text
sudo systemctl status validator
```

#### üîÑ Reiniciando el validador

```text
validador de sudo systemctl recargar o reiniciar
```

#### üõë Detener el validador

```text
sudo systemctl stop validator
```
{% endtab %}

{% tab title="Nimbus" %}
{% hint style="info" %}
[Nimbus](https://our.status.im/tag/nimbus/) es un proyecto de investigaci√≥n y una implementaci√≥n de cliente para Ethereum 2. dise√±ado para funcionar bien en sistemas embebidos y dispositivos m√≥viles personales, incluyendo smartphones antiguos con hardware restringido a recursos. El equipo de Nimbus es de [Estado](https://status.im/about/) la empresa m√°s conocida por [su navegador de mensajeras/wallet/Web3](https://status.im/) con el mismo nombre. Nimbus \(Apache 2\) est√° escrito en Nim, un lenguaje con sintaxis tipo Python que compila a C.
{% endhint %}

## ‚öô 4.1. Construir Nimbus desde la fuente

Instalar dependencias.

```text
sudo apt-get update
sudo apt-get install curl build-essential git -y
```

Instalar y construir Nimbus.

```bash
mkdir ~/git 
cd ~/git
git clone https://github.com/statichard im/nimbus-eth2
cd nimbus-eth2
make NIMFLAGS="-d:insecure" nimbus_beacon_node
```

{% hint style="info" %}
El proceso de compilaci√≥n puede tardar unos minutos.
{% endhint %}

Verifique que Nimbus se ha instalado correctamente mostrando la ayuda.

```bash
cd $HOME/git/nimbus-eth2/build
./nimbus_beacon_node --help
```

Copia el archivo binario a `/usr/bin`

```bash
sudo cp $HOME/git/nimbus-eth2/build/nimbus_beacon_node /usr/bin
```

## üé© 4.2. Importar clave de validador <a id="6-import-validator-key"></a>

Crear una estructura de directorio para almacenar datos de nimbus.

```bash
sudo mkdir -p /var/lib/nimbus
```

Tomar posesi√≥n de este directorio y establecer el nivel de permisos correcto.

```bash
sudo chown $(whoami):$(whoami) /var/lib/nimbus
sudo chmod 700 /var/lib/nimbus
```

El siguiente comando importar√° sus claves de validador.

Introduzca su **contrase√±a de keystore** para importar cuentas.

```bash
cd $HOME/git/nimbus-eth2
build/nimbus_beacon_node deposits import --data-dir=/var/lib/nimbus $HOME/eth2deposit-cli/validator_keys
```

Ahora puede verificar que las cuentas fueron importadas con √©xito haciendo un listado de directorios.

```bash
ll /var/lib/nimbus/validators
```

Deber√≠a ver una carpeta llamada para cada una de las pubkey de su validador.

{% hint style="info" %}
Cuando importas tus claves en Nimbus, las claves de tu validador\(s\) se almacenan en la carpeta `/var/lib/nimbus` , bajo `secretos` y `validadores.`

La carpeta `secrets` contiene el secreto com√∫n que le da acceso a todas sus claves de validador.

La carpeta `validators` contiene su almac√©n de claves\(s\) \\(claves cifradas\\). Los validadores utilizan los almacenes de claves como m√©todo para el intercambio de claves.

Para m√°s informaci√≥n sobre claves y tiendas de claves, consulte [aqu√≠](https://blog.ethereum.org/2020/05/21/keys/).
{% endhint %}

{% hint style="danger" %}
**ADVERTENCIA**: NO UTILICE LOS KEYSTORES ORIGINALES PARA VALIDAR CON OTROS CLIENTOS, O USTED SER√Å SLASHADO.
{% endhint %}

## üî• 4.3. Configurar desv√≠o de puertos y/o firewall

Espec√≠ficamente para su configuraci√≥n de red o configuraci√≥n de proveedores de nube, [aseg√∫rese de que los puertos firewall de su validador est√°n abiertos y alcanzables.](../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Nimbus nodo de cadena de baliza** usar√° el puerto 9000 para tcp y udp
* **eth1** node requiere el puerto 30303 para tcp y udp

{% hint style="info" %}
‚ú® **Consejo de reenv√≠o de puertos:** Tendr√°s que redirigir y abrir puertos a tu validador. Verifique que est√° trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## üèÇ 4.4. Iniciar la cadena del faro y validador

{% hint style="info" %}
Nimbus combina tanto la cadena de baliza como el validador en un solo proceso.
{% endhint %}

#### üöÄ Configurar Graffiti y POAP

Configure su `graffiti`, un mensaje personalizado incluido en los bloques que su validador propone con √©xito, y gane un token POAP. [Genera tu cadena POAP suministrando una direcci√≥n de Ethereum 1.0 aqu√≠.](https://beaconcha.in/poap)

Ejecute el siguiente comando para establecer la variable `MY_GRAFFITI`. Reemplazar `<my POAP string or message>` entre las comillas simples.

```bash
MY_GRAFITI='<my POAP string or message>'
# Ejemplos
# MY_GRAFITI='poapAAAAACGatUA1bLuDnL4FMD13BfoD'
# MY_GRAFITI='eth2 rulez!'
```

{% hint style="info" %}
Aprende m√°s sobre [POAP - La ficha de prueba de asistencia. ](https://www.poap.xyz/)
{% endhint %}

#### üç∞ Benefits of using systemd for your beacon chain and validator <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente su cadena de faros cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reinicie autom√°ticamente los procesos de la cadena de baliza bloqueada.
3. Maximice su tiempo de actividad y rendimiento de la cadena de balizas.

#### üõ† Instrucciones de configuraci√≥n

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`beacon-chain.service`. Simplemente copie y pegue.

```bash
cat > $HOME/beacon-chain. ervice << EOF 
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripci√≥n = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. Destet 

[Service]
Tipo = simple
Usuario = $(whoami)
WorkingDirectory= /var/lib/nimbus
ExecStart = /bin/bash -c '/usr/bin/nimbus_beacon_node --network=mainnet --graffiti="${MY_GRAFFITI}" --data-dir=/var/lib/nimbus --web3-url=ws://127. .0.1:8546 --metrics --metrics-port=8008 --rpc --rpc-port=9091 --validators-dir=/var/lib/nimbus/validators --secrets-dir=/var/lib/nimbus/secrets --log-file=/var/lib/nimbus/beacon. og'
Reinicio = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

{% hint style="warning" %}
Nimbus s√≥lo soporta conexiones websocket \("ws://" y "wss://"\) para el nodo ETH1. Los nodos Geth, OpenEthereum e Infura ETH1 son compatibles.
{% endhint %}

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/beacon-chain.service
```

Ejecute lo siguiente para habilitar auto-start al momento de arranque y luego inicie su servicio de nodo beacon.

```text
sudo systemctl daemon-reload
sudo systemctl habilita beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Buen trabajo. Su cadena de faros est√° ahora gestionada por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=beacon-chain -f
```

```bash
#ver registro desde ayer
journalctl --unit=beacon-chain --.Ue=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=beacon-chain --.Ue=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=beacon-chain --.Ue='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si la cadena de baliza est√° activa

```text
sudo systemctl est√° activo beacon-chain
```

#### üîé Ver el estado de la cadena del faro

```text
sudo systemctl estado cadena beacon-becon
```

#### üîÑ Reiniciando la cadena del faro

```text
sudo systemctl recargar-o-reiniciar cadena beacon-
```

#### üõë Detener la cadena del faro

```text
sudo systemctl stop beacon-chain
```
{% endtab %}

{% tab title="Teku" %}
{% hint style="info" %}
[PegaSys Teku](https://consensys.net/knowledge-base/ethereum-2/teku/) \(antes conocido como Artemis\) es un cliente basado en Java Ethereum 2.0 dise√±ado & construido para satisfacer las necesidades institucionales y los requisitos de seguridad. PegaSys es un brazo de [ConsenSys](https://consensys.net/) dedicado a la construcci√≥n de clientes y herramientas listas para interactuar con la plataforma de Ethereum del n√∫cleo. Teku tiene licencia Apache 2 y est√° escrito en Java, un lenguaje notable por su autenticidad & ubicaci√≥n.
{% endhint %}

## ‚öô 4.1 Construir Teku desde el origen

Install git.

```text
sudo apt-get install git -y
```

Instalar Java 11.

Para **Ubuntu 20.x**, utiliza lo siguiente

```
sudo apt update
sudo apt install openjdk-11-jdk -y
```

Para **Ubuntu 18.x**, utiliza lo siguiente

```text
sudo add-apt-repository ppa:linuxuprising/java
sudo apt update
sudo apt install oracle-java11-set-default -y
```

Verifique que Java 11+ est√° instalado.

```bash
java --version
```

Instalar y compilar Teku.

```bash
mkdir ~/git
cd ~/git
git clone https://github.com/ConsenSys/teku.git
cd teku
./gradlew distTar installDist
```

{% hint style="info" %}
Este proceso de compilaci√≥n puede tardar unos minutos.
{% endhint %}

Verifique que Teku se ha instalado correctamente al mostrar la versi√≥n.

```bash
cd $HOME/git/teku/build/install/teku/bin
./teku --version
```

Copie el archivo binario teku a `/usr/bin/teku`

```bash
sudo cp -r $HOME/git/teku/build/install/teku /usr/bin/teku
```

## üî• 4.2. Configurar desv√≠o de puertos y/o firewall

Espec√≠ficamente para su configuraci√≥n de red o configuraci√≥n de proveedores de nube, [aseg√∫rese de que los puertos firewall de su validador est√°n abiertos y alcanzables.](../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **El nodo de cadena de baliza Teku** usar√° el puerto 9000 para tcp y udp
* **eth1** node requiere el puerto 30303 para tcp y udp

{% hint style="info" %}
\*\*\*\*‚ú® **Consejo de reenv√≠o de puertos:** Tendr√°s que redirigir y abrir puertos a tu validador. Verifique que est√° trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## üèÇ 4.3. Configurar la cadena del faro y el validador

{% hint style="info" %}
Teku combina tanto la cadena de baliza como el validador en un solo proceso.
{% endhint %}

Configurar una estructura de directorios para Teku.

```bash
sudo mkdir -p /var/lib/teku
sudo mkdir -p /etc/teku
sudo chown $(whoami):$(whoami) /var/lib/teku
```

 Copie el directorio `validator_files` al directorio de datos que creamos arriba y elimine el archivo de deposit\_data adicional.

```bash
cp -r $HOME/eth2deposit-cli/validator_keys /var/lib/teku
rm /var/lib/teku/validator_keys/deposit_data*
```

{% hint style="danger" %}
**ADVERTENCIA**: NO UTILICE LOS KEYSTORES ORIGINALES PARA VALIDAR CON OTROS CLIENTOS, O USTED SER√Å SLASHADO.
{% endhint %}

Almacena tu contrase√±a **de almac√©n de claves** en un archivo y hazla de solo lectura. Esto es necesario para que Teku pueda descifrar y cargar sus validadores.

Actualice su **contrase√±a del almac√©n de claves** entre las comillas despu√©s de `echo`.

```bash
echo 'my_password_goes_here' > $HOME/validators-password.txt
sudo mv $HOME/validators-password.txt (0)[video] /teku/validators-password.txt
sudo chmod 600 ‚ñ∫ /teku/validators-password.txt
```

#### üöÄ Configurar Graffiti y POAP

Configure su `graffiti`, un mensaje personalizado incluido en los bloques que su validador propone con √©xito, y gane un token POAP. [Genera tu cadena POAP suministrando una direcci√≥n de Ethereum 1.0 aqu√≠.](https://beaconcha.in/poap)

Ejecute el siguiente comando para establecer la variable `MY_GRAFFITI`. Reemplazar `<my POAP string or message>` entre las comillas simples.

```bash
MY_GRAFITI='<my POAP string or message>'
# Ejemplos
# MY_GRAFITI='poapAAAAACGatUA1bLuDnL4FMD13BfoD'
# MY_GRAFITI='eth2 rulez!'
```

{% hint style="info" %}
Aprende m√°s sobre [POAP - La ficha de prueba de asistencia. ](https://www.poap.xyz/)
{% endhint %}

Genera tu archivo de configuraci√≥n Teku. Simplemente copie y pegue.

```bash
cat > $HOME/teku.yaml << EOF
# network
network: "mainnet"

# p2p
p2p-enabled: true
p2p-port: 9000
# validators
validator-keys: "/var/lib/teku/validator_keys:/var/lib/teku/validator_keys"
validators-graffiti: "${MY_GRAFFITI}"

# Eth 1
eth1-endpoint: "http://localhost:8545"

# metrics
metrics-enabled: true
metrics-port: 8008

# database
data-path: "$(echo $HOME)/tekudata"
data-storage-mode: "archive"

# rest api
rest-api-port: 5051
rest-api-docs-enabled: true
rest-api-enabled: true

# logging
log-include-validator-duties-enabled: true
log-destination: CONSOLE
EOF
```

Mover el archivo de configuraci√≥n a `ma√±/teku`

```bash
sudo mv $HOME/teku.yaml /teku/teku.yaml
```

## üé© Clave validadora de importaci√≥n 4.4

{% hint style="info" %}
Al especificar los directorios para sus claves validadoras, Teku espera encontrar archivos de claves y contrase√±as con el mismo nombre.

Por ejemplo `keystore-m_12221_3600_1_0_0-11222333.json` y `keystore-m_12221_3600_1_0_0-11222333.txt`
{% endhint %}

Crea un archivo de contrase√±a correspondiente para cada uno de tus validadores.

```bash
for f in /var/lib/teku/validator_keys/keystore*.json; do cp (0)[video] /teku/validators-password.txt /var/lib/teku/validator_keys/$(basename $f .json).txt; hecho
```

Verificar que el almac√©n de claves de su validador y las contrase√±as del validador est√©n presentes comprobando el siguiente directorio.

```bash
ll /var/lib/teku/validator_keys
```

## üèÅ 4.5. Iniciar la cadena del faro y validador

Use **systemd** para gestionar el inicio y la detenci√≥n del teku.

#### üç∞ Benefits of using systemd for your beacon chain and validator <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente su cadena de faros cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reinicie autom√°ticamente los procesos de la cadena de baliza bloqueada.
3. Maximice su tiempo de actividad y rendimiento de la cadena de balizas.

#### üõ† Instrucciones de configuraci√≥n

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`beacon-chain.service`.

```bash
cat > $HOME/beacon-chain. ervice << EOF
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripci√≥n = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. Destet 

[Service]
Usuario = $(whoami)
ExecStart = /usr/bin/teku/bin/teku -c /etc/teku/teku. aml
Reiniciar = en falla
Entorno = JAVA_OPTS=-Xmx5g

[Install]
WantedBy = multiusuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/beacon-chain.service
```

Ejecute lo siguiente para habilitar auto-start al momento de arranque y luego inicie su servicio de nodo beacon.

```text
sudo systemctl daemon-reload
sudo systemctl habilita beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Buen trabajo. Su cadena de faros est√° ahora gestionada por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=beacon-chain -f
```

```bash
#ver registro desde ayer
journalctl --unit=beacon-chain --.Ue=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=beacon-chain --.Ue=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=beacon-chain --.Ue='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si la cadena de baliza est√° activa

```text
sudo systemctl est√° activo beacon-chain
```

#### üîé Ver el estado de la cadena del faro

```text
sudo systemctl estado cadena beacon-becon
```

#### üîÑ Reiniciando la cadena del faro

```text
sudo systemctl recargar-o-reiniciar cadena beacon-
```

#### üõë Detener la cadena del faro

```text
sudo systemctl stop beacon-chain
```
{% endtab %}

{% tab title="Prysm" %}
{% hint style="info" %}
[Prysm](https://github.com/prysmaticlabs/prysm) es una implementaci√≥n de Ethereum 2.0 protocolo con enfoque en usabilidad, seguridad y fiabilidad. Prysm es desarrollado por [Prysmatic Labs](https://prysmaticlabs.com/), una empresa con el √∫nico enfoque en el desarrollo de su cliente. Prysm est√° escrito en Go y publicado bajo una licencia GPL-3.0.
{% endhint %}

## ‚öô 4.1. Install Prysm

```bash
mkdir ~/prysm && cd ~/prysm 
curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && chmod +x prysm.sh 
```

## üî• 4.2. Configurar desv√≠o de puertos y/o firewall

Espec√≠ficamente para su configuraci√≥n de red o configuraci√≥n de proveedores de nube, [aseg√∫rese de que los puertos firewall de su validador est√°n abiertos y alcanzables.](../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Prysm beacon chain node** usar√° el puerto 12000 para udp y el puerto 13000 para tcp
* **eth1** node requiere el puerto 30303 para tcp y udp

{% hint style="info" %}
‚ú® **Consejo de reenv√≠o de puertos:** Tendr√°s que redirigir y abrir puertos a tu validador. Verifique que est√° trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## üé© 4.3. Importar clave de validador

Aceptar los t√©rminos de uso, aceptar la ubicaci√≥n predeterminada de la cartera ingrese una nueva contrase√±a de solo prysm-only para cifrar sus archivos locales del monedero prysm e introduzca la **contrase√±a del almac√©n de claves** para sus cuentas importadas.

{% hint style="info" %}
Si lo desea, puede utilizar la misma contrase√±a para el almac√©n de claves **** y **prysm**.
{% endhint %}

```bash
$HOME/prysm/prysm.sh cuentas validadoras importar --mainnet --keys-dir=$HOME/eth2deposit-cli/validator_keys
```

Verifique sus validadores importados con √©xito.

```bash
$HOME/prysm/prysm.sh validador lista --mainnet
```

Confirme que las pubkeys de su validador est√°n listadas.

> \#Salida de ejemplo:
> 
> Mostrando 1 cuenta de validador Ver los datos de transacci√≥n de dep√≥sitos eth1 para sus cuentas ejecutando \`validator accounts list --show-deposit-data
> 
> Cuenta 0 \| pens-herther-heat   
> \[validating public key\] 0x2374.....7121

{% hint style="danger" %}
**ADVERTENCIA**: NO UTILICE LOS KEYSTORES ORIGINALES PARA VALIDAR CON OTROS CLIENTOS, O USTED SER√Å SLASHADO.
{% endhint %}

## üèÇ 4.4. Iniciar la cadena del faro

#### üç∞ Benefits of using systemd for your beacon chain and validator <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente su cadena de faros cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reinicie autom√°ticamente los procesos de la cadena de baliza bloqueada.
3. Maximice su tiempo de actividad y rendimiento de la cadena de balizas.

#### üõ† Instrucciones de configuraci√≥n

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`beacon-chain.service`. Simplemente copie y pegue.

```bash
cat > $HOME/beacon-chain. ervice << EOF 
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripci√≥n = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. objetivo 

[Service]
Tipo = simple
Usuario = $(whoami)
ExecStart = $(echo $HOME)/prysm/prysm. h beacon-chain --mainnet --p2p-max-peers=75 --http-web3provider=http://127.0.0. :8545 --accept-terms-of-use 
Restart = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

{% hint style="info" %}
\*\*\*\*üî• **Prysm Pro Tip:** En la l√≠nea **ExecStart** , a√±adir la bandera `--fallback-web3provider` permite un nodo eth1. Puede usar la bandera varias veces. Aseg√∫rate de que el endpoint no termina con una barra final o`/` Quitarlo.

```bash
--fallback-web3provider=<http://<alternate eth1 provider one> --fallback-web3provider=<http://<alternate eth1 provider two>
# Ejemplo
# --fallback-web3provider=https://nodes.mewapi.io/rpc/eth --fallback-web3provider=https://mainnet.infura.io/v3/YOUR-PROJECT-ID
```

üí∏ Encuentra nodos de reserva gratuitos de ethereum en [https://ethereumnodes.com/](https://ethereumnodes.com/)
{% endhint %}

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/beacon-chain.service
```

Ejecute lo siguiente para habilitar auto-start al momento de arranque y luego inicie su servicio de nodo beacon.

```text
sudo systemctl daemon-reload
sudo systemctl habilita beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Buen trabajo. Su cadena de faros est√° ahora gestionada por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=beacon-chain -f
```

```bash
#ver registro desde ayer
journalctl --unit=beacon-chain --.Ue=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=beacon-chain --.Ue=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=beacon-chain --.Ue='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si la cadena de baliza est√° activa

```text
sudo systemctl est√° activo beacon-chain
```

#### üîé Ver el estado de la cadena del faro

```text
sudo systemctl estado cadena beacon-becon
```

#### üîÑ Reiniciando la cadena del faro

```text
sudo systemctl recargar-o-reiniciar cadena beacon-
```

#### üõë Detener la cadena del faro

```text
sudo systemctl stop beacon-chain
```

## üß¨ 4.5. Iniciar el validador <a id="9-start-the-validator"></a>

Almacena tu **contrase√±a de solo prysm** en un archivo y hazla de solo lectura. Esto es necesario para que Prysm pueda descifrar y cargar sus validadores.

```bash
echo 'my_password_goes_here' > $HOME/.eth2validators/validators-password.txt
sudo chmod 600 $HOME/.eth2validators/validators-password.txt
```

#### üöÄ Configurar Graffiti y POAP

Configure su `graffiti`, un mensaje personalizado incluido en los bloques que su validador propone con √©xito, y gane un token POAP. [Genera tu cadena POAP suministrando una direcci√≥n de Ethereum 1.0 aqu√≠.](https://beaconcha.in/poap)

Ejecute el siguiente comando para establecer la variable `MY_GRAFFITI`. Reemplazar `<my POAP string or message>` entre las comillas simples.

```bash
MY_GRAFITI='<my POAP string or message>'
# Ejemplos
# MY_GRAFITI='poapAAAAACGatUA1bLuDnL4FMD13BfoD'
# MY_GRAFITI='eth2 rulez!'
```

{% hint style="info" %}
Aprende m√°s sobre [POAP - La ficha de prueba de asistencia. ](https://www.poap.xyz/)
{% endhint %}

Su elecci√≥n de ejecutar un validador manualmente desde la l√≠nea de comandos o autom√°ticamente con el sistema.

#### üç∞ Beneficios de usar systemd para su validador <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente el validador cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reiniciar autom√°ticamente los procesos validadores bloqueados.
3. Maximice su validador a tiempo de espera y rendimiento.

#### üõ† Instrucciones de configuraci√≥n para systemd

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`validator.service`. Simplemente copie y pegue.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validaci√≥n eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripci√≥n = servicio de validadores eth2
Quiere = network-online. objetivo beacon-chain.service
After = network-online. objetivo 

[Service]
usuario = $(whoami)
ExecStart = $(echo $HOME)/prysm/prysm. h validator --mainnet --graffiti "${MY_GRAFFITI}" --accept-terms-of-use --wallet-password-file $(echo $HOME)/. th2validators/validators-password. xt
Reinicio = on-fail

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/validator.service
```

Ejecute lo siguiente para habilitar auto-inicio al momento de arranque y luego inicie su validador.

```text
sudo systemctl daemon-reload
sudo systemctl habilitar validator
sudo systemctl start validator
```

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=validator -f
```

```bash
#ver registro desde ayer
journalctl --unit=validator --ma√±ana=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=validator --ma√±ana=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=validator --‚óè e='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si el validador est√° activo

```text
sudo systemctl es validador activo
```

#### üîé Ver el estado del validador

```text
sudo systemctl status validator
```

#### üîÑ Reiniciando el validador

```text
validador de sudo systemctl recargar o reiniciar
```

#### üõë Detener el validador

```text
sudo systemctl stop validator
```

Verifica que tu **clave p√∫blica del validador** aparezca en los registros.

```bash
journalctl --unit=validator --‚ñ∫ e=today
# Ejemplo debajo
# INFO Activado validator voting_pubkey: 0x2374.....7121
```
{% endtab %}

{% tab title="Lodestar" %}
{% hint style="info" %}
\*\*\*\*[**Lodestar** ](https://lodestar.chainsafe.io/)**es una implementaci√≥n Typescript** del oficial [Ethereum 2. especificaci√≥n](https://github.com/ethereum/eth2.0-specs) por el equipo [ChainSafe.io](https://lodestar.chainsafe.io/). Adem√°s del cliente de la cadena beacon, el equipo tambi√©n est√° trabajando en 22 paquetes y bibliotecas. Puede encontrar una lista completa [aqu√≠](https://hackmd.io/CcsWTnvRS_eiLUajr3gi9g). Por √∫ltimo, El equipo de Lodestar lidera el espacio Eth2 en investigaci√≥n y desarrollo de clientes ligeros y ha recibido financiaci√≥n de EF y Moloch DAO para este prop√≥sito.
{% endhint %}

{% hint style="danger" %}
Lodestar puede no ser totalmente funcional y estable todav√≠a.
{% endhint %}

## ‚öô 4.1 Construir Lodestar desde la fuente

Instalar curl y git.

```bash
sudo apt-get install git curl -y
```

Instalar yarn.

```bash
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg. om/debian/ stable main" | sudo tee /apt/sources.list.d/yarn.list
sudo apt update
sudo apt install yarn
```

Confirme que yarn est√° instalado correctamente.

```bash
yarn --version
# Deber√≠a mostrar la versi√≥n >= 1.22.4
```

Install nodejs.

```text
curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
sudo apt-get install -y nodejs
```

Confirmar que los nodejs est√°n instalados correctamente.

```bash
nodejs -v
# Deber√≠a mostrar la versi√≥n >= v12.18.3
```

Instalar y construir Lodestar.

```bash
mkdir ~/git
cd ~/git
git clone https://github.com/chainsafe/lodestar.git
cd lodestar
yarn install
yarn run build
```

{% hint style="info" %}
Este proceso de compilaci√≥n puede tardar unos minutos.
{% endhint %}

Verifique que Lodestar se ha instalado correctamente mostrando el men√∫ de ayuda.

```text
yarn run cli --help
```

## üî• 4.2. Configurar desv√≠o de puertos y/o firewall

Espec√≠ficamente para su configuraci√≥n de red o configuraci√≥n de proveedores de nube, [aseg√∫rese de que los puertos firewall de su validador est√°n abiertos y alcanzables.](../guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **El nodo de la cadena de baliza Lodestar** usar√° el puerto 30607 para tcp y el puerto 9000 para descubrimiento de pares udp.
* **eth1** node requiere el puerto 30303 para tcp y udp

{% hint style="info" %}
\*\*\*\*‚ú® **Consejo de reenv√≠o de puertos:** Tendr√°s que redirigir y abrir puertos a tu validador. Verifique que est√° trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## üé© 4.3. Importar clave de validador

```bash
yarn ejecutar la importaci√≥n del validador de cuenta cli \
  --network mainnet \
  --directory $HOME/eth2deposit-cli/validator_keys
```

Introduzca su **contrase√±a de keystore** para importar cuentas.

Confirme que sus claves fueron importadas correctamente.

```text
yarn ejecutar lista de validadores de cuenta cli --red mainnet
```

{% hint style="danger" %}
**ADVERTENCIA**: NO UTILICE LOS KEYSTORES ORIGINALES PARA VALIDAR CON OTROS CLIENTOS, O USTED SER√Å SLASHADO.
{% endhint %}

## üèÇ 4.4. Iniciar la cadena del faro y validador

Ejecutar la cadena de baliza autom√°ticamente con el sistema.

#### üç∞ Benefits of using systemd for your beacon chain <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente su cadena de faros cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reinicie autom√°ticamente los procesos de la cadena de baliza bloqueada.
3. Maximice su tiempo de actividad y rendimiento de la cadena de balizas.

#### üõ† Instrucciones de configuraci√≥n

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`beacon-chain.service`. Simplemente copie y pegue.

```bash
cat > $HOME/beacon-chain. ervice << EOF 
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripci√≥n = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. Destet 

[Service]
Usuario = $(whoami)
WorkingDirectory= $(echo $HOME)/git/lodestar
ExecStart = yarn run cli beacon --network mainnet --eth1. roviderUrl http://localhost:8545 --metrics. erverPort 8008
Reinicio = en falla

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/beacon-chain.service
```

Ejecute lo siguiente para habilitar auto-start al momento de arranque y luego inicie su servicio de nodo beacon.

```text
sudo systemctl daemon-reload
sudo systemctl habilita beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Buen trabajo. Su cadena de faros est√° ahora gestionada por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=beacon-chain -f
```

```bash
#ver registro desde ayer
journalctl --unit=beacon-chain --.Ue=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=beacon-chain --.Ue=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=beacon-chain --.Ue='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si la cadena de baliza est√° activa

```text
sudo systemctl est√° activo beacon-chain
```

#### üîé Ver el estado de la cadena del faro

```text
sudo systemctl estado cadena beacon-becon
```

#### üîÑ Reiniciando la cadena del faro

```text
sudo systemctl recargar-o-reiniciar cadena beacon-
```

#### üõë Detener la cadena del faro

```text
sudo systemctl stop beacon-chain
```

## üß¨ 4.5. Iniciar el validador

#### üöÄ Configurar Graffiti y POAP

Configure su `graffiti`, un mensaje personalizado incluido en los bloques que su validador propone con √©xito, y gane un token POAP. [Genera tu cadena POAP suministrando una direcci√≥n de Ethereum 1.0 aqu√≠.](https://beaconcha.in/poap)

Ejecute el siguiente comando para establecer la variable `MY_GRAFFITI`. Reemplazar `<my POAP string or message>` entre las comillas simples.

```bash
MY_GRAFITI='<my POAP string or message>'
# Ejemplos
# MY_GRAFITI='poapAAAAACGatUA1bLuDnL4FMD13BfoD'
# MY_GRAFITI='eth2 rulez!'
```

{% hint style="info" %}
Aprende m√°s sobre [POAP - La ficha de prueba de asistencia. ](https://www.poap.xyz/)
{% endhint %}

Ejecute el validador autom√°ticamente con el sistema.

#### üç∞ Beneficios de usar systemd para su validador <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar autom√°ticamente el validador cuando el ordenador se reinicia debido al mantenimiento, interrupci√≥n de energ√≠a, etc.
2. Reiniciar autom√°ticamente los procesos validadores bloqueados.
3. Maximice su validador a tiempo de espera y rendimiento.

#### üõ† Instrucciones de configuraci√≥n

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuraci√≥n`validator.service`. Simplemente copie y pegue.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validaci√≥n eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripci√≥n = servicio de validadores eth2
Quiere = network-online. objetivo beacon-chain.service
After = network-online. Objetivo 

[Service]
Usuario = $(whoami)
WorkingDirectory= $(echo $HOME)/git/lodestar
ExecStart = yarn run cli validator run --network mainnet --graffiti "${MY_GRAFFITI}"
Restart = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/validator.service
```

Ejecute lo siguiente para habilitar auto-inicio al momento de arranque y luego inicie su validador.

```text
sudo systemctl daemon-reload
sudo systemctl habilitar validator
sudo systemctl start validator
```

{% hint style="success" %}
Buen trabajo. Su validador ahora est√° gestionado por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### üõ† Algunos comandos √∫tiles del sistema

#### :file_gabinet: Ver y filtrar registros

```bash
#ver y seguir el registro
journalctl --unit=validator -f
```

```bash
#ver registro desde ayer
journalctl --unit=validator --ma√±ana=ayer
```

```bash
#ver registro desde hoy
journalctl --unit=validator --ma√±ana=hoy
```

```bash
#ver registro entre una fecha
journalctl --unit=validator --‚óè e='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```

#### ‚úÖ Comprueba si el validador est√° activo

```text
sudo systemctl es validador activo
```

#### üîé Ver el estado del validador

```text
sudo systemctl status validator
```

#### üîÑ Reiniciando el validador

```text
validador de sudo systemctl recargar o reiniciar
```

#### üõë Detener el validador

```text
sudo systemctl stop validator
```
{% endtab %}
{% endtabs %}

## üïí5. Sincronizaci√≥n de tiempo

{% hint style="info" %}
Debido a que la cadena de faros depende de tiempos precisos para realizar certificaciones y producir bloques, el tiempo de su computadora debe ser exacto a tiempo real NTP o NTS dentro de 0. segundos.
{% endhint %}

Configurar **Chrony** con la siguiente gu√≠a.

{% page-ref page="../../overview-ada/guide-how-to-build-a-haskell-stakepool-node/how-to-setup-chrony.md" %}

{% hint style="info" %}
chrony es una implementaci√≥n del Protocolo de Tiempo de Red y ayuda a mantener el tiempo de su computadora sincronizado con NTP.
{% endhint %}

{% hint style="warning" %}
Running multiple time synchronization services is known to cause issues. Ensure only either Chrony or only 1 NTP service is running.
{% endhint %}

## üîé6. Monitoreando a tu validador con Grafana y Prometeo

Prometheus es una plataforma de monitoreo que recolecta m√©tricas de objetivos monitorizados mediante la eliminaci√≥n de m√©tricas HTTP en estos objetivos. [La documentaci√≥n oficial est√° disponible aqu√≠.](https://prometheus.io/docs/introduction/overview/) Grafana es un panel utilizado para visualizar los datos recolectados.

### üê£ Instalaci√≥n 6.1

Instale prometheus y prometheus node exporter.

```text
sudo apt-get install -y prometheus prometheub node-exporter
```

Instalar grafana.

```bash
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" > grafana. ist
sudo mv grafana.list.es/apt/sources.list.d/grafana.list
sudo apt-get update && sudo apt-get install -y grafana
```

Habilita los servicios para que se inicien autom√°ticamente.

```bash
sudo systemctl habilita grafana-server.service prometheus.service prometheub node-exporter.service
```

Crea el archivo de configuraci√≥n **prometheus.yml**. Elija la ficha para su cliente eth2. Simplemente copie y pegue.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
cat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15 # por defecto, scrape objetivos cada 15 segundos.

  # Adjuntar estas etiquetas a cualquier serie de tiempo o alertas al comunicarse con
  # sistemas externos (federaci√≥n, almacenamiento remoto, administrador de alertas).
  external_labels:
    monitor: 'codelab-monitor'

# Una configuraci√≥n de scrape que contiene exactamente un endpoint a scrape:
# Aqu√≠ est√° Prometheus.
scrape_configs:
   - job_name: 'node_exporter'
     static_configs:
       - targets: ['localhost:9100']
   - job_name: 'nodes'
     metrics_path: /metrics    
     static_configs:
       - targets: ['localhost:5054']
   - job_name: 'validators'
     metrics_path: /metrics
     static_configs:
       - targets: ['localhost:5064']
EOF
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
cat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15 # por defecto, scrape objetivos cada 15 segundos.

  # Adjuntar estas etiquetas a cualquier serie de tiempo o alertas al comunicarse con
  # sistemas externos (federaci√≥n, almacenamiento remoto, administrador de alertas).
  external_labels:
    monitor: 'codelab-monitor'

# Una configuraci√≥n de scrape que contiene exactamente un endpoint a scrape:
# Aqu√≠ est√° Prometheus.
scrape_configs:
   - job_name: 'node_exporter'
     static_configs:
       - targets: ['localhost:9100']
   - job_name: 'nodes'
     metrics_path: /metrics    
     static_configs:
       - targets: ['localhost:8008']
EOF
```
{% endtab %}

{% tab title="Teku" %}
```bash
cat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15 # por defecto, scrape objetivos cada 15 segundos.

  # Adjuntar estas etiquetas a cualquier serie de tiempo o alertas al comunicarse con
  # sistemas externos (federaci√≥n, almacenamiento remoto, administrador de alertas).
  external_labels:
    monitor: 'codelab-monitor'

# Una configuraci√≥n de scrape que contiene exactamente un endpoint a scrape:
# Aqu√≠ est√° Prometheus.
scrape_configs:
   - job_name: 'node_exporter'
     static_configs:
       - targets: ['localhost:9100']
   - job_name: 'nodes'
     metrics_path: /metrics    
     static_configs:
       - targets: ['localhost:8008']
EOF
```
{% endtab %}

{% tab title="Prysm" %}
```bash
cat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15 # por defecto, scrape objetivos cada 15 segundos.

  # Adjuntar estas etiquetas a cualquier serie de tiempo o alertas al comunicarse con
  # sistemas externos (federaci√≥n, almacenamiento remoto, administrador de alertas).
  external_labels:
    monitor: 'codelab-monitor'

# Una configuraci√≥n de scrape que contiene exactamente un endpoint a scrape:
# Aqu√≠ est√° Prometheus.
scrape_configs:
   - job_name: 'node_exporter'
     static_configs:
       - targets: ['localhost:9100']
   - job_name: 'validator'
     static_configs:
       - targets: ['localhost:8081']
   - job_name: 'beacon node'
     static_configs:
       - targets: ['localhost:8080']
   - job_name: 'slasher'
     static_configs:
       - targets: ['localhost:8082']
EOF
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
gato > $HOME/prometheus. ml << EOF   
scrape_configs:
   - job_name: 'node_exporter'
     static_configs:
       - targets: ['localhost:9100']
   - job_name: 'Lodestar'
     metrics_path: /metrics    
     static_configs:
       - targets: ['localhost:8008']
EOF
```
{% endtab %}
{% endtabs %}

Configure prometheus para su nodo **eth1**. Empieza editando **prometheus.yml**

```bash
nano $HOME/prometheus.yml
```

A√±ade el fragmento de trabajo aplicable para tu nodo eth1 al final de **prometheus.yml**. Guardar el archivo.

{% hint style="warning" %}
**Espaciar asuntos**. Aseg√∫rate de que todos los fragmentos de `job_name` est√©n alineados.
{% endhint %}

{% tabs %}
{% tab title="Geth" %}
```bash
   - job_name: 'geth'
     scrape_interval: 15s
     scrape_timeout: 10s
     metrics_path: /debug/metrics/prometheus
     scheme: http
     static_configs:
     - targets: ['localhost:6060']
```
{% endtab %}

{% tab title="Besu" %}
```bash
   - job_name: 'besu'
     scrape_interval: 15s
     scrape_timeout: 10s
     metrics_path: /metrics
     scheme: http
     static_configs:
     - targets:
       - localhost:9545
```
{% endtab %}

{% tab title="Nethermind" %}
```bash
   - job_name: 'nethermind'
     scrape_interval: 15
     scrape_timeout: 10
     honor_labels: true
     static_configs:
       - targets: ['localhost:9091']
```

El monitoreo mental requiere [Prometheus Pushgateway](https://github.com/prometheus/pushgateway). Instalar con el siguiente comando.

```bash
sudo apt-get install -y prometheo's pushgateway
```

{% hint style="info" %}
Pushgateway escucha los datos de la mente en el puerto 9091.
{% endhint %}
{% endtab %}

{% tab title="OpenEthereum" %}
```bash
   - job_name: 'openethereum'
     scrape_interval: 15s
     scrape_timeout: 10s
     metrics_path: /metrics
     scheme: http
     static_configs:
     - targets: ['localhost:6060']
```
{% endtab %}
{% endtabs %}

Mu√©velo a `/prometheus/prometheus.yml`

```bash
sudo mv $HOME/prometheus.yml ‚Üí /prometheus/prometheus.yml
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/prometheus/prometheus.yml
```

Por √∫ltimo, reinicie los servicios.

```bash
sudo systemctl reinicie grafana-server.service prometheus.service prometheub node-exporter.service
```

Verificar que los servicios se est√°n ejecutando correctamente:

```text
sudo systemctl status grafana-server.service prometheus.service prometheub node-exporter.service
```

{% hint style="info" %}
üí° **Recordatorio**: Aseg√∫rate de que el puerto 3000 est√© abierto en el cortafuegos y/o el puerto reenviado si tienes la intenci√≥n de ver la informaci√≥n de monitoreo desde una m√°quina diferente.
{% endhint %}

### üì∂ 6.2 Configurando Grafana Dashboards

1. Abre [http://localhost:3000](http://localhost:3000) o http://&lt;your validator's ip address&gt;:3000 en tu navegador local.
2. Iniciar sesi√≥n con **admin** / **admin**
3. Cambiar contrase√±a
4. Haga clic en el icono **del equipo de configuraci√≥n** , luego **A√±adir fuente de datos**
5. Seleccione **Prometeo**
6. Establezca **Nombre** a **"Prometheus**"
7. Establecer **URL** a [http://localhost:9090](http://localhost:9090)
8. Haga clic en **Guardar & Prueba**
9. **Descargue y guarde** el archivo json de su Cliente ETH2. \[ [Faro BC ](https://raw.githubusercontent.com/sigp/lighthouse-metrics/master/dashboards/Summary.json)\| [Faro CV](https://raw.githubusercontent.com/sigp/lighthouse-metrics/master/dashboards/ValidatorClient.json) \| [Teku ](https://grafana.com/api/dashboards/13457/revisions/2/download)\| [Nimbus ](https://raw.githubusercontent.com/status-im/nimbus-eth2/master/grafana/beacon_nodes_Grafana_dashboard.json)\| [Prisma ](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)\| [Prisma &gt; 10 Validadores](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json) \| Lodestar \]
10. **Download and save** your ETH1 Client's json file \[ [Geth](https://gist.githubusercontent.com/karalabe/e7ca79abdec54755ceae09c08bd090cd/raw/3a400ab90f9402f2233280afd086cb9d6aac2111/dashboard.json) \| [Besu ](https://grafana.com/api/dashboards/10273/revisions/5/download)\| [Nethermind ](https://raw.githubusercontent.com/NethermindEth/metrics-infrastructure/master/grafana/dashboards/nethermind.json)\| [OpenEthereum ](https://raw.githubusercontent.com/dappnode/DAppNodePackage-openethereum/master/openethereum-grafana-dashboard.json)\]
11. **Descargue y ahorre** un panel [exportador de nodos](https://grafana.com/api/dashboards/11074/revisions/9/download) para monitorizaci√≥n general del sistema
12. Haga clic en **Crear +** icono &gt; **Importar**
13. A√±adir el panel de control del cliente ETH2 a trav√©s de **Subir archivo JSON**
14. Si es necesario, seleccione Prometheus como **Data Source**.
15. Haga clic en el bot√≥n **Importar**
16. Repita los pasos 12-15 para el panel de control del cliente ETH1.
17. Repetir los pasos 12-15 para el panel de control de node-exporter.

{% hint style="info" %}
\*\*\*\*üî• **Resoluci√≥n de problemas comunes de Grafana**:

_Los paneles no muestran datos de nodos eth1._

* En el archivo de unidad eth1 **** bajo ubicado en `/etc/systemd/system/eth1. ervice`, aseg√∫rese de que su nodo/geth eth1 se inicie con los par√°metros correctos, de modo que las m√©tricas de informe y el servidor http pprof est√©n habilitados.
  * Example:`ExecStartPre = /usr/bin/geth --http --metrics --pprof`
{% endhint %}

#### Ejemplo de tableros Grafana para cada cliente ETH2.

{% tabs %}
{% tab title="Lighthouse" %}
![Panel de Cadena de Faro por sigp](../../../.gitbook/assets/lhm.png)

![Panel de control del cliente validador por registro](../../../.gitbook/assets/lighthouse-validator.png)

Cr√©ditos: [https://github.com/sigp/lighthouse-metrics/](https://github.com/sigp/lighthouse-metrics/)
{% endtab %}

{% tab title="Nimbus" %}
![Panel de control por estado im](../../../.gitbook/assets/nim_dashboard.png)

Cr√©ditos: [https://github.com/status-im/nimbus-eth2/](https://github.com/status-im/nimbus-eth2/)
{% endtab %}

{% tab title="Teku" %}
![Teku de PegaSys Ingenier√≠a](../../../.gitbook/assets/teku.dash.png)

Cr√©ditos: [https://grafana.com/grafana/dashboards/13457](https://grafana.com/grafana/dashboards/13457)
{% endtab %}

{% tab title="Prysm" %}
![Prysm dashboard de GuillaumeMiralles](../../../.gitbook/assets/prysm_dash.png)

Cr√©ditos: [https://github.com/GuillaumeMiralles/prysm-grafana-dashboard](https://github.com/GuillaumeMiralles/prysm-grafana-dashboard)
{% endtab %}

{% tab title="Lodestar" %}
Trabajos en curso.
{% endtab %}
{% endtabs %}

#### Ejemplo de paneles de Grafana para cada nodo ETH1.

{% tabs %}
{% tab title="Geth" %}
![Tablero por karalabe](../../../.gitbook/assets/geth-dash.png)

Cr√©ditos: [https://gist.github.com/karalabe/e7ca79abdec54755ceae09c08bd090cd](https://gist.github.com/karalabe/e7ca79abdec54755ceae09c08bd090cd)
{% endtab %}

{% tab title="Besu" %}
![](../../../.gitbook/assets/besu-dash.png)

Cr√©ditos: [https://grafana.com/dashboards/10273](https://grafana.com/dashboards/10273)
{% endtab %}

{% tab title="Nethermind" %}
![](../../../.gitbook/assets/nethermind-dash.png)

Cr√©ditos: [https://github.com/)[video] mindEth/metrics-infrastructure](https://github.com/NethermindEth/metrics-infrastructure)
{% endtab %}

{% tab title="OpenEthereum" %}
![Credits to dappnode](../../../.gitbook/assets/openethereum-dashboard.png)
{% endtab %}
{% endtabs %}

#### Ejemplo de Tablero de Exportadores de Nodo

{% tabs %}
{% tab title="Node-Exporter Dashboard by starsliao" %}
**Monitoreo general del sistema**

Incluye: CPU, memoria, IO de disco, red, temperatura y otras m√©tricas de monitoreo

![](../../../.gitbook/assets/node-exporter.png)

![](../../../.gitbook/assets/node-exporter2.png)

Cr√©ditos: [starsliao](https://grafana.com/grafana/dashboards/11074)
{% endtab %}
{% endtabs %}

### ‚ö† 6.3 Configurar notificaciones de alerta

{% hint style="info" %}
Configurar alertas para recibir notificaciones si sus validadores se quedan sin conexi√≥n.
{% endhint %}

Recibe notificaciones de problemas con tus validadores. Elija entre correo electr√≥nico, telegram, discord o slack.

{% tabs %}
{% tab title="Email Notifications" %}
1. Visita [https://beaconcha.in/](https://beaconcha.in/)
2. Reg√≠strate en una cuenta.
3. Verifique su **correo electr√≥nico**
4. Busca la direcci√≥n p√∫blica de tu validador ****
5. A√±ade validadores a tu lista de seguimiento haciendo clic en el **s√≠mbolo del marcador**.
{% endtab %}

{% tab title="Telegram Notifications" %}
1. En el men√∫ de Grafana, seleccione **Canales de notificaci√≥n** debajo del icono de la campana.
2. Haga clic en **A√±adir canal**.
3. Dale al canal de notificaci√≥n un **nombre**.
4. Seleccione **Telegram** de la lista Tipos.
5. Para completar la **configuraci√≥n de la API de Telegram**, se requiere un **canal de Telegram** y **bot**. Para instrucciones sobre c√≥mo configurar un bot con `@Botfather`, vea [esta secci√≥n](https://core.telegram.org/bots#6-botfather) de la documentaci√≥n de Telegram. Necesitas crear un token de la API BOT.
6. Crear un nuevo grupo de telegramas.
7. Invita al bot a tu nuevo grupo.
8. Escriba al menos 1 mensaje en el grupo para inicializarlo.
9. Visit [`https://api.telegram.org/botXXX:YYY/getUpdates`](https://api.telegram.org/botXXX:YYY/getUpdates) where `XXX:YYY` is your BOT API Token.
10. En la respuesta JSON, encuentra y copia el **Chat ID**. Encu√©ntralo entre **chat** y **t√≠tulo**. _Ejemplo de ID de Chat_:  `-1123123123`

    ```text
    "chat":{"id":-123123123,"title":
    ```

11. Pegue el **Chat ID** en el campo correspondiente en **Grafana**.
12. **Guarda y prueba** el canal de notificaciones para tus alertas.
13. Ahora puede crear alertas personalizadas desde sus paneles. [Visita aqu√≠ para aprender a crear alertas.](https://grafana.com/docs/grafana/latest/alerting/create-alerts/)
{% endtab %}

{% tab title="Discord Notifications" %}
1. En el men√∫ de Grafana, seleccione **Canales de notificaci√≥n** debajo del icono de la campana.
2. Haga clic en **A√±adir canal**.
3. A√±ade un **nombre** al canal de notificaci√≥n.
4. Selecciona **Discord** de la lista de tipos.
5. Para completar la configuraci√≥n, se requiere un servidor de Discord \(y un canal de texto disponible\) as√≠ como una URL de Webhook. Para obtener instrucciones sobre c√≥mo configurar un Webhook de Discord, consulte [esta secci√≥n](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks) de su documentaci√≥n.
6. Introduzca el Webhook **URL** en el panel de configuraci√≥n de notificaci√≥n de Discord.
7. Haz clic en **Enviar prueba**, que enviar√° un mensaje de confirmaci√≥n al canal de Discord.
{% endtab %}

{% tab title="Slack Notifications" %}
1. En el men√∫ de Grafana, seleccione **Canales de notificaci√≥n** debajo del icono de la campana.
2. Haga clic en **A√±adir canal**.
3. A√±ade un **nombre** al canal de notificaci√≥n.
4. Selecciona **Slack** de la lista Tipos.
5. Para obtener instrucciones sobre c√≥mo configurar un webhook entrante de Slack, consulte [esta secci√≥n](https://api.slack.com/messaging/webhooks) de su documentaci√≥n.
6. Introduzca la URL de Slack Incoming Webhook en el campo **URL**.
7. Haga clic en **Enviar prueba**, que enviar√° un mensaje de confirmaci√≥n al canal de Slack.
{% endtab %}
{% endtabs %}

### üåä 6.4 Monitoreo con Comprobaci√≥n de Tiempo Actualizado por Google Cloud

{% hint style="info" %}
¬øQui√©n vigila el vigilante? Con una herramienta externa de terceros como Uptime Check, puede tener mayores garant√≠as de que su validador est√° funcionando en caso de desastres como fallo de energ√≠a, fallo de hardware o interrupci√≥n de Internet. En estos escenarios, la supervisi√≥n mencionada anteriormente por Prometeo y Grafana probablemente dejar√≠a de funcionar tambi√©n.

Cr√©ditos a [Mohamed Mansour por inspirar esta gu√≠a](https://www.youtube.com/watch?v=txgOVDTemPQ).
{% endhint %}

He aqu√≠ c√≥mo configurar un servicio de monitorizaci√≥n sin coste llamado Uptime Check por Google.

{% hint style="info" %}
Para una demostraci√≥n de v√≠deo, ve [v√≠deos educativos de MohamedMansour's eth2](https://www.youtube.com/watch?v=txgOVDTemPQ). Por favor, apoya su concesi√≥n [GITCOIN](https://gitcoin.co/grants/1709/video-educational-grant). üôè
{% endhint %}

1. Visita [cloud.google.com](https://cloud.google.com/)
2. Buscar **Monitorizaci√≥n** en el campo de b√∫squeda.
3. Haga clic en **Seleccionar un proyecto para empezar a monitorizar**.
4. Haga clic en **Nuevo proyecto**
5. **Nombre** su proyecto y haga clic en **Crear.**
6. En el men√∫ de notificaciones, seleccione su nuevo proyecto.
7. En la columna de la derecha, hay una Tarjeta de Vigilancia. Haga clic en **Ir al seguimiento**.
8. En el men√∫ de la izquierda, haga clic en **Comprobaciones de tiempo de actualizaci√≥n** y luego **CHELIAR CHECK.**
9. Escriba un t√≠tulo, p.e. _**Nodo Geth**_
10. Seleccionar protocolo como _**TCP**_
11. Introduzca su direcci√≥n IP p√∫blica y n√∫mero de puerto. es decir, ip=**7.55.6.3** y puerto =**30303**
12. Seleccione la frecuencia deseada para comprobar, por ejemplo, **5 minutos**
13. Elija la regi√≥n m√°s cercana a usted para comprobar. Haga clic a continuaci√≥n.
14. Crear un canal de notificaci√≥n. Haga clic en **Administrar canales de notificaci√≥n.**
15. Elija la configuraci√≥n deseada. Elegir de cualquiera o de todos Slack, Webhook, Email o SMS.
16. Volver a Crear ventana de Comprobar Uptime.
17. Dentro del campo de notificaciones, haz clic en el bot√≥n de actualizar para cargar tus nuevos canales de notificaci√≥n.
18. Seleccione las notificaciones deseadas.
19. Haga clic en **TEST** para verificar que las notificaciones est√°n configuradas correctamente.
20. Haga clic en **CREATE** para terminar.

{% hint style="success" %}
Una vez que su cadena de beacon est√° sincronizada, validador en funcionamiento, s√≥lo espera la activaci√≥n. Este proceso puede tardar m√°s de 24 horas. S√≥lo 900 validadores nuevos pueden unirse por d√≠a. Cuando te asignes, tu validador comenzar√° a crear y votar bloques mientras ganas las recompensas.

Usa [https://beaconcha.in/](https://beaconcha.in/) para crear alertas y rastrear el rendimiento de tu validador.
{% endhint %}

{% hint style="info" %}
Be sure to review the [Checklist \| How to confirm a healthy functional ETH2 validator.](checklist-or-how-to-confirm-a-healthy-functional-eth2-validator.md)
{% endhint %}

{% hint style="success" %}
üéâ¬°Felicidades por configurar tu validador! Es bueno ir a eth2.0.

¬øEncontraste √∫til nuestra gu√≠a? Env√≠enos una se√±al con un consejo y seguiremos actualiz√°ndola.

Usa [cointr.ee para encontrar nuestras direcciones de donaci√≥n ](https://cointr.ee/coincashew). üôè

Cualquier comentario y todas las solicitudes de extracci√≥n son muy apreciadas. üåõ

Descubra y chatee con otros interesados en Discord @

[https://discord.gg/w8Bx8W2HPW](https://discord.gg/w8Bx8W2HPW)üòÉ
{% endhint %}

## üßô‚ôÇ7. Update a ETH2 client

Cuando se corta una nueva versi√≥n, querr√° actualizar a la √∫ltima versi√≥n estable. A continuaci√≥n le muestra c√≥mo actualizar su cadena de baliza eth2 y validador.

{% hint style="info" %}
Revise siempre los registros de **git con el comando`git log`** o **las notas de lanzamiento** antes de actualizar. Puede haber cambios que requieran su atenci√≥n.
{% endhint %}

{% hint style="success" %}
\*\*\*\*üî• **Consejo Pro**: planifica tu actualizaci√≥n para solaparte con la mayor brecha de verificaci√≥n. [Aprende c√≥mo aqu√≠.](how-to-find-longest-attestation-slot-gap.md)
{% endhint %}

Seleccione su cliente ETH2.

{% tabs %}
{% tab title="Lighthouse" %}
Revise las notas de la versi√≥n y compruebe si se rompen cambios/caracter√≠sticas.

[https://github.com/sigp/lighthouse/releases](https://github.com/sigp/lighthouse/releases)

Desplegar el √∫ltimo c√≥digo fuente y construirlo.

```bash
cd $HOME/git/lighthouse
git fetch --all && git checkout stable && git pull
make
```

Verifique la versi√≥n completada comprobando el n√∫mero de la nueva versi√≥n.

```bash
faro --version
```

Reinicie la cadena de baliza y el validador seg√∫n los procedimientos operativos normales.

```text
sudo systemctl recargar-o-reiniciar validador beacon-chain
```
{% endtab %}

{% tab title="Nimbus" %}
Revise las notas de la versi√≥n y compruebe si se rompen cambios/caracter√≠sticas.

[https://github.com/status-im/nimbus-eth2/releases](https://github.com/status-im/nimbus-eth2/releases)

Desplegar el √∫ltimo c√≥digo fuente y construirlo.

```bash
cd $HOME/git/nimbus-eth2
git pull && make update
make NIMFLAGS="-d:insecure" nimbus_beacon_node
```

Verifique la versi√≥n completada comprobando el n√∫mero de la nueva versi√≥n.

```bash
cd $HOME/git/nimbus-eth2/build
./nimbus_beacon_node --version
```

Detiene, copie el nuevo binario y reinicie la cadena de baliza y el validador seg√∫n los procedimientos operativos normales.

```bash
sudo systemctl stop beacon-chain
sudo rm /usr/bin/nimbus_beacon_node
sudo cp $HOME/git/nimbus-eth2/build/nimbus_beacon_node /usr/bin
sudo systemctl reload-or-restart beacon-chain
```
{% endtab %}

{% tab title="Teku" %}
Revise las notas de la versi√≥n y compruebe si se rompen cambios/caracter√≠sticas.

[https://github.com/ConsenSys/teku/releases](https://github.com/ConsenSys/teku/releases)

Desplegar el √∫ltimo c√≥digo fuente y construirlo.

```bash
cd $HOME/git/teku
git pull
./gradlew distTar installDist
```

Verifique la versi√≥n completada comprobando el n√∫mero de la nueva versi√≥n.

```bash
cd $HOME/git/teku/build/install/teku/bin
./teku --version
```

Reinicie la cadena de baliza y el validador seg√∫n los procedimientos operativos normales.

```bash
sudo systemctl stop beacon-chain
sudo rm -rf /usr/bin/teku
sudo cp -r $HOME/git/teku/build/teku /usr/bin/teku
sudo systemctl reload-or-restart beacon-chain
```
{% endtab %}

{% tab title="Prysm" %}
Revise las notas de la versi√≥n y compruebe si se rompen cambios/caracter√≠sticas. [https://github.com/prysmaticlabs/prysm/releases](https://github.com/prysmaticlabs/prysm/releases)

```bash
#Simplemente reinicie los procesos
sudo systemctl reload-or-restart beacon-chain validator
```
{% endtab %}

{% tab title="Lodestar" %}
Revise las notas de la versi√≥n y compruebe si se rompen cambios/caracter√≠sticas.

[https://github.com/ChainSafe/lodestar/releases](https://github.com/ChainSafe/lodestar/releases)

Desplegar el √∫ltimo c√≥digo fuente y construirlo.

```bash
cd $HOME/git/lodestar
git pull
yarn install
yarn run build
```

Verifique la versi√≥n completada comprobando el n√∫mero de la nueva versi√≥n.

```bash
yarn run cli --version
```

Reinicie la cadena de baliza y el validador seg√∫n los procedimientos operativos normales.

```text
sudo systemctl recargar-o-reiniciar validador beacon-chain
```
{% endtab %}
{% endtabs %}

Marque los registros para verificar que los servicios est√°n funcionando correctamente y asegurarse de que no hay errores.

{% tabs %}
{% tab title="Faro \| Prisma \| Lodestar" %}
```bash
validador de estado del sistema de sudo beacon-chain
```
{% endtab %}

{% tab title="Nimbus \| Teku" %}
```
sudo systemctl estado cadena beacon-becon
```
{% endtab %}
{% endtabs %}

## üî•8. Consejos √∫tiles adicionales

### üõë 8.1 Salir voluntariamente de un validador

{% hint style="info" %}
Utiliza este comando para indicar tus intenciones de dejar de validar con tu validador. Esto significa que ya no quieres apostar con tu validador y quieres apagar tu nodo.

* La salida voluntaria toma un m√≠nimo de 2048 epochs \(o ~9d√≠as\). Hay una cola para salir y un retraso antes de que el validador se cierre por fin.
* Una vez que un validador haya terminado en la fase 0, esto no es revertible y ya no puede volver a validar de nuevo.
* Sus fondos no estar√°n disponibles para su retiro hasta la fase 1.5 o posterior.
* Despu√©s de que su validador salga de la cola de salida y est√© realmente cerrado, es seguro apagar su nodo y validador.
{% endhint %}

{% tabs %}
{% tab title="Lighthouse" %}
```bash
lighthouse account validator exit \
--keystore $HOME/.lighthouse/mainnet/validators \
--beacon-node http://localhost:5052 \
--network mainnet
```
{% endtab %}

{% tab title="Teku" %}
```bash
teku salida voluntaria \
--epoch=<epoch number to exit> \
--beacon-node-api-endpoint=http://127.0.0.1:5051 \
--validator-keys=<path to keystore.json>:<path to password.txt file>
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
compilar/nimbus_beacon_node deposita salida --validator=<VALIDATOR_PUBLIC_KEY> --data-dir=/var/lib/nimbus
```
{% endtab %}

{% tab title="Prysm" %}
```bash
$HOMEcuentas de validadores /prysm/prysm.sh de salida voluntaria
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
#PARA DETERMINAR
```
{% endtab %}
{% endtabs %}

### üóù 8.2 Verifique su frase mnem√≥nica

Utilizando la herramienta eth2deposit-cli, aseg√∫rese de que puede regenerar los mismos pares de claves eth2 restaurando sus `validator_keys`

```bash
cd $HOME/eth2deposit-cli 
./deposit.sh existing-mnemonic --chain mainnet
```

{% hint style="info" %}
Cuando la **pubkey** en ambos **archivos del almac√©n de claves** son **id√©nticos,** esto significa que su frase mnem√≥nica es veritativamente correcta. Otros campos ser√°n diferentes debido a la salaz√≥n.
{% endhint %}

### ü§ñ8.3 A√±adir validadores adicionales

Copia de seguridad y mueve el directorio `validator_key` existente y a√±ade la fecha al final.

```bash
# Ajusta tu directorio eth2deposit-cli en consecuencia
cd $HOME/eth2deposit-cli
# Cambia los nombres y a√±ade la fecha al directorio validator_key existente
mv validator_key validator_key_$(date +"%Y%d%m-%H%M%S")
# Opcional: tambi√©n puedes eliminar esta carpeta ya que puede regenerarse.
```

{% hint style="info" %}
Usando la herramienta eth2deposit-cli, puede agregar m√°s validadores creando un nuevo archivo de datos de dep√≥sito y `validator_keys`
{% endhint %}

2. Por ejemplo, en caso de que originalmente creamos **3 validadores** pero ahora queremos **a√±adir 5 validadores m√°s**, podr√≠amos usar el siguiente comando. Seleccione la pesta√±a en funci√≥n de c√≥mo adquiri√≥ [**eth2deposit tool**](https://github.com/ethereum/eth2.0-deposit-cli).

{% hint style="warning" %}
**Recordatorio de recomendaci√≥n de seguridad**: Para mejores pr√°cticas de seguridad, La gesti√≥n de claves y otras actividades en las que escriba su semilla mnem√≥nica de 24 palabras deben completarse en una m√°quina fr√≠a sin conexi√≥n desconectada arrancada desde una unidad USB.
{% endhint %}

{% hint style="danger" %}
Recordatorio de usar la misma **contrase√±a del almac√©n de claves.**
{% endhint %}

{% tabs %}
{% tab title="Build from source code" %}
```bash
# Genera a partir de 5 validadores m√°s mnem√≥nicos existentes cuando 3 ya estaban hechos previamente
./deposit.sh existing-mnemonic --validator_start_index 3 --num_validators 5 --chain mainnet
```
{% endtab %}

{% tab title="Pre-built eth2deposit-cli binaries" %}
```bash
# Genera a partir de 5 validadores m√°s mnem√≥nicos existentes cuando 3 ya estaban hechos anteriormente
./deposit existing-mnemonic --validator_start_index 3 --num_validators 5 --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
üî•**Pro Security Tip**: Ejecute la herramienta **eth2deposit-cli** y genere su **semilla mnem√≥nica** para sus claves de validador en una **m√°quina sin conexi√≥n conectada desde usb**.
{% endhint %}

Siga este [ethstaker.cc](https://ethstaker.cc/) exclusivo para la baja al hacer una usb arrancable.

### Parte 1 - Crear una unidad USB de arranque Ubuntu 20.04

{% embed url="https://www.youtube.com/watch?v=DTR3PzRtYU" %}

### Parte 2 - Instalar Ubuntu 20.04 desde la unidad USB

{% embed url="https://www.youtube.com/watch?v=C97\_6‚ñ∫ ufCE" %}

Usted puede copiar a trav√©s de USB key los binarios eth2deposit-cli preconstruidos de una m√°quina en l√≠nea a una m√°quina sin conexi√≥n, desconectada, arrancada de usb. Aseg√∫rese de desconectar el cable ethernet y/o WIFI.

Ejecuta el comando existente en las pesta√±as anteriores.
{% endtab %}
{% endtabs %}

3. Completa los pasos para subir el `deposit_data-#######. son` al sitio [oficial de la plataforma de lanzamiento Eth2](https://launchpad.ethereum.org/) y hacen sus transacciones de dep√≥sito ETH correspondientes.

4. Termina deteniendo el validador, importando la nueva clave del validador\(s\), reiniciando el validador y verificando los registros asegur√°ndose de que todo funcione sin error. [Revise los pasos 2 y posteriores de la gu√≠a principal si necesita un refrescador.](./#2-signup-to-be-a-validator-at-the-launchpad)

5. Finalmente, verifique que los verificaciones de su validador **existente** est√°n trabajando con el explorador de bloques p√∫blico como

[https://beaconcha.in/](https://beaconcha.in/) o [https://beaconscan.com/](https://beaconscan.com/)

Introduzca la pubkey de su validador para ver su estado.

{% hint style="info" %}
Tus validadores adicionales est√°n ahora en la cola de activaci√≥n esperando su turno. Comprueba el tiempo estimado de activaci√≥n en [https://eth2-validator-queue.web.app/](https://eth2-validator-queue.web.app/)
{% endhint %}

### üí∏ 8.4 Cambiar/migrar clientes Eth2 con protecci√≥n antibarra

{% hint style="info" %}
La clave de despegue en este proceso es evitar ejecutar dos clientes eth2 simult√°neamente. Quieren evitar que se les castigue con un castigo de rebano, que causa una p√©rdida de √©ter.
{% endhint %}

#### üõë 8.4.1 Detener la vieja cadena de baliza y el validador antiguo.

Para exportar la base de datos de barras, es necesario detener el validador.

{% tabs %}
{% tab title="Faro \| Prisma \| Lodestar" %}
```bash
validador de cadena beacon-chain sudo systemctl stop
```
{% endtab %}

{% tab title="Nimbus \| Teku" %}
```
sudo systemctl stop beacon-chain
```
{% endtab %}
{% endtabs %}

#### üíΩ 8.4.2 Exportar base de datos de barras \\(Opcional\\)

{% hint style="info" %}
[EIP-3076](https://eips.ethereum.org/EIPS/eip-3076) implementa un est√°ndar para la seguridad migrar claves validadoras entre clientes eth2. Este es el contenido exportado de la base de datos de barras.
{% endhint %}

Actualizar la ubicaci√≥n y el nombre del archivo exportado .json.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
exportaci√≥n de protecci√≥n de barras para validadores de cuenta faro <lighthouse_interchange.json>
```
{% endtab %}

{% tab title="Nimbus" %}
A implementar
{% endtab %}

{% tab title="Teku" %}
```bash
teku slashing-protection export --to=<FILE>
```
{% endtab %}

{% tab title="Prysm" %}
A implementar
{% endtab %}

{% tab title="Lodestar" %}
A implementar
{% endtab %}
{% endtabs %}

#### üöß 8.4.3 Configurar e instalar una nueva cadena validadora / baliza

Ahora necesita configurar/instalar su nuevo validador **pero no empezar a ejecutar los procesos del sistema**. Be sure to thoroughly follow your new validator's  [Section 4. Configure una cadena y validador de baliza ETH2.](../guide-or-how-to-setup-a-validator-on-eth2-testnet.md#4-configure-a-eth2-beacon-chain-node-and-validator) Necesitar√° construir/instalar el cliente, configurar el reenv√≠o de puertos/firewalls, y nuevos archivos de unidades del sistema.

{% hint style="warning" %}
\*\*\*\*‚ú® **Consejo Pro**: Durante el proceso de reimportaci√≥n de claves validadoras, **espera por lo menos 13 minutos** o dos epoches para evitar que se corte penalidades. Debe evitar ejecutar dos clientes eth2 con las mismas claves de validador al mismo tiempo.
{% endhint %}

{% hint style="danger" %}
üõë **Paso cr√≠tico**: No inicie ning√∫n **proceso de sistema** hasta que haya **importado la base de datos slashing** o haya **esperado al menos 13 minutos o dos epochs**.
{% endhint %}

#### üìÇ 8.4.4 Importar base de datos de barrido \\(Opcional\\)

Usando su nuevo cliente eth2, ejecute el siguiente comando y actualice la ruta relevante para importar su base de datos de barras desde hace 2 pasos.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
importaci√≥n de protecci√≥n de barras para validadores de cuenta faro <my_interchange.json>
```
{% endtab %}

{% tab title="Nimbus" %}
A implementar
{% endtab %}

{% tab title="Teku" %}
```bash
la importaci√≥n de protecci√≥n de barras --from=<FILE>
```
{% endtab %}

{% tab title="Prysm" %}
A implementar
{% endtab %}

{% tab title="Lodestar" %}
A implementar
{% endtab %}
{% endtabs %}

#### üå† 8.4.5 Iniciar nuevo validador y nueva cadena de baliza

{% tabs %}
{% tab title="Faro \| Prisma \| Lodestar" %}
```bash
sudo systemctl inicia validador de beacon-chain
```
{% endtab %}

{% tab title="Nimbus \| Teku" %}
```
sudo systemctl inicia beacon-chain
```
{% endtab %}
{% endtabs %}

#### üî• 8.4.6 Verificar funcionalidad

Marque los registros para verificar que los servicios est√°n funcionando correctamente y asegurarse de que no hay errores.

{% tabs %}
{% tab title="Faro \| Prisma \| Lodestar" %}
```bash
validador de estado del sistema de sudo beacon-chain
```
{% endtab %}

{% tab title="Nimbus \| Teku" %}
```
sudo systemctl estado cadena beacon-becon
```
{% endtab %}
{% endtabs %}

Finalmente, verifique que los certificados de su validador est√°n trabajando con el explorador de bloques p√∫blico como

[https://beaconcha.in/](https://beaconcha.in/)

Introduzca la pubkey de su validador para ver su estado.

#### üßØ Seguimiento de Actualizaci√≥n 8.4.7 con Prometheus y Grafana

[Review section 6](../guide-or-how-to-setup-a-validator-on-eth2-testnet.md#6-monitoring-your-validator-with-grafana-and-prometheus) and change your `prometheus.yml`. Aseg√∫rese de que prometheus est√° conectado al nuevo puerto de m√©tricas de su cliente eth2. Tambi√©n querr√° importar el panel de control de su nuevo cliente eth2.

### üñ• 8.5 Usar todo el espacio disponible en disco LVM

Durante la instalaci√≥n del Servidor Ubuntu, surge un problema com√∫n donde el espacio de su disco duro no est√° completamente disponible para su uso.

```bash
# Ver las unidades de disco
sudo -s lvm

# Cambiar la ruta del sistema de archivos de volumen l√≥gico si es necesario
lvextend -l +100%F‚ñ∫ /dev/ubuntu-vg/ubuntu-lv

#exit lvextend
exit

# Redimensionar el sistema de archivos para usar el nuevo espacio disponible en el volumen l√≥gico
resize2fs /dev/ubuntu-vg/ubuntu-lv

## Verificar el nuevo espacio disponible
df -h

# Ejemplo de salida de una unidad 2TB donde se usa el 25%
# Tama√±o del sistema de archivo Usado de Avance Usado Use% Montado en
# /dev/ubuntu-vg/ubuntu-lv 2000G 500G 1500G 25% /
```

**Referencia de origen**:

{% embed url="https://askubuntu.com/questions/1106795/ubuntu-server-18-04-lvm-out-of-space-with-Unable per-default-partitioning" %}

### :vertical_trafficic_light: 8.6 Reducir el uso del ancho de banda de la red

{% hint style="info" %}
Alojando su propio nodo ETH1 puede consumir cientos de gigabytes de datos por d√≠a. Debido a que los planes de datos pueden ser limitados o costosos, puede desear ralentizar el uso de datos pero mantener una buena conectividad a la red.
{% endhint %}

Edite su archivo de unidad de servicio eth1.service .

```bash
sudo nano /etc/systemd/system/eth1.service
```

A√±ade la siguiente bandera para limitar el n√∫mero de pares en la l√≠nea `ExecStart`.

{% tabs %}
{% tab title="Geth" %}
```bash
--maxpeers 10
# Example
# ExecStart       = /usr/bin/geth --maxpeers 10 --http --ws
```
{% endtab %}

{% tab title="OpenEthereum \(Paridad\)" %}
```bash
--max-peers 10
# Example
# ExecStart       = <home directory>/openethereum/openethereum --max-peers 10
```
{% endtab %}

{% tab title="Besu" %}
```bash
--max-peers 10
# Ejemplo
# ExecStart = <home directory>/besu/bin/besu --max-peers 10 --rpc-http-enabled
```
{% endtab %}

{% tab title="Nethermind" %}
```bash
--Network.ActivePeersMaxCount 10
# Ejemplo
# Ejemplo ExecStart = <home directory>/nethermind/(0)[video] mind.Runner --Network.ActivePeersMaxCount 10 --JsonRpc.Enabled true
```
{% endtab %}
{% endtabs %}

Por √∫ltimo, vuelva a cargar el nuevo archivo de unidad y reinicie el nodo eth1.

```bash
sudo systemctl daemon-reload
sudo systemctl reiniciar eth1
```

### üìÇ 8.7 Ubicaciones de directorios importantes

{% hint style="info" %}
En caso de que necesite localizar sus claves de validador, directorios de base de datos u otros archivos importantes.
{% endhint %}

#### Archivos y ubicaciones del cliente Eth2

{% tabs %}
{% tab title="Lighthouse" %}
```bash
# Llaves de validador
~/.lighthouse/mainnet/validators

# Datos de cadena de baliza
~/.lighthouse/mainnet/beacon

# Lista de todos los validadores y contrase√±as
~/. ighthouse/mainnet/validators/validator_definitions.yml

#Db de protecci√≥n de barra slash
~/.lighthouse/mainnet/validators/slashing_protection.sqlite
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
# Claves del validador
/var/lib/nimbus/validators

# Funci√≥n de datos
/var/lib/nimbus/db

#Protecci√≥n de Slash db
/var/lib/nimbus/validators/slashing_protection.sqlite3

#Registrs
/var/lib/nimbus/beacon.log
```
{% endtab %}

{% tab title="Teku" %}
```bash
# Claves del validador
/var/lib/teku

# Datos de la cadena del Beacon
~/tekudata/beacon

#Protecci√≥n de Slash db
~/tekudata/validator/slashprotection
```
{% endtab %}

{% tab title="Prysm" %}
```bash
# Llaves del validador
~/.eth2validators/prysm-wallet-v2/direct

# Datos de cadena del faro
~/.eth2/beaconchaindata
```
{% endtab %}

{% tab title="Lodestar" %}
TBD
{% endtab %}
{% endtabs %}

#### Archivos y ubicaciones de nodos Eth1

{% tabs %}
{% tab title="Geth" %}
```bash
# ubicaci√≥n de base de datos
$HOME/.ethereum
```
{% endtab %}

{% tab title="OpenEthereum \(Paridad\)" %}
```bash
# ubicaci√≥n de base de datos
$HOME/.local/share/openethereum
```
{% endtab %}

{% tab title="Besu" %}
```bash
# ubicaci√≥n de base de datos
$HOME/.besu/base de datos
```
{% endtab %}

{% tab title="Nethermind" %}
```bash
#ubicaci√≥n de base de datos
$HOME/.nethermind/nethermind_db/mainnet
```
{% endtab %}
{% endtabs %}

### :globe_showing_Asia- Alia: 8.8 Hosting ETH1 nodo en una m√°quina diferente

{% hint style="info" %}
Alojando su propio nodo ETH1 en una m√°quina diferente de donde residen su cadena de baliza y validador, puede permitir cierta modularidad y flexibilidad extra.
{% endhint %}

En la m√°quina de nodos eth1, edite su archivo de unidad eth1.service.

```bash
sudo nano /etc/systemd/system/eth1.service
```

Agregue la siguiente bandera para permitir el http entrante remoto o solicitudes api websocket en la l√≠nea `ExecStart`.

{% hint style="info" %}
Si no se usan websockets, no es necesario incluir los par√°metros ws. S√≥lo Nimbus requiere websockets.
{% endhint %}

{% tabs %}
{% tab title="Geth" %}
```bash
--http.addr 0.0.0.0 --ws.addr 0.0.0.0
# Example
# ExecStart       = /usr/bin/geth --http.addr 0.0.0.0 --ws.addr 0.0.0.0 --http --ws
```
{% endtab %}

{% tab title="OpenEthereum \(Paridad\)" %}
```bash
--jsonrpc-interface=all --ws-interface=all
# Ejemplo
# Ejemplo 
 # Ejemplo = <home directory>/openethereum/openethereum --jsonrpc-interface=all --ws-interface=all
```
{% endtab %}

{% tab title="Besu" %}
```bash
--rpc-http-host=0.0.0 --rpc-ws-enabled --rpc-ws-host=0.0.0
# Ejemplo
# Ejemplo 
 # ExecStart = <home directory>/besu/bin/besu --rpc-http-host=0.0.0 --rpc-ws-enabled --rpc-ws-host=0.0.0.0 --rpc-http-enabled
```
{% endtab %}

{% tab title="Nethermind" %}
```bash
--JsonRpc.Host 0.0.0 --WebSocketsActivado
# Ejemplo
# Ejemplo 
 # ExecStart = <home directory>/nethermind/)[video] mind.Runner --JsonRpc.Host 0.0.0.0 --WebSocketsEnabled --JsonRpc.Enabled true
```
{% endtab %}
{% endtabs %}

Recarga el nuevo archivo de unidad y reinicia el nodo eth1.

```bash
sudo systemctl daemon-reload
sudo systemctl reiniciar eth1
```

En la m√°quina separada que aloja la cadena beacon-chain, actualice el archivo de unidad beacon-chain con la direcci√≥n IP del nodo eth1.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
# edit beacon-chain unit file
nano (0)[video] /systemd/system/beacon-chain.service
# add the --eth1-endpoints parameter
# example
# --eth1-endpoints=http://192.168.10.22
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
# edit beacon chain file
nano (0)[video] /systemd/system/beacon-chain.service
# modificar el par√°metro --web-url
# ejemplo
# --web3-url=ws://192.168.10.22
```
{% endtab %}

{% tab title="Teku" %}
```bash
# edit teku.yaml
nano (0)[video] /teku/teku.yaml
# cambia el eth1-endpoint
# ejemplo
# eth1-endpoint: "http://192.168.10.20:8545"
```
{% endtab %}

{% tab title="Prysm" %}
```bash
# edit beacon-chain unit file
nano (0)[video] /systemd/system/beacon-chain.service
# add the --http-web3provider parameter
# example
# --http-web3provider=http://192.168.10.20:8545
```
{% endtab %}

{% tab title="Lodestar" %}
```
tbd.
```
{% endtab %}
{% endtabs %}

Recarga el archivo de unidad actualizado y reinicia la cadena beacon-chain.

```bash
sudo systemctl daemon-reload
sudo systemctl reiniciar beacon-chain
```

### üéä 8.9 A√±adir o cambiar la bandera graffiti POAP

Configure su `graffiti`, un mensaje personalizado incluido en los bloques que su validador proponga con √©xito, y gane un token POAP de validador de cadena de baliza temprano. [Genera tu cadena POAP suministrando una direcci√≥n de Ethereum 1.0 aqu√≠.](https://beaconcha.in/poap)

Ejecute el siguiente comando para establecer la variable `MY_GRAFFITI`. Reemplazar `<my POAP string or message>`  entre las comillas simples.

```bash
MY_GRAFITI='<my POAP string or message>'
# Ejemplos
# MY_GRAFITI='poapAAAAACGatUA1bLuDnL4FMD13BfoD'
# MY_GRAFITI='eth2 rulez!'
```

{% hint style="info" %}
Aprende m√°s sobre [POAP - La ficha de prueba de asistencia. ](https://www.poap.xyz/)
{% endhint %}

{% tabs %}
{% tab title="Lighthouse" %}
Ejecute lo siguiente para volver a crear un **archivo de unidad** para definir la configuraci√≥n de su`validator.service`. Simplemente copie y pegue.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validaci√≥n eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripci√≥n = servicio de validadores eth2
Quiere = network-online. apuntar cadena de faros. ervice
After = network-online. Objetivo 

[Service]
Usuario = $(whoami)
ExecStart = $(which lighthouse) vc --network mainnet --graffiti "${MY_GRAFFITI}" 
Reiniciar = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/validator.service
```
{% endtab %}

{% tab title="Nimbus" %}
Ejecute lo siguiente para volver a crear un **archivo de unidad** para definir su configuraci√≥n`beacon-chain.service`. Simplemente copie y pegue.

```bash
cat > $HOME/beacon-chain. ervice << EOF 
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripci√≥n = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. objetivo 

[Service]
Tipo = simple
Usuario = $(whoami)
WorkingDirectory= /var/lib/nimbus
ExecStart = /usr/bin/nimbus_beacon_node --network=mainnet --graffiti="${MY_GRAFFITI}" --data-dir=/var/lib/nimbus --web3-url=ws://127.0. .1:8546 --metrics --metrics-port=8008 --rpc --rpc-port=9091 --validators-dir=/var/lib/nimbus/validators --secrets-dir=/var/lib/nimbus/secrets --log-file=/var/lib/nimbus/beacon. og
Restart = on-fail

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

{% hint style="warning" %}
Nimbus s√≥lo soporta conexiones websocket \("ws://" y "wss://"\) para el nodo ETH1. Los nodos Geth, OpenEthereum e Infura ETH1 son compatibles.
{% endhint %}

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
```

Actualizar permisos de archivo.

```bash
sudo chmod 644 c/systemd/beacon-chain.service
```
{% endtab %}

{% tab title="Teku" %}
Vuelva a generar su archivo de configuraci√≥n Teku. Simplemente copie y pegue.

```bash
gato > $HOME/teku. aml << EOF
# red
: "mainnet"

# p2p
p2p-enabled: true
p2p-port: 9000
# validadores
validator-keys: "/var/lib/teku/validator_keys:/var/lib/teku/validator_keys"
validators-graffiti: "${MY_GRAFFITI}"

# Eth 1
eth1-endpoint: "http://localhost:8545"

# m√©tricas
m√©tricas habilitadas: true
metrics-categories: ["BEACON", LIBP2P", NETWORK"]
m√©trics-puerto: 8008

# base de datos
data-path: "$(echo $HOME)/tekudata"
data-storage-mode: "archivo"

# rest api
rest-api-port: 5051
rest-api-docs-enabled: true
rest-api-enabled: true

# logging
log-include-validator-duties-enabled: true
log-destination: CONSOLE
EOF
```

Mover el archivo de configuraci√≥n a `ma√±/teku`

```bash
sudo mv $HOME/teku.yaml /teku/teku.yaml
```
{% endtab %}

{% tab title="Prysm" %}
Re-crear un **archivo de unidad** para definir la configuraci√≥n de su`validator.service`. Simplemente copie y pegue.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validaci√≥n eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripci√≥n = servicio de validadores eth2
Quiere = network-online. objetivo beacon-chain.service
After = network-online. objetivo 

[Service]
usuario = $(whoami)
ExecStart = $(echo $HOME)/prysm/prysm. h validator --mainnet --graffiti "${MY_GRAFFITI}" --accept-terms-of-use --wallet-password-file $(echo $HOME)/. th2validators/validators-password. xt
Reinicio = on-fail

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
```

 Actualizar sus permisos.

```bash
sudo chmod 644 c/systemd/validator.service
```
{% endtab %}

{% tab title="Lodestar" %}
Ejecute lo siguiente para volver a crear un **archivo de unidad** para definir la configuraci√≥n de su`validator.service`. Simplemente copie y pegue.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validaci√≥n eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripci√≥n = servicio de validadores eth2
Quiere = network-online. objetivo beacon-chain.service
After = network-online. Objetivo 

[Service]
Usuario = $(whoami)
WorkingDirectory= $(echo $HOME)/git/lodestar
ExecStart = yarn run cli validator run --network mainnet --graffiti "${MY_GRAFFITI}"
Restart = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mover el archivo de unidad a `p/systemd/system`

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
```

 Actualizar sus permisos.

```bash
sudo chmod 644 c/systemd/validator.service
```
{% endtab %}
{% endtabs %}

Recarga el archivo de unidad actualizado y reinicia el proceso del validador para que tu graffiti surta efecto.

{% tabs %}
{% tab title="Faro \| Prisma \| Lodestar" %}
```bash
sudo systemctl daemon-reload
validator de reinicio del sistema sudo
```
{% endtab %}

{% tab title="Teku \| Nimbus" %}
```
sudo systemctl daemon-reload
sudo systemctl reiniciar beacon-chain
```
{% endtab %}
{% endtabs %}

### üì¶ 8.10 Actualizar un nodo ETH1 - Geth / OpenEthereum / Besu / mind

{% hint style="info" %}
De vez en cuando, aseg√∫rese de actualizar a las √∫ltimas versiones de ETH1 para disfrutar de nuevas mejoras y caracter√≠sticas.
{% endhint %}

{% hint style="success" %}
\*\*\*\*üî• **Consejo Pro**: planifica tu actualizaci√≥n para solaparte con la mayor brecha de verificaci√≥n. [Aprende c√≥mo aqu√≠.](how-to-find-longest-attestation-slot-gap.md)
{% endhint %}

Detenga su proceso de nodo eth1.

```bash
# Esto puede tardar unos minutos.
parada de sistema sudo eth1
```

Actualizar el paquete de nodos eth1 o binarios.

{% tabs %}
{% tab title="Geth" %}
Revise las √∫ltimas notas de la versi√≥n en [https://github.com/ethereum/go-ethereum/releases](https://github.com/ethereum/go-ethereum/releases)

```bash
sudo apt update
sudo actualizaci√≥n apt -y
```
{% endtab %}

{% tab title="OpenEthereum \(Paridad\)" %}
Revise la √∫ltima versi√≥n en [https://github.com/openethereum/openethereum/releases](https://github.com/openethereum/openethereum/releases)

Descargar autom√°ticamente la √∫ltima versi√≥n de linux, un-zip, a√±adir permisos de ejecuci√≥n y limpieza.

```bash
cd $HOME
# copia de seguridad anterior de openethereum versi√≥n anterior en caso de rollback
mv openethereum_backup_$(date +"%Y%d%m-%H%M%S")
# almacena una nueva versi√≥n en el directorio openethreum
mkdir openethereum && cd openethereum
# download latest version
curl -s https://api. ithub.com/repos/openethereum/openethereum/releases/latest | jq -r ".assets[] | select(.name) | .browser_download_url" | grep linux | xargs wget -q --show-progress
# unzip
unzip openethereum*. ip
# add execute permission
chmod +x openethereum
# limpieza
rm openethereum*.zip
```
{% endtab %}

{% tab title="Besu" %}
Revise la √∫ltima versi√≥n en [https://github.com/hyperledger/besu/releases](https://github.com/hyperledger/besu/releases)

El archivo se puede descargar desde [https://dl.bintray.com/hyperledger-org/besu-repo](https://dl.bintray.com/hyperledger-org/besu-repo)

Encuentre manualmente el archivo deseado desde el repositorio anterior y modifique el comando `wget` con la URL.

> Ejemplo: 
> 
> wget -O besu.tar.gz [https://dl.bintray.com/hyperledger-org/besu-repo/besu-20.10.1.tar.gz](https://dl.bintray.com/hyperledger-org/besu-repo/besu-20.10.1.tar.gz)

```bash
cd $HOME
# copia de seguridad anterior de la versi√≥n besu en caso de cancelaci√≥n
mv besu besu_backup_$(date +"%Y%d%m-%H%M%S")
# descargar la √∫ltima besu
wget -O besu. ar.gz <https URL to latest tax.gz linux file>
# untar
tar -xvf besu.tar.gz
# limpieza
rm besu. ar.gz
# renombra besu a la ubicaci√≥n de la carpeta est√°ndar
mv besu* besu
```
{% endtab %}

{% tab title="Nethermind" %}
Revise la √∫ltima versi√≥n en [https://github.com/)[video] mindEth/nethermind/releases](https://github.com/NethermindEth/nethermind/releases)

Descargue autom√°ticamente la √∫ltima versi√≥n de linux, des-zip y limpieza.

```bash
cd $HOME
# copia de seguridad anterior de la versi√≥n nethermind en caso de rollback
mv nethermind_backup_$(date +"%Y%d%m-%H%M%S")
# almacenar nueva versi√≥n en el directorio nethermind
mkdir nethermind && cd nethermind 
# descargar la √∫ltima versi√≥n
curl -s https://api. ithub.com/repos/)[video] mindEth/nethermind/releases/latest | jq -r ".assets[] | select(.name) | . rowser_download_url" | grep linux | xargs wget -q --show-progress
# unzip
unzip -o nethermind*.zip
# limpieza
rm nethermind*linux*.zip
```
{% endtab %}
{% endtabs %}

Inicie su proceso de nodo eth1.

```bash
sudo systemctl inicia eth1
```

Marque los registros para verificar que los servicios est√°n funcionando correctamente y asegurarse de que no hay errores.

{% tabs %}
{% tab title="Faro \| Prisma \| Lodestar" %}
```bash
validador de estado de estado del sistema eth1 beacon-chain de estado sudo
```
{% endtab %}

{% tab title="Nimbus \| Teku" %}
```
sudo systemctl status eth1 beacon-chain
```
{% endtab %}
{% endtabs %}

Finalmente, verifique que los certificados de su validador est√°n trabajando con el explorador de bloques p√∫blico como

[https://beaconcha.in/](https://beaconcha.in/)

Introduzca la pubkey de su validador para ver su estado.

### ‚ú® 8.11 C√≥mo mejorar la efectividad de la verificaci√≥n del validador

{% hint style="info" %}
Aprende acerca de la efectividad de la verificaci√≥n [de Attestant.io](https://www.attestant.io/posts/defining-attestation-effectiveness/)
{% endhint %}

#### üë®üë©üëßüëß Estrategia \#1: Incrementar el conteo de pares de la cadena eth2

{% hint style="info" %}
Este cambio resultar√° en un mayor ancho de banda y uso de memoria. Ajuste y ajuste adecuado para su hardware.

_Kudos a_ [_ReÃÅmy Roy_](https://www.reddit.com/user/remyroy/) _para esta cadena._
{% endhint %}

Edite su archivo de unidad `beacon-chain.service` \(excepto Teku\).

```bash
sudo nano en/systemd/beacon-chain.service
```

A√±ade la siguiente bandera para aumentar los contactos en la l√≠nea `ExecStart`.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
--target-peers 100
# Ejemplo
# faro bn --target-peers 100 --staking --metrics --network mainnet
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
--max-peers=100
# Ejemplo
# /usr/bin/nimbus_beacon_node --network=mainnet --max-peers=100
```
{% endtab %}

{% tab title="Teku" %}
```bash
# Editar teku.yaml
sudo nano (0)[video] /teku/teku.yaml

# a√±adir la siguiente l√≠nea a teku.yaml y guardar el archivo
p2p-peer-upper-bound: 100
```
{% endtab %}

{% tab title="Prysm" %}
```bash
--p2p-max-peers=100
# Ejemplo
# prysm.sh beacon-chain --mainnet --p2p-max-peers=100 --http-web3provider=http://127.0.0.1:8545 --accept-terms-of-use 
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
--network.maxPeers 100
# Ejemplo
# yarn run cli beacon --network.maxPeers 100 --network mainnet
```
{% endtab %}
{% endtabs %}

Recarga el archivo de unidad actualizado y reinicia el proceso beacon-chain para completar este cambio.

```bash
sudo systemctl daemon-reload
sudo systemctl reiniciar beacon-chain
```

#### üë®üíª Estrategia \#2: Redundancia Eth1

{% hint style="info" %}
Especialmente √∫til durante las actualizaciones de eth1, cuando su nodo principal no est√° disponible temporalmente.
{% endhint %}

Edite su archivo de unidad `beacon-chain.service`.

```bash
sudo nano en/systemd/beacon-chain.service
```

A√±ade la siguiente bandera en la l√≠nea `ExecStart`.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
--eth1-endpoints <http://alternate eth1 endpoints>
# Ejemplo, separa los endpoints con comas.
# --eth1-endpoints http://localhost:8545,https://nodes.mewapi.io/rpc/eth,https://mainnet.eth.cloud.ava.do,https://mainnet.infura.io/v3/xxx
```
{% endtab %}

{% tab title="Prysm" %}
```bash
--fallback-web3provider=<http://<alternate eth1 provider one> --fallback-web3provider=<http://<alternate eth1 provider two>
# Ejemplo, repetir bandera para m√∫ltiples proveedores eth1
# --fallback-web3provider=https://nodes.mewapi.io/rpc/eth --fallback-web3provider=https://mainnet.infura.io/v3/YOUR-PROJECT-ID
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
üí∏ Encuentra nodos de reserva gratuitos de ethereum en [https://ethereumnodes.com/](https://ethereumnodes.com/)
{% endhint %}

Recarga el archivo de unidad actualizado y reinicia el proceso beacon-chain para completar este cambio.

```bash
sudo systemctl daemon-reload
sudo systemctl reiniciar beacon-chain
```

#### ‚öô Estrategia \#3: Realizar actualizaciones o reinicios durante el espacio de verificaci√≥n m√°s largo

Aprenda c√≥mo hacerlo en la siguiente gu√≠a r√°pida.

{% page-ref page="how-to-find-longest-attestation-slot-gap.md" %}

#### ‚õì Estrategia \#4: Redundancia del nodo Beacon

{% hint style="info" %}
Permite que la VC \\(cliente validador\\) se conecte a m√∫ltiples BN \\(nodos beacon\\). Esto significa que su cliente validador puede usar m√∫ltiples BNs. Cada vez que un BN no responda, el VC intentar√° de nuevo con el pr√≥ximo BN.

Debe instalar un BN del mismo cliente eth2 en otro servidor.

Actualmente s√≥lo funciona para Lighthouse.
{% endhint %}

Edite su archivo de unidad `validator.service`.

```bash
sudo nano en/systemd/system/validator.service
```

A√±ade la siguiente bandera en la l√≠nea `ExecStart`.

{% tabs %}
{% tab title="Lighthouse" %}
```bash
--beacon-nodes <BEACON-NODE ENDPOINTS>
# Ejemplo, separa los endpoints con comas.
# lighthouse vc --beacon-nodes http://localhost:5052,http://192.168.1.100:5052
# Si localhost no responde (tal vez durante una actualizaci√≥n), la CV intentar√° usar 192.168.1.100 en su lugar.
```
{% endtab %}
{% endtabs %}

Recarga el archivo de unidad actualizado y reinicia el proceso del validador para completar este cambio.

```bash
sudo systemctl daemon-reload
validator de reinicio del sistema sudo
```

## üåá 9. √önete a la comunidad en Discord y Reddit

### üì± Discord

{% tabs %}
{% tab title="Lighthouse" %}
{% embed url="https://discord.gg/cyAszAh" %}
{% endtab %}

{% tab title="Nimbus" %}
{% embed url="https://discord.gg/XRxWahP" %}
{% endtab %}

{% tab title="Teku" %}
{% embed url="https://discord.gg/7hPv2T6" %}
{% endtab %}

{% tab title="Prysm" %}
{% embed url="https://discord.gg/XkyZSSk4My" %}
{% endtab %}

{% tab title="Lodestar" %}
{% embed url="https://discord.gg/aMxzVcr" %}
{% endtab %}

{% tab title="CoinCashew" %}
{% embed url="https://discord.gg/w8Bx8W2HPW" %}
{% endtab %}
{% endtabs %}

### :globe_showing_Europe-Portugal: Reddit r/ethStaker

{% embed url="https://www.reddit.com/r/ethstaker/" %}

## üß©10. Material de referencia

Apreciar el duro trabajo realizado por la gente fina en los siguientes enlaces que sirvieron de base para la creaci√≥n de esta gu√≠a.

{% embed url="https://launchpad.ethereum.org/" %}

{% embed url="https://pegasys.tech/teku-ethereum-2-for-world-e/" %}

{% embed url="https://docs.teku.pegasys.tech/es/latest/howTo/Get-Started/Build-From-Source/" %}

{% embed url="https://lighthouse-book.sigmaprime.io/intro.html" caption="" %}

{% embed url="https://status-im.github.io/nimbus-eth2/intro.html" %}

{% embed url="https://prylabs.net/participate" %}

{% embed url="https://docs.prylabs.network/docs/getting-started/" %}

{% embed url="https://chainsafe.github.io/lodestar/installation/" %}

## üéâ11. Enlaces de bonus

### üß± Exploradores de Bloques ETH2

{% embed url="https://beaconcha.in/" %}

{% embed url="https://beaconscan.com/" caption="" %}

### üóí √öltima informaci√≥n de Eth2

{% embed url="https://hackmd.io/@benjaminion/eth2\_news/" caption="" %}

{% embed url="https://www.reddit.com/r/ethstaker" caption="" %}

{% embed url="https://blog.ethereum.org/" caption="" %}

### üë®üë©üëß:chico: Gu√≠as adicionales de la comunidad ETH2

{% embed url="https://someresat.medium.com/" %}

{% embed url="https://github.com/metanull-operator/eth2-ubuntu" %}

{% embed url="https://agstakingco.gitbook.io/eth-2-0-staking-medalla/" %}

#### Gu√≠a de Hardware [https://www.reddit.com/r/ethstaker/comments/j3mlup/a\_‚Üí tly\_updated\_look\_at\_hardware\_for\_staking/](https://www.reddit.com/r/ethstaker/comments/j3mlup/a_slightly_updated_look_at_hardware_for_staking/)

{% embed url="https://medium.com/@RaymondDurk/how-to-stake-for-ethereum-2-0-with-dappnode-231fa7689c02" %}

{% embed url="https://kb.beaconcha.in/" %}



