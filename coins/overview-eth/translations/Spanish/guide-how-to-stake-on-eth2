---
description: >-
  Conviértete en un validador y ayuda a asegurar eth2, una cadena de bloques de pruebas. Cualquiera con 32 ETH puede unirse.
---

# Guía: Cómo participar en ETH2 Mainnet con Prysm en Ubuntu

{% hint style="danger" %}
**Nov 24 2020 Update**: La nueva guía [mainnet se encuentra aquí](guide-or-how-to-setup-a-validator-on-eth2-mainnet/).

Las instrucciones a continuación ahora están obsoletas y sólo son de referencia.
{% endhint %}











{% hint style="info" %}
[Prysm](https://github.com/prysmaticlabs/prysm) es una implementación de Ethereum 2.0 protocolo con enfoque en usabilidad, seguridad y fiabilidad. Prysm es desarrollado por [Prysmatic Labs](https://prysmaticlabs.com/), una empresa con el único enfoque en el desarrollo de su cliente. Prysm está escrito en Go y publicado bajo una licencia GPL-3.0.
{% endhint %}

## 🏁 0. Prerrequisitos

### 👩💻 Habilidades para operar un validador eth2 y nodo baliza

Como validador de eth2, normalmente tendrás las siguientes habilidades:

* conocimiento operativo de cómo configurar, ejecutar y mantener un nodo y validador de baliza eth2 continuamente
* un compromiso para mantener su validador 24/7/365
* habilidades básicas del sistema operativo
* han aprendido lo esencial viendo ['Introducción a la Eth2 & Staking for Beginners' por Superphiz](https://www.youtube.com/watch?v=tpkpW031RCI)
* han pasado o está inscrito activamente en el [curso de estudios de Eth2](https://ethereumstudymaster.com/)
* y han leído la [8 Cosas que cada validador de Eth2 debería saber.](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

### 🎗 **Requisitos mínimos de configuración**

* **Sistema operativo:** Linux de 64-bit \\(i.e. Ubuntu 20.04 LTS\)
* **Procesador:** Dual core CPU, Intel Core i5–760 o AMD FX-8100 o mejor
* **Memory:** 8GB RAM
* **Almacenamiento:** 20GB SSD
* **Internet:** Conexión a Internet de banda ancha con velocidades de al menos 1 Mbps.
* **Poder:** Energía eléctrica fiable.
* **Saldo ETH:** al menos 32 ETH y algunos ETH por comisiones de depósito
* **Cartera**: Metamask instalado

### 🏋♂ Configuración recomendada de hardware

* **Sistema operativo:** Linux de 64-bit \\(i.e. Ubuntu 20.04 LTS\)
* **Procesador:** Quad core CPU, Intel Core i7–4770 o AMD FX-8310 o mejor
* **Memoria:** RAM de 16 GB o más
* **Almacenamiento:** SSD de 1TB o más
* **Internet:** Conexiones a Internet de banda ancha con velocidades de al menos 10 Mbps
* **Poder:** Energía eléctrica fiable con alimentación ininterrumpida \(UPS\)
* **Saldo ETH:** al menos 32 ETH y algunos ETH por comisiones de depósito
* **Cartera**: Metamask instalado

{% hint style="warning" %}
✨ **Consejo del validador Pro**: Te recomendamos que comences con una nueva instancia de un sistema operativo, máquina virtual y/o máquina. Evite los dolores de cabeza no reutilizar claves de red de pruebas, billeteras, o bases de datos para su validador de red principal.
{% endhint %}

### 🔓 Mejores prácticas recomendadas para validadores eth2

Si necesita ideas o un recordatorio sobre cómo asegurar su validador, consulte

{% page-ref page="guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md" %}

### 🛠 Setup Ubuntu

Si necesita instalar Ubuntu, consulte

{% page-ref page="../overview-xtz/guide-how-to-setup-a-baker/install-ubuntu.md" %}

### 🎭 Configurar Metamask

Si necesita instalar Metamask, consulte

{% page-ref page="../../wallets/browser-wallets/metamask-ethereum.md" %}

## 🌱 1. Comprar/intercambiar o consolidar ETH

{% hint style="info" %}
Cada 32 ETH que tengas te permite hacer 1 validador. Puede ejecutar miles de validadores con su nodo faro.
{% endhint %}

Su ETH \(o múltiplos de 32 ETH\) debe consolidarse en una sola dirección accesible con Metamask.

Si necesita comprar/intercambiar o recargar su ETH a un múltiplo de 32, eche un vistazo:

{% page-ref page="guide-how-to-buy-eth.md" %}

## 👩💻 2. Regístrate para ser un validador en el Launchpad

1. Instale dependencias, la herramienta de depósito de la fundación ethereum y genere sus dos conjuntos de pares de claves.

{% hint style="info" %}
Cada validador tendrá dos conjuntos de pares de claves. Una **clave de firma** y una **clave de retiro.** Estas claves se derivan de una sola frase mnemónica. [Más información sobre claves.](https://blog.ethereum.org/2020/05/21/keys/)
{% endhint %}

Tienes la opción de descargar la [herramienta de depósito de cimientos ethereum](https://github.com/ethereum/eth2.0-deposit-cli) preconstruida o construirla desde la fuente.

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
Descargar eth2deposit-cli.

```bash
cd $HOME
wget https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.0.0/eth2deposit-cli-9310de0-linux-amd64.tar.gz
```

Verifique que la suma de verificación SHA256 coincide con la suma de verificación en la página de [lanzamientos](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.0.0).

```bash
sha256sum eth2deposit-cli-9310de0-linux-amd64.tar.gz 
# SHA256 debe ser
# b09da136895a7f77a4b430924ea2ae5827fa47b2bf444c4ea6fcfac5b04b8c8a
```

Extraer el archivo.

```text
tar -xvf eth2deposit-cli-9310de0-linux-amd64.tar.gz
cd eth2deposit-cli-9310de0-linux-amd64
```

Crea una nueva mnemónica.

```text
./deposit new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Build from source code" %}
Instalar dependencias.

```text
sudo apt update
sudo apt install python3-pip git -y
```

Descargar código fuente e instalar.

```text
mkdir ~/git
cd ~/git
git clone https://github.com/ethereum/eth2.0-deposit-cli.git
cd eth2.0-deposit-cli
sudo ./deposit.sh install
```

Crea una nueva mnemónica.

```text
./deposit.sh new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
🔥**\[ Optional \] Consejo de seguridad Pro**: Ejecute la herramienta eth2deposit-cli y genere su **semilla mnemónica** para sus claves de validador en una **máquina sin conexión**.

Puede copiar a través de USB key los binarios eth2deposit-cli preconstruidos de una máquina online a una máquina sin conexión.

* Protege contra ataques de registro de claves, ataques basados en malware/virus y otras vulnerabilidades de seguridad o cortafuegos.
* Aislado físicamente del resto de su red.
* No debe tener una conexión de red, cableada o inalámbrica.
* No es una máquina virtual en una máquina con conexión de red.
* Obtenga más información sobre [en la wikipedia](https://en.wikipedia.org/wiki/Air_gap_%28networking%29).
{% endhint %}
{% endtab %}
{% endtabs %}

1. Siga las instrucciones y elija una contraseña. Escribe tu mnemónico y mantén esto seguro y **sin conexión**.
2. Sigue los pasos en [https://launchpad.ethereum.org/](https://launchpad.ethereum.org/) mientras te saltas los pasos que ya has completado. Estudiar el material general de la fase eth2 0. ¡Entender eth2 es la clave del éxito!
3. Volver al sitio web de launchpad, sube tu`deposit_data-#######.json` encontrado en el directorio `validator_keys`.
4. Conéctate al Launchpad con tu cartera Metamask, revisa y acepta los términos.
5. Confirmar la transacción\(s\). Hay una transacción de depósito de 32 ETH para cada validador.

{% hint style="info" %}
Your transaction is sending and depositing your ETH to the [official ETH2 deposit contract address. ](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)

**Compruebe**, _doble verificación_, _**cheque triple**_ que la dirección oficial del contrato de depósito Eth2 es correcta.[`0x000000219ab540356cB839Cbe05303d7705Fa`](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)
{% endhint %}

{% hint style="danger" %}
Asegúrese de escribir o registrar su semilla mnemónica **sin conexión**. _No es correo electrónico. No en la nube._

Hacer **copias de seguridad sin conexión**, como una clave USB, de su **`validator_keys`** \`\`\`directory.
{% endhint %}

## 🛸 3. Install a ETH1 node

{% hint style="info" %}
Ethereum 2.0 requiere una conexión a Ethereum 1.0 para monitorear los depósitos de 32 validadores ETH. Alojamiento de su propio nodo Ethereum 1.0 es la mejor manera de maximizar la descentralización y minimizar la dependencia de terceros como Infura.
{% endhint %}

{% hint style="warning" %}
Los siguientes pasos asumen que ha completado la [guía de seguridad de buenas prácticas](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md).
{% endhint %}

Tu elección de [**OpenEthereum**](https://www.parity.io/ethereum/)**,** [**Geth**](https://geth.ethereum.org/)**,** [**Besu**](https://besu.hyperledger.org/) **o** [**mente**](https://www.nethermind.io/)**.**

{% tabs %}
{% tab title="OpenEthereum \(Paridad\)" %}
#### 🤖 Instalar y ejecutar OpenEthereum.

```text
mkdir ~/openethereum && cd ~/openethereum
wget https://github.com/openethereum/openethereum/releases/download/v3.0.1/openethereum-linux-v3.0.1.zip
unzip openethereum*.zip
chmod +x openethereum
rm openethereum*.zip
```

**Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuración `eth1.service`.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descripción = openethereum eth1 servicio
Quiere = network-online. Destinar
Después = red en línea. objetivo 

[Service]
usuario = $(whoami)
WorkingDirectory= /home/$(whoami)/openethereum
ExecStart = /home/$(whoami)/openethereum/openethereum --chain foundation
Reiniciar = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ⛓ Iniciar OpenEthereum en mainnet.

```text
sudo systemctl inicia eth1
```
{% endtab %}

{% tab title="Geth" %}
#### 🧬 Instalar desde el repositorio.

```text
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update -y
sudo apt-get install ethereum -y
```

⚙ **Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuración `eth1.service`.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descripción = geth eth1 servicio
Quiere = network-online. Destinar
Después = red en línea. Destet 

[Service]
Usuario = $(whoami)
ExecStart = /usr/bin/geth --rpc --http
Reiniciar = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ⛓ Comenzar geth en mainnet.

```text
sudo systemctl inicia eth1
```
{% endtab %}

{% tab title="Besu" %}
#### 🧬 Instalar dependencia de java.

```text
sudo apt install openjdk-11-jdk
```

#### 🌜 Descargar y descomprimir Besu.

```text
cd
wget -O besu.tar.gz https://bintray.com/hyperledger-org/besu-repo/download_file?file_path=besu-1.5.0.tar.gz
tar -xvf besu.tar.gz
rm besu.tar.gz
mv besu-1.5.0 besu
```

⚙ **Configurar y configurar el sistema**

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuración `eth1.service`.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descripción = openethereum eth1 servicio
Quiere = network-online. Destinar
Después = red en línea. objetivo 

[Service]
usuario = $(whoami)
WorkingDirectory= /home/$(whoami)/besu/bin
ExecStart = /home/$(whoami)/besu/bin/besu --data-path="$HOME/. thereum_besu"
Reinicio = "on-fail"

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

Ejecute lo siguiente para habilitar auto-inicio en el momento de arranque.

```text
sudo systemctl daemon-recarga
sudo systemctl habilitar eth1
```

#### ⛓ Iniciar besu en mainnet.

```text
sudo systemctl inicia eth1
```
{% endtab %}

{% tab title="Nethermind" %}
#### ⚙ Instalar dependencias.

```text
sudo apt-get update && sudo apt-get install libsnappy-dev libc6-dev libc6 unzip -y
```

#### 🌜 Descargar y descomprimir la mente.

```text
mkdir ~/nethermind && cd ~/nethermind
wget -O nethermind.zip https://nethdev.blob.core.windows.net/builds/nethermind-linux-amd64-1.8.77-9d3a58a.zip
unzip nethermind.zip
rm nethermind.zip
```

#### 🛸 Lanzamiento mente.

```text
./mind.Launcher
```

* Seleccione `Ethereum Node`
* Selecciona `Ethereum (mainnet)` y luego selecciona `Sincronización rápida`
* Sí para activar web3 / JSON RPC
* Aceptar IP por defecto
* Omitir registro de etstats
{% endtab %}

{% tab title="Minimum Hardware Setup" %}
{% hint style="info" %}
Infura es adecuada para configuraciones de espacio limitado. Ejecute siempre su propio nodo eth1 completo cuando sea posible.
{% endhint %}

Regístrate para obtener una clave de acceso API en [https://infura.io/](https://infura.io/)

1. Regístrese para obtener una cuenta gratuita.
2. Confirme su dirección de correo electrónico.
3. Visita tu panel de control [https://infura.io/dashboard](https://infura.io/dashboard)
4. Crear un proyecto, darle un nombre.
5. Seleccione **Mainnet** como ENDPOINT
6. Copie su clave API.
7. Actualizar el parámetro **http-web3provider** en la sección **start beacon chain**.

```bash
#example parameter
--http-web3provider=https://infura.io/v3/<YOUR_API_KEY>
```
{% endtab %}
{% endtabs %}



{% hint style="info" %}
La sincronización del nodo eth1 podría tardar hasta 24 horas.
{% endhint %}

{% hint style="success" %}
Su nodo eth1 está completamente sincronizado cuando se producen estos eventos.

* **`OpenEthereum:`** `Imported #<block number>`
* **`Geth:`** `Importado nuevo segmento de cadena`
* **`Besu:`** `Importado #<block number>`
* **`mente:`** `Ya no sincronizando Cabeceras Antiguas`
{% endhint %}

#### 🛠 Comandos útiles de eth1.service

🗒 **Para ver y seguir los registros eth1**

```text
journalctl -u eth1 -f
```

🗒 **Para detener el servicio eth1**

```text
parada de sistema sudo eth1
```

{% hint style="danger" %}
🛑 **Antes de continuar con el resto de esta guía, te recomendamos que esperes hasta el 1 de Diciembre ya que el código Prysm se está preparando rápidamente para mainnet.**🚧
{% endhint %}

## 💡 4. Install Prysm

```bash
mkdir ~/prysm && cd ~/prysm 
curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && chmod +x prysm.sh 
```

{% hint style="info" %}
Prysm es un cliente de Ethereum 2.0 y viene en dos componentes.

**Cliente de la cadena Beacon** - Responible para gestionar el estado de la cadena beacon, el desplazamiento del validador, y más.

**Cliente validador** - Responible por producir nuevos bloques y certificaciones en la cadena del faro y las cadenas de fragmentos.
{% endhint %}

## 🔥 5. Configurar desvío de puertos y/o firewall

Específicamente para su configuración de red o configuración de proveedores de nube, [asegúrese de que los puertos firewall de su validador están abiertos y alcanzables.](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Prysm beacon chain node** usará el puerto 12000 para udp y el puerto 13000 para tcp
* **eth1** node requiere el puerto 30303 para tcp y udp

{% hint style="info" %}
✨ **Consejo de reenvío de puertos:** Tendrás que redirigir y abrir puertos a tu validador. Verifique que está trabajando con [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) o [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## 🎩 6. Importar clave de validador

Elija el comando correcto dependiendo de cómo haya instalado **eth2deposit-cli.**

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
```bash
$HOME/prysm/prysm.sh validador cuentas importar --keys-dir=$HOME/eth2deposit-cli-9310de0-linux-amd64/validator_keys
```
{% endtab %}

{% tab title="Built from source code" %}
```bash
$HOMEimportar cuentas de validadores /prysm/prysm.sh --keys-dir=$HOME/git/eth2.0-deposit-cli/validator_keys
```
{% endtab %}
{% endtabs %}

Acepte la ubicación predeterminada de la cartera, introduzca una nueva contraseña para cifrar su cartera e introduzca la contraseña para sus cuentas importadas.

{% hint style="danger" %}
**ADVERTENCIA**: NO UTILICE LOS KEYSTORES ORIGINALES PARA VALIDAR CON OTROS CLIENTOS, O USTED SERÁ SLASHADO.
{% endhint %}

## 🏂 7. Iniciar la cadena del faro

{% hint style="warning" %}
Si participó en cualquiera de las redes de prueba anteriores, debe borrar la base de datos.

```bash
$HOME/prysm/prysm.sh beacon-chain --clear-db
```
{% endhint %}

Su elección de ejecutar una cadena de baliza y validador manualmente desde la línea de comandos o automáticamente con el sistema.

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 Benefits of using systemd for your beacon chain and validator <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar automáticamente su cadena de faros cuando el ordenador se reinicia debido al mantenimiento, interrupción de energía, etc.
2. Reinicie automáticamente los procesos de la cadena de baliza bloqueada.
3. Maximice su tiempo de actividad y rendimiento de la cadena de balizas.

#### 🛠 Instrucciones de configuración

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuración`beacon-chain.service`.

```bash
cat > $HOME/beacon-chain. ervice << EOF 
# El servicio de cadena de beacon eth2 (parte del sistema)
# archivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descripción = eth2 beacon chain service
Wants = network-online. Destinar
After = network-online. objetivo 

[Service]
Usuario = $(whoami)
Entorno = "ClientIP=$(curl -s v4. dent.me)"
WorkingDirectory= /home/$(whoami)/prysm
ExecStart = /home/$(whoami)/prysm/prysm.sh beacon-chain --p2p-host-ip=${ClientIP} --monitoring-host="0.0.0. " --http-web3provider=http://127.0.0. :8545 --accept-terms-of-use 
Restart = on-failure

[Install]
WantedBy = multi-usuario. objetivo
EOF
```

{% hint style="info" %}
Los usuarios de Geth pueden lograr un mayor rendimiento con

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
sudo chmod 644 mañ/systemd/system/beacon-chain.service
```

Ejecute lo siguiente para habilitar auto-start al momento de arranque y luego inicie su servicio de nodo beacon.

```text
sudo systemctl daemon-reload
sudo systemctl habilita beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Buen trabajo. Su cadena de faros está ahora gestionada por la fiabilidad y robustez del sistema. Debajo hay algunos comandos para usar el sistema.
{% endhint %}

### 🛠 Algunos comandos útiles del sistema

#### ✅ Comprueba si la cadena de baliza está activa

```text
sudo systemctl está activo beacon-chain
```

#### 🔎 Ver el estado de la cadena del faro

```text
sudo systemctl estado cadena beacon-becon
```

#### 🔄 Reiniciando la cadena del faro

```text
sudo systemctl recargar-o-reiniciar cadena beacon-
```

#### 🛑 Detener la cadena del faro

```text
sudo systemctl stop beacon-chain
```

#### 🗒 Ver y filtrar registros

```bash
journalctl --unit=beacon-chain --íe=ayer
journalctl --unit=beacon-chain --íe=hoy
journalctl --unit=beacon-chain --íe='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
En una nueva terminal, inicie la cadena del faro.

```bash
$HOME/prysm/prysm.sh beacon-chain \
--p2p-host-ip=$(curl -s v4.ident.me) \
--http-web3provider="http://127.0.0.1:8545"
--monitoring-host="0.0.0.0" \
--accept-terms-of-use
```

{% hint style="info" %}
Los usuarios de Geth pueden lograr un mayor rendimiento con

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}
{% endtab %}
{% endtabs %}

## 🧬 8. Iniciar el validador <a id="9-start-the-validator"></a>

Almacena la contraseña de tu validador en un archivo y hazla de sólo lectura.

```bash
echo "my_password_goes_here" > $HOME/.eth2validators/validators-password.txt
sudo chmod 600 $HOME/.eth2validators/validators-password.txt
```

Su elección de ejecutar un validador manualmente desde la línea de comandos o automáticamente con el sistema.

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 Beneficios de usar systemd para su validador <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar automáticamente el validador cuando el ordenador se reinicia debido al mantenimiento, interrupción de energía, etc.
2. Reiniciar automáticamente los procesos validadores bloqueados.
3. Maximice su validador a tiempo de espera y rendimiento.

#### 🛠 Instrucciones de configuración

Ejecute lo siguiente para crear un **archivo de unidad** para definir su configuración`validator.service`.

```bash
cat > $HOME/validador. ervice << EOF 
# El servicio de validación eth2 (parte del sistema)
# archivo: /etc/systemd/system/validator. ervice 

[Unit]
Descripción = servicio de validadores eth2
Quiere = network-online. objetivo beacon-chain.service
After = network-online. objetivo 

[Service]
usuario = $(whoami)
WorkingDirectory= /home/$(whoami)/prysm
ExecStart = /home/$(whoami)/prysm/prysm. h validator --accept-terms-of-use --wallet-password-file /home/$(whoami)/.eth2validators/validators-password. xt
Reinicio = en falla

[Install]
WantedBy = multiusuario. objetivo
EOF
```

Mueva el archivo de unidad a `p/systemd/system` y otorgue permisos.

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
sudo chmod 644 /etc/systemd/system/validator.service
```

Ejecute lo siguiente para habilitar auto-inicio al momento de arranque y luego inicie su validador.

```text
sudo systemctl daemon-reload
sudo systemctl habilitar validator
sudo systemctl start validator
```

### 🛠 Algunos comandos útiles del sistema

#### ✅ Comprueba si el validador está activo

```text
sudo systemctl es validador activo
```

#### 🔎 Ver el estado del validador

```text
sudo systemctl status validator
```

#### 🔄 Reiniciando el validador

```text
validador de sudo systemctl recargar o reiniciar
```

#### 🛑 Detener el validador

```text
sudo systemctl stop validator
```

#### :file_gabinet: Ver y filtrar registros

```bash
journalctl --unit=validator --e=ayer
journalctl --unit=validator --i=hoy
journalctl --unit=validator --e='2020-12-01 00:00:00' --until='2020-12-02 12:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
En un nuevo terminal, inicie el validador.

```bash
$HOME/prysm/prysm.sh validador \
--accept-terms-of-use \
--wallet-password-file /home/$(whoami)/.eth2validators/validators-password.txt
```
{% endtab %}
{% endtabs %}

Verifica que tu **clave pública del validador** aparezca en los registros. Ejemplo a continuación:

```text
INFO Activado validator voting_pubkey: 0x2374.....7121
```

{% hint style="info" %}
**Cliente validador** - Responible por producir nuevos bloques y certificaciones en la cadena del faro y las cadenas de fragmentos.

**Cliente de la cadena Beacon** - Responible para gestionar el estado de la cadena beacon, el desplazamiento del validador, y más.
{% endhint %}

{% hint style="success" %}
Enhorabuena. Una vez que tu beacon-chain esté sincronizado, validador activo y corriendo, sólo esperas a la activación. Este proceso tarda hasta 24 horas. Cuando te asignes, tu validador comenzará a crear y votar bloques mientras ganas ETH apuestando recompensas.

Usa [beaconcha.in](https://beaconcha.in/) y [registra una cuenta](https://beaconcha.in/register) para crear alertas y rastrear el rendimiento de tu validador.
{% endhint %}

## 🕒 9. Sincronización de tiempo

{% hint style="info" %}
Debido a que la cadena de faros depende de tiempos precisos para realizar certificaciones y producir bloques, el tiempo de su computadora debe ser exacto a tiempo real NTP o NTS dentro de 0. segundos.
{% endhint %}

Configurar **Chrony** con la siguiente guía.

{% hint style="info" %}
chrony es una implementación del Protocolo de Tiempo de Red y ayuda a mantener el tiempo de su computadora sincronizado con NTP.
{% endhint %}

## 🔎 10. Monitoreando a tu validador con Grafana y Prometeo

Prometheus es una plataforma de monitoreo que recolecta métricas de objetivos monitorizados mediante la eliminación de métricas HTTP en estos objetivos. [La documentación oficial está disponible aquí.](https://prometheus.io/docs/introduction/overview/) Grafana es un panel utilizado para visualizar los datos recolectados.

### 🐣 Instalación 10.1

Instale prometheus y prometheus node exporter.

```text
sudo apt-get install -y prometheus prometheub node-exporter
```

Instalar grafana.

```bash
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" > grafana. ist
sudo mv grafana.list.es/apt/sources.list.d/grafana.list
sudo apt-get update && sudo apt-get install -y grafana
```

Habilita los servicios para que se inicien automáticamente.

```bash
sudo systemctl habilita grafana-server.service
sudo systemctl habilitar prometheus.service
sudo systemctl habilitar prometheichard node-exporter.service
```

Actualización **prometheus.yml** ubicada en `mañana/prometheus/prometheus.yml`

```bash
cat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15 # por defecto, scrape objetivos cada 15 segundos.

  # Adjuntar estas etiquetas a cualquier serie de tiempo o alertas al comunicarse con
  # sistemas externos (federación, almacenamiento remoto, administrador de alertas).
  external_labels:
    monitor: 'codelab-monitor'

# Una configuración de scrape que contiene exactamente un endpoint a scrape:
# Aquí está Prometheus.
scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['localhost:9100']
  - job_name: 'validator'
    static_configs:
      - targets: ['localhost:8081']
  - job_name: 'beacon node'
    static_configs:
      - targets: ['localhost:8080']
  - job_name: 'slasher'
    static_configs:
      - targets: ['localhost:8082']
EOF
sudo mv $HOME/prometheus. ml/prometheus/prometheus.yml
```

Por último, reinicie los servicios.

```bash
sudo systemctl restart grafana-server.service
sudo systemctl restart prometheus.service
sudo systemctl restart prometheoo node-exporter.service
```

Verificar que los servicios se están ejecutando correctamente:

```text
sudo systemctl status grafana-server.service prometheus.service prometheub node-exporter.service
```

{% hint style="info" %}
💡 **Recordatorio**: Asegúrate de que el puerto 3000 esté abierto en el cortafuegos y/o el puerto reenviado si tienes la intención de ver la información de monitoreo desde una máquina diferente.
{% endhint %}

### 📶 10.2 Configurando Grafana Dashboards

1. Abre [http://localhost:3000](http://localhost:3000) o [http://&lt;your](http://<your) validator's ip address&gt;:3000 en tu navegador local.
2. Iniciar sesión con **admin** / **admin**
3. Cambiar contraseña
4. Haga clic en el icono **del equipo de configuración** , luego **Añadir fuente de datos**
5. Seleccione **Prometeo**
6. Establezca **Nombre** a **"Prometheus**"
7. Establecer **URL** a [http://localhost:9090](http://localhost:9090)
8. Haga clic en **Guardar & Prueba**
9. **Descargue y guarde** este [**archivo json**](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)**.** O si tienes más de 10 validadores, usa este [archivo json](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json).
10. Haga clic en **Crear +** icono &gt; **Importar**
11. Añadir panel a través de **Subir archivo JSON**
12. Haga clic en el botón **Importar**

![Tablero Prysm](../../.gitbook/assets/prysm_dash.png)

### ⚠ 10.3 Configurar notificaciones de alerta

{% hint style="info" %}
Configurar alertas para recibir notificaciones si sus validadores se quedan sin conexión.
{% endhint %}

Recibe notificaciones de problemas con tus validadores. Elija entre correo electrónico, telegram, discord o slack.

{% tabs %}
{% tab title="Email Notifications" %}
1. Visita [https://beaconcha.in/](https://beaconcha.in/)
2. Regístrate ****para obtener una cuenta de ****
3. Verifique su **correo electrónico**
4. Busca la dirección pública de tu validador ****
5. Añade validadores a tu lista de seguimiento haciendo clic en el **símbolo del marcador**.
{% endtab %}

{% tab title="Telegram Notifications" %}
1. En el menú de Grafana, seleccione **Canales de notificación** debajo del icono de la campana. ![](../../.gitbook/assets/gra-noti.png)
2. Haga clic en **Añadir canal**.
3. Dale al canal de notificación un **nombre**.
4. Seleccione **Telegram** de la lista Tipos.
5. Para completar la **configuración de la API de Telegram**, se requiere un canal de Telegram y un bot. Para instrucciones sobre cómo configurar un bot con `@Botfather`, vea [esta sección](https://core.telegram.org/bots#6-botfather) de la documentación de Telegram.
6. Una vez completado, invita al bot al canal recién creado.
{% endtab %}

{% tab title="Discord Notifications" %}
1. En el menú de Grafana, seleccione **Canales de notificación** debajo del icono de la campana. ![](../../.gitbook/assets/gra-noti.png)
2. Haga clic en **Añadir canal**.
3. Añade un **nombre** al canal de notificación.
4. Selecciona **Discord** de la lista de tipos.
5. Para completar la configuración, se requiere un servidor de Discord \(y un canal de texto disponible\) así como una URL de Webhook. Para obtener instrucciones sobre cómo configurar un Webhook de Discord, consulte [esta sección](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks) de su documentación.
6. Introduzca el Webhook **URL** en el panel de configuración de notificación de Discord.
7. Haz clic en **Enviar prueba**, que enviará un mensaje de confirmación al canal de Discord.
{% endtab %}

{% tab title="Slack Notifications" %}
1. En el menú de Grafana, seleccione **Canales de notificación** debajo del icono de la campana. ![](../../.gitbook/assets/gra-noti.png)
2. Haga clic en **Añadir canal**.
3. Añade un **nombre** al canal de notificación.
4. Selecciona **Slack** de la lista Tipos.
5. Para obtener instrucciones sobre cómo configurar un webhook entrante de Slack, consulte [esta sección](https://api.slack.com/messaging/webhooks) de su documentación.
6. Introduzca la URL de Slack Incoming Webhook en el campo **URL**.
7. Haga clic en **Enviar prueba**, que enviará un mensaje de confirmación al canal de Slack.
{% endtab %}
{% endtabs %}

{% hint style="success" %}
🎉 ¡Felicidades por configurar tu validador! Es bueno ir a eth2.0.

¿Encontraste útil nuestra guía? Háganos saber con un consejo y seguiremos actualizándolo.

Usa [cointr.ee para encontrar nuestras direcciones de donación ](https://cointr.ee/coincashew). 🙌

Cualquier comentario y todas las solicitudes de extracción son muy apreciadas. 😃

Descubra y hable con otros jugadores en telegram @ [https://t.me/coincashew](https://t.me/coincashew)🌛
{% endhint %}

## 🧙♂ 11. Actualizando Prysm

Reinicie la cadena de baliza y el validador según los procedimientos operativos normales.

{% tabs %}
{% tab title="Systemd - Automated" %}
```text
sudo systemctl reload-or-restart beacon-chain
sudo systemctl reload-o-restart validator
```
{% endtab %}

{% tab title="CLI - Manual" %}
```bash
#Controla C para salir de tus procesos de cadena de balizas y validadores 
#Pulsa la flecha hacia arriba y entra para reiniciar.
```
{% endtab %}
{% endtabs %}

## 🧩 12. Material de referencia

Apreciar el duro trabajo realizado por la gente fina en los siguientes enlaces que sirvieron de base para la creación de esta guía.

{% embed url="https://discord.gg/KSA7rPr" %}

{% embed url="https://launchpad.ethereum.org/" caption="" %}

{% embed url="https://prylabs.net/participate" %}

{% embed url="https://docs.prylabs.network/docs/getting-started/" %}

## 🎉 13. Enlaces extras

### 🌰 Guías de CoinCashew para otros clientes de ETH2

{% page-ref page="guide-how-to-stake-on-eth2-with-lighthouse.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-teku-on-ubuntu.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-nimbus.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-lodestar.md" %}

### 🧱 Exploradores de Bloques ETH2

{% embed url="https://beaconcha.in" caption="" %}

{% embed url="https://beaconscan.com" caption="" %}

### 🗒 Última información de Eth2

{% embed url="https://www.reddit.com/r/ethstaker" caption="" %}

{% embed url="https://blog.ethereum.org" caption="" %}

{% embed url="http://invite.gg/ethstaker" caption="" %}

{% embed url="https://hackmd.io/@benjaminion/eth2\_news/" caption="" %}

## 🔥 14. Consejos útiles adicionales

### 🛑 14.1 Salir voluntariamente de un validador

{% hint style="info" %}
Utiliza este comando para indicar tus intenciones de dejar de validar con tu validador. Esto significa que ya no quieres apostar con tu validador y quieres apagar tu nodo.

* La salida voluntaria toma un mínimo de 2048 epochs \(o ~9días\). Hay una cola para salir y un retraso antes de que el validador se cierre por fin.
* Una vez que un validador haya terminado en la fase 0, esto no es revertible y ya no puede volver a validar de nuevo.
* Sus fondos no estarán disponibles para su retiro hasta la fase 1.5 o posterior.
* Después de que su validador salga de la cola de salida y esté realmente cerrado, es seguro apagar su nodo y validador.
{% endhint %}

```bash
$HOMEcuentas de validadores /prysm/prysm.sh de salida voluntaria
```

### 🔐 14.2 Verifique su frase mnemónica

Utilizando la herramienta eth2deposit-cli, asegúrese de que puede regenerar los mismos pares de claves eth2 restaurando sus `validator_keys`

```bash
./deposit existing-mnemonic --chain mainnet
```

{% hint style="info" %}
Cuando la **pubkey** es idéntica, esto significa que el archivo **keystore** verificó correctamente su frase mnemónica. Otros campos serán diferentes debido a la salazón.
{% endhint %}

### 🤖 14.3 Añadir validadores adicionales

Usando la herramienta eth2deposit-cli, puede agregar más validadores creando un nuevo archivo de datos de depósito y `validator_keys`

Por ejemplo, en caso de que originalmente creamos 3 validadores pero ahora queremos añadir 5 validadores más, podríamos usar el siguiente comando.

```bash
./deposit existing-mnemonic --validator_start_index 3 --num_validators 5 --chain mainnet
```

Completa los pasos para subir el `deposit_data-#########.json` al sitio del pad de lanzamiento.

