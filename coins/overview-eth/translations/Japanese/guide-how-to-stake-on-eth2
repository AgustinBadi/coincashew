---
description: >-
  検証者になり、eth2、プルーフ・オブ・ステーク・ブロックチェーンの安全性を確保するのに役立ちます。 ETH32をお持ちの方なら誰でも参加できます。
---

# ガイド:Ubuntu上でPrysmでETH2 Mainnetを投資する方法

{% hint style="danger" %}
**Nov 24 2020 Update**: [new mainnet guide is located here](guide-or-how-to-setup-a-validator-on-eth2-mainnet/).

以下の手順は廃止予定となり、参照のみになりました。
{% endhint %}











{% hint style="info" %}
[Prysm](https://github.com/prysmaticlabs/prysm) は、使いやすさ、セキュリティ、および信頼性に焦点を当てた、Ethereum 2.0プロトコルのGo実装です。 Prysmは、クライアントの開発に唯一の焦点を当てている [Prysmatic Labs](https://prysmaticlabs.com/)によって開発されました。 PrismはGoに書かれており、GPL-3.0ライセンスの下でリリースされています。
{% endhint %}

## 🏁 0. 前提条件

### 👩💻 eth2 バリデータとビーコンノードを操作するためのスキル

eth2 のバリデータとして、通常、以下のような能力があります。

* eth2ビーコンノードと検証器の設置方法、実行、維持方法に関する運用上の知識
* 24時間年中無休のバリデータを維持するという約束です
* 基本的なオペレーティングシステムのスキル
* has known beginners for Beginners' by Superphiz ['Intro to Eth2 & Staking for Beginners' by Superphiz](https://www.youtube.com/watch?v=tpkpW031RCI)
* [Eth2 Study Master course](https://ethereumstudymaster.com/) に合格または登録されています
* そして、 [8 Things Every Eth2 validatorが知っておくべきである](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

### 🎗 **最低設定要件**

* **オペレーティングシステム:** 64 ビット Linux \(i.) Ubuntu 20.04 LTS\)
* **プロセッサ:** デュアルコア CPU、Intel Core i5–760 または AMD FX-8100 以上
* **Memory:** 8GB RAM
* **ストレージ:** 20GB SSD
* **インターネット:** 少なくとも1 Mbpsの速度でブロードバンドのインターネット接続。
* **電力:** 信頼性の高い電力。
* **ETH残高:** 少なくとも32 ETHといくつかのETHをデポジット取引手数料として
* **ウォレット**: メタマスクがインストールされました

### 🏋♂ 推奨ハードウェア設定

* **オペレーティングシステム:** 64 ビット Linux \(i.) Ubuntu 20.04 LTS\)
* **プロセッサ:** クワッドコア CPU、Intel Core i7-4770 または AMD FX-8310 以上
* **メモリ:** 16 GB RAM 以上
* **ストレージ:** 1TB SSD 以上
* **インターネット:** 10Mbps以上の速度でブロードバンドインターネット接続
* **電源:** 無停電電源\(UPS\) による信頼性の高い電力
* **ETH残高:** 少なくとも32 ETHといくつかのETHをデポジット取引手数料として
* **ウォレット**: メタマスクがインストールされました

{% hint style="warning" %}
✨ **Pro Validator Tip**: OS、VM、またはマシンの新しいインスタンスから始めることを強くお勧めします。 mainnet バリデータに testnet キー、財布、データベースを再利用しないことで、頭痛を避けます。
{% endhint %}

### 🔓 推奨されるeth2バリデータセキュリティのベストプラクティス。

バリデータを保護するためのアイデアやリマインダーが必要な場合は、こちらを参照してください

{% page-ref page="guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md" %}

### 🛠 Setup Ubuntu

Ubuntuをインストールする必要がある場合は、

{% page-ref page="../overview-xtz/guide-how-to-setup-a-baker/install-ubuntu.md" %}

### 🎭 メタマスクの設定

メタマスクをインストールする必要がある場合は、

{% page-ref page="../../wallets/browser-wallets/metamask-ethereum.md" %}

## 🌱 1. ETHの購入/交換/統合

{% hint style="info" %}
あなたが所有するすべての32ETHは、1バリデータを作成することができます。 ビーコンノードで何千ものバリデータを実行できます。
{% endhint %}

ETH \(または32 ETHの倍数) は、Metamask でアクセス可能な単一のアドレスに統合する必要があります。

ETHを購入/交換する必要がある場合、もしくはETHを32の倍数に補充する必要がある場合は、以下をご覧ください:

{% page-ref page="guide-how-to-buy-eth.md" %}

## 👩💻 2. Launchpadでバリデータにサインアップする

1. 依存関係、イーサリアム財団デポジットツールをインストールし、キーペアのあなたの2セットを生成します。

{% hint style="info" %}
各バリデータには2つのキーペアがあります。 **署名キー** と **引き出しキー** これらのキーは 1 つのニーモニックフレーズから派生します。 [キーについての詳細はこちら](https://blog.ethereum.org/2020/05/21/keys/)
{% endhint %}

ビルド済みの [イーサリアム財団デポジットツール](https://github.com/ethereum/eth2.0-deposit-cli) をダウンロードするか、ソースからビルドするかを選択できます。

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
eth2deposit-cliをダウンロード

```bash
cd $HOME
wget https://github.com/eth2.0-deposit-cli/releases/download/v1.0.0/eth2deposit-cli-9310de0-linux-amd64.tar.gz
```

SHA256 チェックサムが、 [リリース ページ](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.0.0) のチェックサムと一致することを確認します。

```bash
sha256sum eth2deposit-cli-9310de0-linux-amd64.tar.gz 
# SHA256 should be
# b09da136895a7f77a4b430924ea2ae5827fa47b2bf444c4ea6fcfac5b04b8c8a
```

アーカイブを展開します。

```text
tar -xvf eth2deposit-cli-9310de0-linux-amd64.tar.gz
cd eth2deposit-cli-9310de0-linux-amd64
```

新しいニーモニックを作ります。

```text
./deposit new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Build from source code" %}
依存関係のインストール

```text
sudo apt update
sudo apt install python3-pip git -y
```

ソースコードをダウンロードしてインストールします。

```text
mkdir ~/git
cd ~/git
git clone https://github.com/eth2.0-deposit-cli.git
cd eth2.0-deposit-cli
sudo ./deposit.sh install
```

新しいニーモニックを作ります。

```text
./deposit.sh new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
🔥**\[ Optional \] Pro Security Tip**: eth2deposit-cli ツールを実行し、 **エアーが接続されたオフラインマシン** でバリデータキーの **ニーモニックシード** を生成します。

USBキーを介して、オンラインマシンからエアーラップされたオフラインマシンに組み込まれたeth2deposit-cli バイナリをコピーできます。

* キーロギング攻撃、マルウェア/ウイルスベースの攻撃、その他のファイアウォールやセキュリティエクスプロイトから保護します。
* ネットワークの他の部分から物理的に分離されます。
* ネットワーク接続、有線または無線接続を使用しないでください。
* ネットワーク接続のあるマシン上のVMではありません。
* [wikipedia](https://en.wikipedia.org/wiki/Air_gap_%28networking%29) での空気ギャップについてもっと詳しく知る。
{% endhint %}
{% endtab %}
{% endtabs %}

1. 指示に従って、パスワードを選択します。 あなたのニーモニックを書き留めて、この安全と **オフライン**を維持してください。
2. [https://launchpad.ethereum.org/](https://launchpad.ethereum.org/) の手順に従って、完了したばかりの手順をスキップします。 eth2フェーズ0の概要材料を研究する。 eth2を理解することが成功の鍵です!
3. `validator_keys` ディレクトリにある `deposit_data-#########.json` をアップロードします。
4. メタマスクウォレット、レビューと受け入れ条件でランチパッドに接続します。
5. トランザクションを確認\(s\). バリデーターごとに32ETHのデポジットトランザクションがあります。

{% hint style="info" %}
あなたの取引はあなたのETHを [公式ETH2入金契約アドレスに送金します。 ](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)

**Check**, _double-check_, _**triple-check**_ that the official Eth2 deposit contract address is correct.[`0x00000000219ab540356cBB839Cbe05303d7705Fa`](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)
{% endhint %}

{% hint style="danger" %}
書き留めるか、ニーモニックシード **オフライン**を記録してください。 _電子メールではありません。 クラウドではありません。_

****オフラインバックアップ **`validator_keys`** \`\`ディレクトリのUSBキーなどを作成します。
{% endhint %}

## 🛸 3. Install a ETH1 node

{% hint style="info" %}
Ethereum 2.0は、32 ETHバリデータデポジットを監視するためにEthereum 1.0への接続が必要です。 独自のEthereum 1.0ノードをホストすることは、分散化を最大化し、Infuraなどの第三者への依存を最小限に抑える最良の方法です。
{% endhint %}

{% hint style="warning" %}
その後の手順は、 [ベストプラクティスのセキュリティガイド](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md) を完了したと仮定します。
{% endhint %}

Your choice of either [**OpenEthereum**](https://www.parity.io/ethereum/)**,** [**Geth**](https://geth.ethereum.org/)**,** [**Besu**](https://besu.hyperledger.org/) **or** [**Nethermind**](https://www.nethermind.io/)**.**

{% tabs %}
{% tab title="OpenEthereum \(Parity\)" %}
#### 🤖 OpenEthereumをインストールして実行します。

```text
mkdir ~/openetherum && cd ~/openethereum
wget https://github.com/openetherum/openetherum/releases/download/v3.0.1/openeterum-linux-v3.0.1.zip
unzip openeterum*zip
chmod +x openethereum*.zip
rm openetherum*.zip
```

<unk> ⚙ **systemdの設定と設定**

**eth1.service** の設定を定義する `ユニットファイル` を作成するには、以下を実行します。

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = openethereum eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
WorkingDirectory= /home/$(whoami)/openethereum
ExecStart       = /home/$(whoami)/openethereum/openethereum --chain foundation
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

ユニットファイルを `/etc/systemd/system` に移動し、アクセス許可を与えます。

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

起動時に自動起動を有効にするには、以下を実行します。

```text
sudo systemctl daemon-reload
sudo systemctl enable eth1
```

#### ⛓ mainnetでOpenEthereumを開始します。

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Geth" %}
#### 🧬 リポジトリからインストールします。

```text
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update -y
sudo apt-get install ethereum -y
```

⚙ **systemdの設定と設定**

**eth1.service** の設定を定義する `ユニットファイル` を作成するには、以下を実行します。

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = geth eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
ExecStart       = /usr/bin/geth --rpc --http
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

ユニットファイルを `/etc/systemd/system` に移動し、アクセス許可を与えます。

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

起動時に自動起動を有効にするには、以下を実行します。

```text
sudo systemctl daemon-reload
sudo systemctl enable eth1
```

#### ⛓ mainnet でgeth を開始します。

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Besu" %}
#### 🧬 Java の依存関係をインストールします。

```text
sudo apt install openjdk-11-jdk
```

#### 🌜 Besuをダウンロードして解凍します。

```text
cd
wget -O besu.tar.gz https://bintray.com/hyperledger-org/besu-repo/download_file?file_path=besu-1.5.0.tar.gz
tar -xvf besu.tar.gz
rm besu.tar.gz
mv besu-1.5.0 besu
```

⚙ **systemdの設定と設定**

**eth1.service** の設定を定義する `ユニットファイル` を作成するには、以下を実行します。

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = openethereum eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
WorkingDirectory= /home/$(whoami)/besu/bin
ExecStart       = /home/$(whoami)/besu/bin/besu --data-path="$HOME/.ethereum_besu"
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

ユニットファイルを `/etc/systemd/system` に移動し、アクセス許可を与えます。

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

起動時に自動起動を有効にするには、以下を実行します。

```text
sudo systemctl daemon-reload
sudo systemctl enable eth1
```

#### ⛓ mainnet でbesuを開始します。

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Nethermind" %}
#### ⚙ 依存関係をインストールします。

```text
sudo apt-get update && sudo apt-get install libsnappy-dev libc6-dev libc6 unzip -y
```

#### 🌜 ネザーマインドをダウンロードして解凍します。

```text
mkdir ~/nethermind && cd ~/nethermind
wget -O nethermind.zip https://netdev.blob.core.windows.net/builds/nethermind-linux-amd64-1.8.77-9d3a58a.zip
unzip nethermind.zip
rm nethermind.zip
```

#### 🛸 ネザーマインドを起動します。

```text
./Netherminde.Launcher
```

* `イーサリアムノード`を選択
* `Ethereum (mainnet)` を選択し、 `Fast sync` を選択します
* Web3 / JSON RPCを有効にする
* 既定のIPを承認する
* ethstatsの登録をスキップ
{% endtab %}

{% tab title="Minimum Hardware Setup" %}
{% hint style="info" %}
無限のディスク領域の設定に適しています。 可能な場合は、常に独自のフルeth1ノードを実行します。
{% endhint %}

[https://infura.io/](https://infura.io/) の API アクセスキーにサインアップ

1. 無料アカウントにサインアップします。
2. メールアドレスを確認してください。
3. ダッシュボード [https://infura.io/dashboard](https://infura.io/dashboard) をご覧ください
4. プロジェクトを作成し、名前を付けます。
5. ENDPOINTとして **Mainnet** を選択します
6. API キーをコピーします。
7. **beacon chain** セクションのパラメータ **http-web3provider** を更新する。

```bash
#example parameter
--http-web3provider=https://infura.io/v3/<YOUR_API_KEY>
```
{% endtab %}
{% endtabs %}



{% hint style="info" %}
eth1ノードの同期には最大24時間かかる場合があります。
{% endhint %}

{% hint style="success" %}
eth1 ノードは、これらのイベントが発生したときに完全に同期されます。

* **`OpenEthereum:`** `Imported #<block number>`
* **`Geth:`** `新しいチェーンセグメントをインポート`
* **`Besu:`** `インポート済み #<block number>`
* **`Nethermind:`** `古いヘッダを同期しなくなりました`
{% endhint %}

#### 🛠 eth1.service commands

<unk> <unk> 🗒 **eth1ログを表示してフォローする**

```text
journalctl -u eth1 -f
```

🗒 **eth1 サービスを停止するには**

```text
sudo systemctl stop eth1
```

{% hint style="danger" %}
🛑 **Before continuing the rest of this guide, we recommend you wait until closer to Dec 1st as the Prysm code is rapidly preparing for mainnet.** 🚧
{% endhint %}

## 💡 4. Install Prysm

```bash
mkdir ~/prysm && cd ~/prysm 
curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && chmod +x prysm.sh 
```

{% hint style="info" %}
PrysmはEthereum 2.0クライアントであり、2つのコンポーネントがあります。

**Beacon chain client** - Beacon chain, validator shufflingなどの状態の管理を担当。

**Validator クライアント** - ビーコンチェーンとシャードチェーンで新しいブロックと認証を生成する責任を負う。
{% endhint %}

## 🔥 5. ポート転送やファイアウォールの設定

ネットワーク設定またはクラウドプロバイダ設定に固有の [バリデータのファイアウォールポートがオープンで到達可能であることを確認してください。](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Prysm beacon chain node** は udp にポート 12000 を tcp に使用する
* **eth1** 節点は、tcpとudp のポート30303が必要です

{% hint style="info" %}
✨ **ポート転送 ヒント:** ポートをバリデータに転送して開く必要があります。 [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) または [https://canyouseeme.org/](https://canyouseeme.org/) で動作していることを確認してください。
{% endhint %}

## 🎩 6. バリデータキーをインポート

**eth2deposit-cliのインストール方法に応じて正しいコマンドを選択します。**

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
```bash
$HOME/prysm/prysm.sh バリデータアカウントのインポート --keys-dir=$HOME/eth2deposit-cli-9310de0-linux-amd64/validator_keys
```
{% endtab %}

{% tab title="Built from source code" %}
```bash
$HOME/prysm/prysm.sh バリデータアカウントのインポート --keys-dir=$HOME/git/eth2.0-deposit-cli/validator_keys
```
{% endtab %}
{% endtabs %}

デフォルトのウォレットの場所を承認し、新しいパスワードを入力してウォレットを暗号化し、インポートしたアカウントのパスワードを入力します。

{% hint style="danger" %}
**警告**: 他のリンクを有効にするためには、元のキーを使用しないでください。さもないと、SLASHEDを取得します。
{% endhint %}

## 🏂 7. ビーコンチェーンを開始する

{% hint style="warning" %}
以前のテストネットに参加した場合は、データベースをクリアする必要があります。

```bash
$HOME/prysm/prysm.sh beacon-chain -clear-db
```
{% endhint %}

ビーコンチェーンとバリデータをコマンドラインから手動で実行するか、自動的にシステムで実行するかを選択します。

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 あなたのビーコンチェーンとバリデータに systemd を使用する利点 <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. メンテナンス、停電などによるコンピュータの再起動時にビーコンチェーンを自動起動します。
2. クラッシュしたビーコンチェーンプロセスを自動的に再起動します。
3. ビーコンチェーンの稼働時間とパフォーマンスを最大化します。

#### 🛠 セットアップ手順

**beacon-chain.service** の設定を定義するために、次のように`ユニットファイル` を作成します。

```bash
cat > $HOME/beacon-chain.service << EOF 
# The eth2 beacon chain service (part of systemd)
# file: /etc/systemd/system/beacon-chain.service 

[Unit]
Description     = eth2 beacon chain service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
Environment     = "ClientIP=$(curl -s v4.ident.me)"
WorkingDirectory= /home/$(whoami)/prysm
ExecStart       = /home/$(whoami)/prysm/prysm.sh beacon-chain --p2p-host-ip=${ClientIP} --monitoring-host="0.0.0.0" --http-web3provider=http://127.0.0.1:8545 --accept-terms-of-use 
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

{% hint style="info" %}
Geth ユーザーは以下でより高いパフォーマンスを達成できます。

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}

ユニットファイルを `/etc/systemd/system` に移動し、アクセス許可を与えます。

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
sudo chmod 644 /etc/systemd/system/beacon-chain.service
```

起動時に自動起動を有効にし、ビーコンノードサービスを開始するには、以下を実行します。

```text
sudo systemctl daemon-reload
sudo systemctl enable beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
よくやった。 あなたのビーコンチェーンは、システムの信頼性と堅牢性によって管理されています。 systemdを使用するためのコマンドを以下に示します。
{% endhint %}

### 🛠 systemd コマンドをいくつか使います。

#### ✅ビーコンチェーンがアクティブかどうかを確認します

```text
sudo systemctl is-active beacon-chain
```

#### 🔎 ビーコンチェーンの状態を表示

```text
sudo systemctl status beacon-chain
```

#### 🔄 ビーコンチェーンを再起動する

```text
sudo systemctl reload-or-restart beacon-chain
```

#### 🛑 ビーコンチェーンを停止します

```text
sudo systemctl stop beacon-chain
```

#### 🗒 ログを表示およびフィルタリングする

```bash
journalctl --unit=beacon-chain --since=yesterday
journalctl --unit=beacon-chain --since=today
journctl --unit=beacon-chain --since='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
新しい端末でビーコンチェーンを開始します。

```bash
$HOME/prysm/prysm.sh beacon-chain \
--p2p-host-ip=$(curl -s v4.ident.me) \
--http-web3provider="http://127.0.0.1:8545"
--monitoring-host="0.0.0.0" \
--accept-terms-of-use
```

{% hint style="info" %}
Geth ユーザーは以下でより高いパフォーマンスを達成できます。

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}
{% endtab %}
{% endtabs %}

## 🧬 8. バリデータを開始する <a id="9-start-the-validator"></a>

バリデータのパスワードをファイルに保存し、読み取り専用にします。

```bash
echo "my_password_goes_here" > $HOME/.eth2validators/validators-password.txt
sudo chmod 600 $HOME/.eth2validators/validators-password.txt
```

コマンドラインから手動で、またはsystemdで自動的にバリデータを実行することができます。

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 バリデータに systemd を使用する利点 <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. メンテナンス、停電などによりコンピュータが再起動すると、バリデータを自動的に開始します。
2. クラッシュしたバリデータプロセスを自動的に再起動します。
3. バリデータの稼働時間とパフォーマンスを最大化します。

#### 🛠 セットアップ手順

**validator.service** の設定を定義する`ユニットファイル` を作成するには、以下を実行します。

```bash
cat > $HOME/validator.service << EOF 
# The eth2 validator service (part of systemd)
# file: /etc/systemd/system/validator.service 

[Unit]
Description     = eth2 validator service
Wants           = network-online.target beacon-chain.service
After           = network-online.target 

[Service]
User            = $(whoami)
WorkingDirectory= /home/$(whoami)/prysm
ExecStart       = /home/$(whoami)/prysm/prysm.sh validator --accept-terms-of-use --wallet-password-file /home/$(whoami)/.eth2validators/validators-password.txt
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

ユニットファイルを `/etc/systemd/system` に移動し、アクセス許可を与えます。

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
sudo chmod 644 /etc/systemd/system/validator.service
```

起動時に自動起動を有効にし、バリデータを開始するには、以下を実行します。

```text
sudo systemctl daemon-reload
sudo systemctl enable validator
sudo systemctl start validator
```

### 🛠 systemd コマンドをいくつか使います。

#### ✅バリデータが有効かどうかを確認します

```text
sudo systemctl is-active validator
```

#### 🔎 バリデータの状態を表示

```text
sudo systemctl status validator
```

#### 🔄 バリデータを再起動する

```text
sudo systemctl reload-or-restart validator
```

#### 🛑 バリデータの停止

```text
sudo systemctl stop validator
```

#### :file_cabiet: ログの表示とフィルタリングを行う

```bash
journalctl --unit=validator --since=yesterday
journalctl --unit=validator --since=today
journctl --unit=validator --since='2020-12-01 00:00:00' -until='2020-12-02 12:00:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
新しい端末で、バリデータを開始します。

```bash
$HOME/prysm/prysm.sh validator \
--accept-terms-of-use \
--wallet-password-file /home/$(whoami)/.eth2validators/validators-password.txt
```
{% endtab %}
{% endtabs %}

**バリデータ公開キー** がログに表示されることを確認します。 以下の例：

```text
INFO Enabled validator voting_pubkey: 0x2374.....7121
```

{% hint style="info" %}
**Validator クライアント** - ビーコンチェーンとシャードチェーンで新しいブロックと認証を生成する責任を負う。

**Beacon chain client** - Beacon chain, validator shufflingなどの状態の管理を担当。
{% endhint %}

{% hint style="success" %}
おめでとうございます ビーコンチェーンの同期、検証、実行が完了したら、アクティベーションを待つだけです。 このプロセスには24時間かかります。 割り当てられると、ETH投資報酬を獲得しながら、バリデーターはブロックの作成と投票を開始します。

[beaconcha.in](https://beaconcha.in/) を使用して [アカウント](https://beaconcha.in/register) を登録してアラートを作成し、バリデータのパフォーマンスを追跡します。
{% endhint %}

## 🕒 9. 時刻同期

{% hint style="info" %}
ビーコンチェーンは認証を行い、ブロックを生成するために正確な時間に依存しています。 あなたのコンピュータの時間は0以内に実際のNTPまたはNTS時間に対して正確でなければなりません。 秒
{% endhint %}

以下のガイドで **Chrony** をセットアップしてください。

{% hint style="info" %}
chronyはNetwork Time Protocolの実装であり、コンピュータの時刻をNTPと同期させるのに役立ちます。
{% endhint %}

## 🔎 10. GrafanaとPrometheusでバリデータを監視する

Prometheusは、これらのターゲットのメトリックHTTPエンドポイントをスクレイピングすることによって、監視対象からメトリックを収集する監視プラットフォームです。 [公式ドキュメントはこちらから入手できます。](https://prometheus.io/docs/introduction/overview/) Grafana は収集されたデータを視覚化するために使用されるダッシュボードです。

### 🐣 10.1 インストール

prometheusとprometheusノードエクスポーターをインストールします。

```text
sudo apt-get install -y prometheus prometheus-node-exporter
```

Grafanaをインストールします。

```bash
wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" > grafana.list
sudo mv grafana.list /etc/apt/sources.list.d/grafana.list
sudo apt-get update && sudo apt-get install -y grafana
```

自動的に起動するようにサービスを有効にします。

```bash
sudo systemctl enable grafana-server.service
sudo systemctl enable prometheus.service
sudo systemctl enable prometheus-node-exporter.service
```

**prometheus.yml** を `/etc/prometheus/prometheus.yml にある` に更新する

```bash
cat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15s # デフォルトでは、15秒ごとにターゲットをスクレイプします。

  #
  # 外部システム (フェデレーション、リモートストレージ、Alertmanager) との通信時に、これらのラベルを任意の時系列またはアラートに接続します。
  external_labels:
    monitor: 'codelab-monitor'

# スクレイプするエンドポイントを含むスクレイプ構成:
# ここではプロメテウスそのものです。
scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['localhost:9100']
  - job_name: 'validator'
    static_configs:
      - targets: ['localhost:8081']
  - job_name: 'beacon node'
    static_configs:
      - targets: ['localhost:8080']
  - job_name: 'slasher'
    static_configs:
      - targets: ['localhost:8082']
EOF
sudo mv $HOME/prometheus.yml /etc/prometheus/prometheus.yml
```

最後に、サービスを再起動します。

```bash
sudo systemctl restart grafana-server.service
sudo systemctl restart prometheus.service
sudo systemctl restart prometheus-node-exporter.service
```

サービスが正常に実行されていることを確認します:

```text
sudo systemctl status grafana-server.service prometheus.service prometheus-node-exporter.service
```

{% hint style="info" %}
💡 **リマインダー**: 別のマシンから監視情報を表示する場合は、ファイアウォールやポート転送時にポート3000が開いていることを確認します。
{% endhint %}

### :antera_bars: 10.2 Grafana ダッシュボードの設定

1. ローカルブラウザで [http://localhost:3000](http://localhost:3000) または [http://&lt;your](http://<your) validator's ip address&gt;:3000 を開きます。
2. **admin** / **admin** でログイン
3. パスワードの変更
4. **設定歯車** アイコンをクリックし、 **データソースを追加**
5. **Prometheus** を選択してください
6. **の名前** を **"Prometheus** " に設定する
7. **URL** を [http://localhost:9090 に設定](http://localhost:9090)
8. **保存 & テスト** をクリックします
9. **Download and save** this [**json file**](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)**.** Or if you have more than 10 validators, use this [json file](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json).
10. **Create +** icon &gt; **Import**
11. **アップロードJSONファイル**でダッシュボードを追加
12. **インポート** ボタンをクリックします。

![Prysm ダッシュボード](../../.gitbook/assets/prysm_dash.png)

### ⚠ 10.3 アラート通知の設定

{% hint style="info" %}
バリデータがオフラインになった場合に通知を受け取るためのアラートを設定します。
{% endhint %}

バリデータに関する問題の通知を受け取ります。 電子メール、電報、discord、またはスラックのいずれかを選択します。

{% tabs %}
{% tab title="Email Notifications" %}
1. [https://beaconcha.in/](https://beaconcha.in/) をご覧ください
2. **** **アカウント**に登録する
3. **メールアドレス** を確認してください
4. **バリデータの公開アドレス**を検索する
5. **ブックマーク** をクリックして、ウォッチリストにバリデーターを追加します。
{% endtab %}

{% tab title="Telegram Notifications" %}
1. Grafanaのメニューで、ベルアイコンの下にある **通知チャンネル** を選択します。 ![](../../.gitbook/assets/gra-noti.png)
2. **Add channel** をクリックします。
3. 通知チャンネルに **の名前** を付けます。
4. タイプリストから **テレグラム** を選択します。
5. **Telegram APIの設定**を完了するには、TelegramチャンネルとBotが必要です。 `@Botfather`でボットをセットアップする方法については、Telegramのドキュメントの [このセクション](https://core.telegram.org/bots#6-botfather) を参照してください。
6. 完了したら、ボットを新しく作成したチャンネルに招待します。
{% endtab %}

{% tab title="Discord Notifications" %}
1. Grafanaのメニューで、ベルアイコンの下にある **通知チャンネル** を選択します。 ![](../../.gitbook/assets/gra-noti.png)
2. **Add channel** をクリックします。
3. 通知チャンネルに **の名前** を追加します。
4. タイプリストから **Discord** を選択します。
5. 設定を完了するには、Discordサーバーの\(およびテキストチャンネルが利用可能\)とWebhookのURLが必要です。 Discordの Webhook の設定方法については、ドキュメントの [このセクション](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks) を参照してください。
6. Discordの通知設定パネルにWebhook **URL** を入力します。
7. **Send Test**をクリックすると、Discordチャンネルに確認メッセージが送信されます。
{% endtab %}

{% tab title="Slack Notifications" %}
1. Grafanaのメニューで、ベルアイコンの下にある **通知チャンネル** を選択します。 ![](../../.gitbook/assets/gra-noti.png)
2. **Add channel** をクリックします。
3. 通知チャンネルに **の名前** を追加します。
4. **リストから** を選択します。
5. Slack の Incoming Webhooks のセットアップ方法については、ドキュメントの [このセクション](https://api.slack.com/messaging/webhooks) を参照してください。
6. Slack Incoming Webhook URL を **URL** フィールドに入力します。
7. **Send Test**をクリックすると、Slackチャンネルに確認メッセージが送信されます。
{% endtab %}
{% endtabs %}

{% hint style="success" %}
🎉 バリデータの設定おめでとうございます！ あなたはeth2.0に行くのが良いです。

私たちのガイドが役に立ちましたか？ ヒントを教えてください。アップデートを続けます。

[coint.eeを使用して、寄付 ](https://cointr.ee/coincashew)アドレスを見つけてください。 🙌

どんなフィードバックとすべてのプルリクエストは非常に高く評価されます。 😃

テレグラム@ [https://t.me/counterashew](https://t.me/coincashew) :first_quaret_moon_face:
{% endhint %}

## 🧙♂ 11. プライムを更新中

通常の操作手順に従ってビーコンチェーンとバリデータを再起動します。

{% tabs %}
{% tab title="Systemd - Automated" %}
```text
sudo systemctl reload-or-restart beacon-chain
sudo systemctl reload-or-restart validator
```
{% endtab %}

{% tab title="CLI - Manual" %}
```bash
#コントロールCはビーコンチェーンとバリデータープロセスの両方を終了します 
#矢印キーを押して再起動します。
```
{% endtab %}
{% endtabs %}

## 🧩 12. 参照資料

このガイドを作成するための基礎となった以下のリンクで、立派な人々によって行われたハードワークを感謝します。

{% embed url="https://discord.gg/KSA7rPr" %}

{% embed url="https://launchpad.etherum.org/" caption="" %}

{% embed url="https://prylabs.net/participate " %}

{% embed url="https://docs.prylabs.network/docs/getting-started/" %}

## 🎉 13. ボーナスリンク

### :chestrnut: CoinCashewガイド 他のETH2クライアントのための

{% page-ref page="guide-how-to-stake-on-eth2-with-lighthouse.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-teku-on-ubuntu.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-nimbus.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-lodestar.md" %}

### 🧱 ETH2 Block Explorers

{% embed url="https://beaconcha.in" caption="" %}

{% embed url="https://beaconscan.com" caption="" %}

### 🗒最新のEth2情報

{% embed url="https://www.reddit.com/r/ethstaker" caption="" %}

{% embed url="https://blog.etherum.org" caption="" %}

{% embed url="http://invitegg/ethstaker" caption="" %}

{% embed url="https://hackmd.io/@benjaminion/eth2\_news/" caption="" %}

## 🔥 14. 追加の役に立つヒント

### 🛑 14.1 バリデータを任意に終了する

{% hint style="info" %}
このコマンドを使用して、バリデーターで検証を停止する意図を知らせます。 これは、もはやあなたのバリデータとステークしたくなくなり、ノードをオフにしたいことを意味します。

* 自発的な終了は、最低2048エポック\(または〜9日間\)かかります。 終了するキューがあり、バリデータが最終的に終了するまでの遅延があります。
* フェーズ0でバリデータを終了すると、元に戻すことができなくなり、再度バリデーションを再開することはできません。
* あなたの資金は、フェーズ1.5以降まで引き出しできません。
* あなたのバリデータが終了キューを離れ、本当に終了したら、ビーコンノードとバリデータをオフにしても安全です。
{% endhint %}

```bash
$HOME/prysm/prysm.sh バリデーターアカウントを自発的に終了
```

### 🔐 14.2 ニーモニックフレーズを確認

eth2deposit-cli ツールを使用して、 `validator_keys` を復元して同じeth2キーペアを再生成できるようにします。

```bash
./deposit existing-mnemonic --chain mainnet
```

{% hint style="info" %}
**pubkey** が同一である場合、これはあなたの **キーストアファイル** を正しく確認したことを意味します。 塩漬けのために他のフィールドは異なるでしょう。
{% endhint %}

### 🤖 14.3 バリデーターを追加する

eth2deposit-cli ツールを使用して、新しい入金データファイルと `validator_keys` を作成することで、バリデータをさらに追加できます。

たとえば、もともと3つのバリデータを作成しましたが、さらに5つのバリデータを追加したい場合は、以下のコマンドを使用できます。

```bash
./deposit existing-mnemonic --validator_start_index 3 --num_validators 5 --chain mainnet
```

`deposit_data-#########.json` を発射台サイトにアップロードする手順を完了します。

