---
description: ノードを保護するためのクイックステップです。
---

# ガイド \| ETH2検証用ビーコンチェーンノードのセキュリティベストプラクティスについて

## 🤖 事前要件

* Ubuntu Server または Ubuntu Desktop がインストールされました
* SSHサーバーがインストールされました
* SSHクライアントまたはターミナルウィンドウへのアクセス

SSH サーバーをインストールする必要がある場合は、以下を参照してください:

{% embed url="https://www.simplicified.guide/ubuntu/install-ssh-server" %}

お使いのオペレーティングシステムにSSHクライアントが必要な場合は、以下を参照してください:

{% embed url="https://www.howto-to-an-ssh-server-from-windows-or-linux/" %}

## 🧙♂sudo 権限を持つ非 root ユーザーを作成

{% hint style="info" %}
非 root アカウントを使用してサーバーにログインする習慣を作ってください。 これは間違いを犯した場合、ファイルの誤って削除を防ぐことができます。 例えば、コマンド `rm` は、rootユーザーが間違って実行した場合、サーバー全体を消去することができます。
{% endhint %}

{% hint style="danger" %}
🔥**ヒント**: root アカウントを日常的に使用しないでください。 `su` または `sudo`を常に使用してください。
{% endhint %}

SSH クライアントを使用してサーバーに SSH

```bash
ssh username@server.public.ip.address
# example
# ssh myUsername@77.22.161.10
```

イーサリアムという新しいユーザーを作成

```text
sudo useradd -m -s /bin/bash eterium
```

イーサリアムユーザーのパスワードを設定する

```text
sudo passwd ethereum
```

sudoグループにイーサリアムを追加

```text
sudo usermod -aG sudo ethereum
```

## 🔐 **SSHパスワード認証を無効にし、SSHキーのみを使用する**

{% hint style="info" %}
SSHを硬化する基本的なルールは次のとおりです。

* SSH アクセスのためのパスワードがありません（秘密鍵を使用してください）。
* root から SSH にアクセスすることはできません (適切なユーザーは SSH にアクセスし、 `su` または `sudo`\)
* ユーザには `sudo` を使用してコマンドが記録されるようにします。
* 許可されていないログイン試行を記録する \(fail2ban\のように、サーバーに何度もアクセスしようとするユーザーをブロック/禁止するソフトウェアを検討してください)
* SSHをロックし、必要なIPの範囲にのみ接続します（気に入った場合は）。
{% endhint %}

ローカル マシン上に新しい SSH 鍵ペアを作成します。 これをローカルマシンで実行します。 キーを保存するファイル名を入力するように求められます。 これは **キー名** になります。

[ED25519 または RSA](https://goteleport.com/blog/comparing-ssh-keys/) 公開鍵アルゴリズムを選択します。

{% tabs %}
{% tab title="ED25519" %}
```
ssh-keygen -t ed25519
```
{% endtab %}

{% tab title="RSA" %}
```bash
ssh-keygen -t rsa -b 4096
```
{% endtab %}
{% endtabs %}

公開鍵をリモートノードに転送します。 **keyname.pub** を適切に更新する。

```bash
ssh-copy-id -i $HOME/.ssh/keyname.pub eterum@server.public.ip.address
```

新しいイーサリアムユーザーでログイン

```text
ssh etherum@server.public.ip.address
```

rootログインとパスワードベースのログインを無効にします。 `/etc/ssh/sshd_config ファイルを編集します`

```text
sudo nano /etc/ssh/sshd_config
```

**ChallengeResponseAuthentication** を見つけて、いいえに更新します

```text
ChallengeResponseAuthentication no
```

**PasswordAuthentication** の更新プログラムを見つけてください

```text
PasswordAuthentication no
```

**PermitRootLogin** を見つけて、更新しない

```text
PermitRootLogin no
```

PermitEmptyPasswords **** を見つけて、更新しないようにします

```text
PermitEmptyPasswords no
```

**任意の**: **ポート** を探して、 **ランダムな** ポートをカスタマイズします。

{% hint style="info" %}
1024から49141までの **ランダム** ポート\#を使用してください。 [競合の可能性を確認します。 ](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)
{% endhint %}

```bash
ポート <port number>
```

新しい SSH 構成の構文を検証します。

```text
sudo sshd -t
```

構文の検証にエラーがない場合は、SSH プロセスをリロードします

```text
sudo service sshd reload
```

ログインがまだ動作していることを確認します

{% tabs %}
{% tab title="Standard SSH Port 22" %}
```text
ssh etherum@server.public.ip.address
```
{% endtab %}

{% tab title="Custom SSH Port" %}
```bash
ssh etherum@server.public.ip.address -p <custom port number>
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
あるいは、使用する必要がある場合があります。 カスタム SSH ポートを使用する場合は、 `-p <port#>` フラグを追加します。

```bash
ssh -i <path to your SSH_key_name.pub> ethereum@server.public.ip.address
```
{% endhint %}

## 🤖 **システムを更新**

{% hint style="warning" %}
侵入者がシステムにアクセスするのを防ぐために、システムを最新のパッチで最新の状態に保つことは非常に重要です。
{% endhint %}

```bash
sudo apt-get update -y && sudo apt-get upgrade -y
sudo apt-get autoremove
sudo apt-get autoclean
```

自動更新を有効にすると、手動でインストールする必要がなくなります。

```text
sudo apt-get install unattended-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades
```

## 🐻 root アカウントを無効にする

システム管理者はサーバーのセキュリティを維持するために頻繁に root でログインしないでください。 代わりに、低レベルの権限を必要とする sudo の実行を使用できます。

```bash
# root アカウントを無効にするには、単純に -l オプションを使用します。
sudo passwd -l root
```

```bash
# 何らかの正当な理由でアカウントを再度有効にする必要がある場合は、単純に -u オプションを使用します。
sudo passwd -u root
```

## 🛠 SSH の 2 要素認証 \[Optional\] をセットアップ

{% hint style="info" %}
セキュアシェルであるSSHは、リモートLinuxシステムにアクセスするためによく使用されます。 重要なデータを含むコンピュータに接続するためによく使用されるため、別のセキュリティ層を追加することをお勧めします。 ここに二要素認証 \(_2FA_ \) があります。
{% endhint %}

```text
sudo apt install libpam-google-authenticator -y
```

SSH を使用するには、Google Authenticator PAM モジュールを使用します。 `/etc/pam.d/sshd` ファイルを編集します。

```text
sudo nano /etc/pam.d/sshd
```

次の行を追加:

```text
認証が必要です pam_google_authenticator.so
```

次に、 `sshd` デーモンを使用して再起動する必要があります。

```text
sudo systemctl restart sshd.service
```

`/etc/ssh/sshd_config を修正`

```text
sudo nano /etc/ssh/sshd_config
```

**ChallengeResponseAuthentication** を探し、「はい」に更新します

```text
ChallengeResponseAuthentication yes
```

**UsePAM** を見つけて「はい」に更新します

```text
UsePAM はい
```

ファイルを保存して終了します。

**google-authenticator** コマンドを実行します。

```text
google-authenticator
```

一連の質問がありますが、ここでは推奨される設定です:

* トークン「タイムベース」を作成します：はい
* `.google_authenticator` ファイルを更新する: yes
* 複数の使用を許可しない: はい
* 元の生成時間制限を増やします: いいえ
* レート制限を有効にする: はい

プロセス中に現れた巨大なQRコードに気づいたかもしれません。 下には携帯電話にアクセスできない場合に使用する緊急スクラッチコードがあります。紙に書いて安全な場所に保管してください。

今度は、携帯電話でGoogle認証システムを開き、2要素認証を動作させるために秘密鍵を追加します。

{% hint style="danger" %}
**注**: SSH 経由でアクセスするリモートマシンで 2 要素認証を有効にしている場合は、 **このチュートリアル** の [手順 2 と 3](https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-18-04) に従って、2要素認証を機能させる必要があります。
{% endhint %}

## 🧩 セキュア共有メモリ

{% hint style="info" %}
最初にすべきことの1つは、システムで使用されている共有 [メモリ](https://www.lifewire.com/what-is-random-access-memory-ram-2618159) を保護することです。 気づいていない場合は、実行中のサービスに対する攻撃で共有メモリを使用できます。 このため、システムメモリのその部分を確保してください。

セキュアな共有メモリについての詳細は、 [techrepublic.com の記事](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/) をご覧ください。
{% endhint %}

{% hint style="warning" %}
### 1つの例外的なケース

読み取り/書き込みモードでメモリ領域をマウントする必要がある理由があるかもしれません \(例えば、共有メモリやGoogle Chromeのような標準的なアプリケーションへのアクセスを必要とする **DappNode** のような特定のサーバーアプリケーションなど)。 この場合、以下の手順で fstab ファイルに次の行を使用します。

```text
none /run/shm tmpfs rw,noexec,nosuid,nodev 0
```

上記の行は、共有メモリを読み取り/書き込みアクセスでマウントしますが、プログラムを実行する許可なしにマウントします。 実行中のプログラムの UID を変更するか、名前空間でブロックや文字デバイスを作成します。 これは、デフォルト設定よりもネットセキュリティの改善です。

### 注意して使用する

With some trial and error, you may discover some applications\(**like DappNode**\) do not work with shared memory in read-only mode. 最高のセキュリティとアプリケーションと互換性がある場合は、このセキュアな共有メモリ設定を実装する価値があります。

ソース: [techrepublic.com](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/)
{% endhint %}

`/etc/fstab` を編集する

```text
sudo nano /etc/fstab
```

ファイルの一番下に次の行を挿入し、保存/閉じます。 共有メモリを読み取り専用モードに設定します。

```text
tmpfs /run/shm tmpfs ro,noexec,nosuid 0
```

変更を有効にするには、ノードを再起動します。

```text
sudo reboot
```

## ⛓**Fail2ban のインストール**

{% hint style="info" %}
Fail2ban はログファイルを監視し、失敗したログイン試行に対応する特定のパターンを検索する侵入防止システムです。 特定の数の失敗したログインが特定のIPアドレスから検出された場合、 \(指定された時間以内に\) fail2ban はそのIPアドレスからのアクセスをブロックします。
{% endhint %}

```text
sudo apt-get install fail2ban -y
```

SSH ログインを監視する設定ファイルを編集します。

```text
sudo nano /etc/fail2ban/jail.local
```

ファイルの一番下に次の行を追加します。

{% hint style="info" %}
🔥 **IPアドレスヒント**: `ignoreip` パラメータはIPアドレスを受け付けます 接続を許可するIP範囲またはDNSホストを指定できます。 これは、ローカルマシン、ローカルIP範囲、またはローカルドメインをスペースで区切って指定する場所です。

```bash
# 例
ignoreip = 192.168.1.0/24 127.0.0.1/8 
```
{% endhint %}

```bash
[sshd]
enabled = true
port = <22 or your random port number>
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
# whitelisted IP addresses
ignoreip = <list of whitelisted IP address, your local daily laptop/pc>
```

ファイルを保存/閉じる

設定を有効にするには、fail2ban を再起動してください。

```text
sudo systemctl restart fail2ban
```

## 🧱**ファイアウォールを設定**

標準的な UFW ファイアウォールを使用してノードへのネットワークアクセスを制御できます。

新しいインストールでは、ufw はデフォルトで無効になっています。 次の設定で有効にします。

* ポート 22 \(またはランダムポート \#\) SSH 接続のための TCP
* p2p トラフィックのポート
  * 灯台はポート9000tcp/udpを使用しています
  * Tekuはポート 9000 tcp/udp を使用しています
  * Prysmはポート 13000 tcpとポート 12000 udpを使用しています
  * Nimbus はポート 9000 tcp/udp を使用しています
  * ロデスタルはポート30607 tcpとポート9000udpを使用しています
* ポート 30303 tcp/udp eth1 ノード
* Grafana の 3,000 tcp ポート
* Prometheusエクスポートデータのポート9090 tcp（任意）

{% tabs %}
{% tab title="Lighthouse" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status number@@7
```
{% endtab %}

{% tab title="Prysm" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 13000/tcp
sudo ufw allow 12000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status number@@7
```
{% endtab %}

{% tab title="Teku" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status number@@7
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status number@@7
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 30607/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status number@@7 sudo ufw number
```
{% endtab %}
{% endtabs %}

{% hint style="danger" %}
Grafana \(ポート 3000\)とPrometheus endpoint \(ポート 9090\\)をパブリックインターネットに公開しないでください。 安全な解決策は、Wireguardでsshトンネルを介してGrafanaにアクセスすることです。
{% endhint %}

ホームルータのファイアウォールまたは他のネットワークファイアウォールの背後にあるローカルホームステーキングセットアップで、次のポートのみを開きます。

\*\*\*\*🔥 **VPS/クラウドノードでこれらのポートを開くのは危険です。**

```bash
sudo ufw allow 3000/tcp
sudo ufw allow 9090/tcp
```

設定が有効であることを確認します。
> ```csharp
     To                         Action      From
     --                         ------      ----
[ 1] 22/tcp                     ALLOW IN    Anywhere
# SSH
[ 2] 3000/tcp                   ALLOW IN    Anywhere
# Grafana
[ 3] 9000/tcp                   ALLOW IN    Anywhere
# eth2 p2p traffic
[ 4] 9090/tcp                   ALLOW IN    Anywhere
# Prometheus
[ 5] 30303/tcp                  ALLOW IN    Anywhere
# eth1 node
[ 6] 22/tcp (v6)                ALLOW IN    Anywhere (v6)
# SSH
[ 7] 3000/tcp (v6)              ALLOW IN    Anywhere (v6)
# Grafana
[ 8] 9000/tcp (v6)              ALLOW IN    Anywhere (v6)
# eth2 p2p traffic
[ 9] 9090/tcp (v6)              ALLOW IN    Anywhere (v6)
# Prometheus
[10] 30303/tcp (v6)             ALLOW IN    Anywhere (v6)
# eth1 node
```

**\[ 任意で推奨される \]** \(または特定のIPからの接続を許可する) ホワイトリストは以下のコマンドで設定することができます。

```bash
sudo ufw allow from <your local daily laptop/pc>
# Example
# sudo ufw allow from 192.168.50.22
```

{% hint style="info" %}
 🎊 **ポート転送のヒント:** ポートをバリデータに転送して開く必要があります。 [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) または [https://canyouseeme.org/](https://canyouseeme.org/) で動作していることを確認してください。
{% endhint %}

## 📞 リスニングポートを確認

安全なサーバーを維持したい場合は、たまにリスニングネットワークポートを検証する必要があります。 これにより、ネットワークに関する重要な情報が提供されます。

```bash
sudo ss -tulpn
# 出力の例。 ポート番号が正しく見えることを確認します。
# Netid  State    Recv-Q  Send-Q    Local Address:Port   Peer Address:Port   Process
# tcp    LISTEN   0       128       127.0.0.1:5052       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=22))
# tcp    LISTEN   0       128       127.0.0.1:5054       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=23))
# tcp    LISTEN   0       1024      0.0.0.0:9000         0.0.0.0:*           users:(("lighthouse",pid=12160,fd=21))
# udp    UNCONN   0       0         *:30303              *:*                 users:(("geth",pid=22117,fd=158))
# tcp    LISTEN   0       4096      *:30303              *:*                 users:(("geth",pid=22117,fd=156))
```

`netstat` を使用することもできます。

```bash
sudo netstat -tulpn
# 出力例。 ポート番号が正しく見えることを確認します。
# Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
# tcp        0      0 127.0.0.1:5052          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 127.0.0.1:5054          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      12160/lighthouse
# tcp6       0      0 :::30303                :::*                    LISTEN      22117/geth
# udp6       0      0 :::30303                :::*                    LISTEN      22117/geth
```

## 👩🚀 **** システムユーザーアカウントを使用する - 少なくとも特権の原理 \[上級ユーザー/オプション\]

{% hint style="info" %}
**上級ユーザーのみに推奨します**

**最小特権の原則**: 各eth2プロセスには _システムユーザーアカウント_ が割り当てられ、機能するために必要な最小限の権限で実行されます。 このベストプラクティスは、特定のプロセスで発見された脆弱性やエクスプロイトによって他のシステムプロセスにアクセスできる可能性があるシナリオから保護します。
{% endhint %}

```bash
# creates system user account for eth1 service
sudo adduser --system -no-create-home eth1

# creates system user account for validator service
sudo adduser --system -no-create-home validator

# creates system user account for beacon-chain service
sudo adduser ---no-create-home beacon-chain

# creates system user account for slasher
sudo adduser ---no-create-home slasher
```

{% hint style="danger" %}
\*\*\*🔥 **上級ユーザーへの注意**

**システムユーザー アカウント**を使用することにした場合は、 **systemd ユニット ファイル** を対応するユーザーに置き換えることを忘れないでください。

```bash
# beacon-chain.service unit file
User = beacon-chain
```

さらに、該当する場合は **システムユーザアカウント** に正しい **ファイル所有権** が割り当てられていることを確認してください。

```bash
# prysm バリデータのパスワードファイルの例
sudo chown validator:validator -R $HOME/.eth2validators/validators-password.txt
```
{% endhint %}

## ✨ 追加のバリデータノードのベストプラクティス

<table>
  <thead>
    <tr>
      <th style="text-align:left"></th>
      <th style="text-align:left"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align:left">ネットワーク</td>
      <td style="text-align:left">
        <p></p>
        <p>静的内部IPをバリデータノードとデイリーノートパソコンの両方に割り当てます。
          これは、ufw および Fail2ban&apos;のホワイトリスト
          機能と組み合わせて便利です。 通常、これはルーター&apos;の設定で設定できます。
          手順については、ルーター&apos;のマニュアルを参照してください。</p>
      </td>
    </tr>
    <tr>
      <td style="text-align:left">停電状態</td>
      <td style="text-align:left">停電の場合は、電源が利用可能になったらすぐに
        バリデーターマシンを再起動する必要があります。 BIOS 設定で、 <b>Restore on AC / Power Loss</b> または <b>After Power Loss</b> 設定
        を常にオンに変更します。 もっと良いことに、無停電電源装置(UPS)を設置してください。</td>
    </tr>
    <tr>
      <td style="text-align:left">Bash 履歴を消去</td>
      <td style="text-align:left">
        <p>上矢印キーを押すと、
          の機密データを含むコマンドが表示されます。 これをクリアするには、以下を実行します。</p>
        <p><code>shred -u ~/.bash_history &amp;&amp; touch ~/.bash_history</code>
        </p>
      </td>
    </tr>
  </tbody>
</table>

{% hint style="info" %}
必ず [チェックリスト\| 健全な機能ETH2バリデータを確認する方法を確認してください。](guide-or-how-to-setup-a-validator-on-eth2-mainnet/checklist-or-how-to-confirm-a-healthy-functional-eth2-validator.md)
{% endhint %}

## 🤖 バリデータを作成してステークを開始

### 私たちの [メインネットガイド](guide-or-how-to-setup-a-validator-on-eth2-mainnet/) 、 [テストネットガイド](guide-or-how-to-setup-a-validator-on-eth2-testnet.md)についてはこちらをご覧ください。

{% hint style="success" %}
おめでとうございます。ガイドが完成しました。 ✨

私たちのガイドが役に立ちましたか？ ヒント付きのシグナルを送信してください。アップデートを続けます。

最高の暗号ガイドを作成し続けることは、本当に私たちに力を与えてくれます。

[coint.eeを使用して、寄付 ](https://cointr.ee/coincashew)アドレスを見つけてください。 🙏

どんなフィードバックとすべてのプルリクエストは非常に高く評価されます。 🌛

Discordで仲間のステーカーとチャットしましょう @

[https://discord.gg/w8Bx8W2HPW](https://discord.gg/w8Bx8W2HPW)😃
{% endhint %}

🎊 **2020-12 Update**: Thanks to all [Gitcoin](https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew) contributors, where you can contribute via [quadratic funding](https://vitalik.ca/general/2019/12/07/quadratic.html) and make a big impact. 資金調達完了！ ありがとうございます!🙏

{% embed url="https://gitcoin.co/grants/1653/eth2-staking-guides-by-constashew" %}

## 🚀 参照

{% embed url="https://medium.com/@BaneBiddix/how-to-harden-your-ubuntu-18-04-server-ffc4b6658fe7" caption="" %}

{% embed url="https://linux-audit.com/ubuntu-server-hardening-guide-quick-and-secure/" caption="" %}

{% embed url="https://www.digitalocean.com/community/tutorials/how-to-harden-openssh-on-ubuntu-18-04" caption="" %}

{% embed url="https://ubuntu.com/tutorials/configure-ssh-2fa\#1-overview" caption="" %}

{% embed url="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/" %}

[https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3\#file-ubuntu-hardening-md](https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3#file-ubuntu-hardening-md)

{% embed url="https://www.lifewire.com/harden-ubuntu-server-security-4178243" caption="" %}

{% embed url="https://www.ubuntupit.com/best-linux-hardening-security-tips-a-compreverive-checklist/" caption="" %}

