---
description: ノードを保護するためのクイックステップです。
---

# ガイド \| ETH2検証用ビーコンチェーンノードのセキュリティベストプラクティスについて

## 🤖 事前要件

* Ubuntu Server または Ubuntu Desktop がインストールされました
* SSHサーバーがインストールされました
* SSHクライアントまたはターミナルウィンドウへのアクセス

SSH サーバーをインストールする必要がある場合は、以下を参照してください:

{% embed url="https://www.simplicified.guide/ubuntu/install-ssh-server" %}

お使いのオペレーティングシステムにSSHクライアントが必要な場合は、以下を参照してください:

{% embed url="https://www.howto-to-an-ssh-server-from-windows-or-linux/" %}

## 🧙♂sudo 権限を持つ非 root ユーザーを作成

{% hint style="info" %}
非 root アカウントを使用してサーバーにログインする習慣を作ってください。 これは間違いを犯した場合、ファイルの誤って削除を防ぐことができます。 例えば、コマンド `rm` は、rootユーザーが間違って実行した場合、サーバー全体を消去することができます。
{% endhint %}

{% hint style="danger" %}
🔥**ヒント**: root アカウントを日常的に使用しないでください。 `su` または `sudo`を常に使用してください。
{% endhint %}

SSH クライアントを使用してサーバーに SSH

```bash
ssh username@server.public.ip.address
# example
# ssh myUsername@77.22.161.10
```

イーサリアムという新しいユーザーを作成

```text
sudo useradd -m -s /bin/bash eterium
```

イーサリアムユーザーのパスワードを設定する

```text
sudo passwd ethereum
```

sudoグループにイーサリアムを追加

```text
sudo usermod -aG sudo ethereum
```

## 🔐 **SSHパスワード認証を無効にし、SSHキーのみを使用する**

{% hint style="info" %}
SSHを硬化する基本的なルールは次のとおりです。

* SSH アクセスのためのパスワードがありません（秘密鍵を使用してください）。
* root から SSH にアクセスすることはできません (適切なユーザーは SSH にアクセスし、 `su` または `sudo`\)
* ユーザには `sudo` を使用してコマンドが記録されるようにします。
* 許可されていないログイン試行を記録する \(fail2ban\のように、サーバーに何度もアクセスしようとするユーザーをブロック/禁止するソフトウェアを検討してください)
* SSHをロックし、必要なIPの範囲にのみ接続します（気に入った場合は）。
{% endhint %}

ローカル マシン上に新しい SSH 鍵ペアを作成します。 これをローカルマシンで実行します。 キーを保存するファイル名を入力するように求められます。 これは **キー名** になります。

[ED25519 または RSA](https://goteleport.com/blog/comparing-ssh-keys/) 公開鍵アルゴリズムを選択します。

{% tabs %}
{% tab title="ED25519" %}
```
ssh-keygen -t ed25519
```
{% endtab %}

{% tab title="RSA" %}
```bash
ssh-keygen -t rsa -b 4096
```
{% endtab %}
{% endtabs %}

公開鍵をリモートノードに転送します。 **keyname.pub** を適切に更新する。

```bash
ssh-copy-id -i $HOME/.ssh/keyname.pub eterum@server.public.ip.address
```

新しいイーサリアムユーザーでログイン

```text
ssh etherum@server.public.ip.address
```

rootログインとパスワードベースのログインを無効にします。 `/etc/ssh/sshd_config ファイルを編集します`

```text
sudo nano /etc/ssh/sshd_config
```

**ChallengeResponseAuthentication** を見つけて、いいえに更新します

```text
ChallengeResponseAuthentication no
```

**PasswordAuthentication** の更新プログラムを見つけてください

```text
PasswordAuthentication no
```

**PermitRootLogin** を見つけて、更新しない

```text
PermitRootLogin no
```

PermitEmptyPasswords **** を見つけて、更新しないようにします

```text
PermitEmptyPasswords no
```

**任意の**: **ポート** を探して、 **ランダムな** ポートをカスタマイズします。

{% hint style="info" %}
1024から49141までの **ランダム** ポート\#を使用してください。 [競合の可能性を確認します。 ](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)
{% endhint %}

```bash
ポート <port number>
```

新しい SSH 構成の構文を検証します。

```text
sudo sshd -t
```

構文の検証にエラーがない場合は、SSH プロセスをリロードします

```text
sudo service sshd reload
```

ログインがまだ動作していることを確認します

{% tabs %}
{% tab title="Standard SSH Port 22" %}
```text
ssh etherum@server.public.ip.address
```
{% endtab %}

{% tab title="Custom SSH Port" %}
```bash
ssh etherum@server.public.ip.address -p <custom port number>
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
Alternatively, you might need to add the `-p <port#>` flag if you used a custom SSH port.

```bash
ssh -i <path to your SSH_key_name.pub> ethereum@server.public.ip.address
```
{% endhint %}

**Optional**: Make logging in easier by updating your local ssh config.

To simplify the ssh command needed to log in to your server, consider updating your local `$HOME/.ssh/config` file:

```bash
Host ethereum-server
  User ethereum
  HostName <server.public.ip.address>
  Port <custom port number>
```

This will allow you to log in with `ssh ethereum-server` rather than needing to pass through all ssh parameters explicitly.

## 🤖 **Update your system**

{% hint style="warning" %}
It's critically important to keep your system up-to-date with the latest patches to prevent intruders from accessing your system.
{% endhint %}

```bash
sudo apt-get update -y && sudo apt-get upgrade -y
sudo apt-get autoremove
sudo apt-get autoclean
```

Enable automatic updates so you don't have to manually install them.

```text
sudo apt-get install unattended-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades
```

## 🐻 Disable root account

System admins should not frequently log in as root in order to maintain server security. Instead, you can use sudo execute that require low-level privileges.

```bash
# To disable the root account, simply use the -l option.
sudo passwd -l root
```

```bash
# If for some valid reason you need to re-enable the account, simply use the -u option.
sudo passwd -u root
```

## 🛠 Setup Two Factor Authentication for SSH \[Optional\]

{% hint style="info" %}
SSH, the secure shell, is often used to access remote Linux systems. Because we often use it to connect with computers containing important data, it’s recommended to add another security layer. Here comes the two factor authentication \(_2FA_\).
{% endhint %}

```text
sudo apt install libpam-google-authenticator -y
```

To make SSH use the Google Authenticator PAM module, edit the `/etc/pam.d/sshd` file:

```text
sudo nano /etc/pam.d/sshd
```

Add the following line:

```text
auth required pam_google_authenticator.so
```

Now you need to restart the `sshd` daemon using:

```text
sudo systemctl restart sshd.service
```

Modify `/etc/ssh/sshd_config`

```text
sudo nano /etc/ssh/sshd_config
```

Locate **ChallengeResponseAuthentication** and update to yes

```text
ChallengeResponseAuthentication yes
```

Locate **UsePAM** and update to yes

```text
UsePAM yes
```

Save the file and exit.

Run the **google-authenticator** command.

```text
google-authenticator
```

It will ask you a series of questions, here is a recommended configuration:

* トークン「タイムベース」を作成します：はい
* `.google_authenticator` ファイルを更新する: yes
* 複数の使用を許可しない: はい
* 元の生成時間制限を増やします: いいえ
* レート制限を有効にする: はい

You may have noticed the giant QR code that appeared during the process, underneath are your emergency scratch codes to be used if you don’t have access to your phone: write them down on paper and keep them in a safe place.

Now, open Google Authenticator on your phone and add your secret key to make two factor authentication work.

{% hint style="danger" %}
**Note**: If you are enabling 2FA on a remote machine that you access over SSH you need to follow **steps 2 and 3** of [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-18-04) to make 2FA work.
{% endhint %}

## 🧩 Secure Shared Memory

{% hint style="info" %}
One of the first things you should do is secure the shared [memory](https://www.lifewire.com/what-is-random-access-memory-ram-2618159) used on the system. If you're unaware, shared memory can be used in an attack against a running service. Because of this, secure that portion of system memory.

To learn more about secure shared memory, read this [techrepublic.com article](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/).
{% endhint %}

{% hint style="warning" %}
### 1つの例外的なケース

There may be a reason for you needing to have that memory space mounted in read/write mode \(such as a specific server application like **DappNode** that requires such access to the shared memory or standard applications like Google Chrome\). In this case, use the following line for the fstab file with instructions below.

```text
none /run/shm tmpfs rw,noexec,nosuid,nodev 0 0
```

The above line will mount the shared memory with read/write access but without permission to execute programs, change the UID of running programs, or to create block or character devices in the namespace. This a net security improvement over default settings.

### 注意して使用する

With some trial and error, you may discover some applications\(**like DappNode**\) do not work with shared memory in read-only mode. For the highest security and if compatible with your applications, it is a worthwhile endeavor to implement this secure shared memory setting.

Source: [techrepublic.com](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/)
{% endhint %}

Edit `/etc/fstab`

```text
sudo nano /etc/fstab
```

Insert the following line to the bottom of the file and save/close. This sets shared memory into read-only mode.

```text
tmpfs    /run/shm    tmpfs    ro,noexec,nosuid    0 0
```

Reboot the node in order for changes to take effect.

```text
sudo reboot
```

## ⛓**Install Fail2ban**

{% hint style="info" %}
Fail2ban is an intrusion-prevention system that monitors log files and searches for particular patterns that correspond to a failed login attempt. If a certain number of failed logins are detected from a specific IP address \(within a specified amount of time\), fail2ban blocks access from that IP address.
{% endhint %}

```text
sudo apt-get install fail2ban -y
```

Edit a config file that monitors SSH logins.

```text
sudo nano /etc/fail2ban/jail.local
```

Add the following lines to the bottom of the file.

{% hint style="info" %}
🔥 **Whitelisting IP address tip**: The `ignoreip` parameter accepts IP addresses, IP ranges or DNS hosts that you can specify to be allowed to connect. This is where you want to specify your local machine, local IP range or local domain, separated by spaces.

```bash
# Example
ignoreip = 192.168.1.0/24 127.0.0.1/8 
```
{% endhint %}

```bash
[sshd]
enabled = true
port = <22 or your random port number>
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
# whitelisted IP addresses
ignoreip = <list of whitelisted IP address, your local daily laptop/pc>
```

Save/close file.

Restart fail2ban for settings to take effect.

```text
sudo systemctl restart fail2ban
```

## 🧱**Configure your Firewall**

The standard UFW firewall can be used to control network access to your node.

With any new installation, ufw is disabled by default. Enable it with the following settings.

* ポート 22 \(またはランダムポート \#\) SSH 接続のための TCP
* p2p トラフィックのポート
  * 灯台はポート9000tcp/udpを使用しています
  * Tekuはポート 9000 tcp/udp を使用しています
  * Prysmはポート 13000 tcpとポート 12000 udpを使用しています
  * Nimbus はポート 9000 tcp/udp を使用しています
  * ロデスタルはポート30607 tcpとポート9000udpを使用しています
* ポート 30303 tcp/udp eth1 ノード

{% tabs %}
{% tab title="Lighthouse" %}
```bash
# By default, deny all incoming and outgoing traffic
sudo ufw default deny incoming
sudo ufw default allow outgoing
# Allow ssh access
sudo ufw allow ssh #<port 22 or your random ssh port number>/tcp
# Allow p2p ports
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
# Allow eth1 port
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
# Enable firewall
sudo ufw enable
# Verify status
sudo ufw status numbered
```
{% endtab %}

{% tab title="Prysm" %}
```bash
# By default, deny all incoming and outgoing traffic
sudo ufw default deny incoming
sudo ufw default allow outgoing
# Allow ssh access
sudo ufw allow ssh #<port 22 or your random ssh port number>/tcp
# Allow p2p ports
sudo ufw allow 13000/tcp
sudo ufw allow 12000/udp
# Allow eth1 port
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
# Enable firewall
sudo ufw enable
# Verify status
sudo ufw status numbered
```
{% endtab %}

{% tab title="Teku" %}
```bash
# By default, deny all incoming and outgoing traffic
sudo ufw default deny incoming
sudo ufw default allow outgoing
# Allow ssh access
sudo ufw allow ssh #<port 22 or your random ssh port number>/tcp
# Allow p2p ports
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
# Allow eth1 port
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
# Enable firewall
sudo ufw enable
# Verify status
sudo ufw status numbered
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
# By default, deny all incoming and outgoing traffic
sudo ufw default deny incoming
sudo ufw default allow outgoing
# Allow ssh access
sudo ufw allow ssh #<port 22 or your random ssh port number>/tcp
# Allow p2p ports
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
# Allow eth1 port
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
# Enable firewall
sudo ufw enable
# Verify status
sudo ufw status numbered
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
# By default, deny all incoming and outgoing traffic
sudo ufw default deny incoming
sudo ufw default allow outgoing
# Allow ssh access
sudo ufw allow ssh #<port 22 or your random ssh port number>/tcp
# Allow p2p ports
sudo ufw allow 30607/tcp
sudo ufw allow 9000/udp
# Allow eth1 port
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
# Enable firewall
sudo ufw enable
# Verify status
sudo ufw status numbered
```
{% endtab %}
{% endtabs %}

{% hint style="danger" %}
Do not expose Grafana \(port 3000\) and Prometheus endpoint \(port 9090\) to the public internet as this invites a new attack surface! A secure solution would be to access Grafana through a ssh tunnel with Wireguard.
{% endhint %}

Only open the following ports on local home staking setups behind a home router firewall or other network firewall.

\*\*\*\*🔥 **It is dangerous to open these ports on a VPS/cloud node.**

```bash
# Allow grafana web server port
sudo ufw allow 3000/tcp
# Enable prometheus endpoint port
sudo ufw allow 9090/tcp
```

Confirm the settings are in effect.
> ```csharp
# Verify status
sudo ufw status numbered
     To                         Action      From
     --                         ------      ----
[ 1] 22/tcp                     ALLOW IN    Anywhere
# SSH
[ 2] 3000/tcp                   ALLOW IN    Anywhere
# Grafana
[ 3] 9000/tcp                   ALLOW IN    Anywhere
# eth2 p2p traffic
[ 4] 9090/tcp                   ALLOW IN    Anywhere
# Prometheus
[ 5] 30303/tcp                  ALLOW IN    Anywhere
# eth1 node
[ 6] 22/tcp (v6)                ALLOW IN    Anywhere (v6)
# SSH
[ 7] 3000/tcp (v6)              ALLOW IN    Anywhere (v6)
# Grafana
[ 8] 9000/tcp (v6)              ALLOW IN    Anywhere (v6)
# eth2 p2p traffic
[ 9] 9090/tcp (v6)              ALLOW IN    Anywhere (v6)
# Prometheus
[10] 30303/tcp (v6)             ALLOW IN    Anywhere (v6)
# eth1 node
```

**\[ Optional but recommended \]** Whitelisting \(or permitting connections from a specific IP\) can be setup via the following command.

```bash
sudo ufw allow from <your local daily laptop/pc>
# Example
# sudo ufw allow from 192.168.50.22
```

{% hint style="info" %}
 🎊 **Port Forwarding Tip:** You'll need to forward and open ports to your validator. [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) または [https://canyouseeme.org/](https://canyouseeme.org/) で動作していることを確認してください。
{% endhint %}

## 📞 Verify Listening Ports

If you want to maintain a secure server, you should validate the listening network ports every once in a while. This will provide you essential information about your network.

```bash
sudo ss -tulpn
# Example output. ポート番号が正しく見えることを確認します。
# Netid  State    Recv-Q  Send-Q    Local Address:Port   Peer Address:Port   Process
# tcp    LISTEN   0       128       127.0.0.1:5052       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=22))
# tcp    LISTEN   0       128       127.0.0.1:5054       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=23))
# tcp    LISTEN   0       1024      0.0.0.0:9000         0.0.0.0:*           users:(("lighthouse",pid=12160,fd=21))
# udp    UNCONN   0       0         *:30303              *:*                 users:(("geth",pid=22117,fd=158))
# tcp    LISTEN   0       4096      *:30303              *:*                 users:(("geth",pid=22117,fd=156))
```

Alternatively you can use `netstat`

```bash
sudo netstat -tulpn
# Example output. ポート番号が正しく見えることを確認します。
# Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
# tcp        0      0 127.0.0.1:5052          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 127.0.0.1:5054          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      12160/lighthouse
# tcp6       0      0 :::30303                :::*                    LISTEN      22117/geth
# udp6       0      0 :::30303                :::*                    LISTEN      22117/geth
```

## 👩🚀 **Use** system user accounts - Principle of Least Privilege \[Advanced Users / Optional\]

{% hint style="info" %}
**Recommended for Advanced Users Only**

**Principle of Least Privilege**: Each eth2 process is assigned a _system user account_ and runs under the least amount of privileges required in order to function. This best practice protects against a scenario where a vulnerability or exploit discovered in a specific process might enable access other system processes.
{% endhint %}

```bash
# creates system user account for eth1 service
sudo adduser --system --no-create-home eth1

# creates system user account for validator service
sudo adduser --system --no-create-home validator

# creates system user account for beacon-chain service
sudo adduser --system --no-create-home beacon-chain

# creates system user account for slasher
sudo adduser --system --no-create-home slasher
```

{% hint style="danger" %}
\*\*\*\*🔥 **Caveats For Advanced Users**

If you decide to use **system user accounts**, remember to replace the **systemd unit files** with the corresponding users.

```bash
# Example of beacon-chain.service unit file
User            = beacon-chain
```

Furthermore, ensure the correct **file ownership** is assigned to your **system user account** where applicable.

```bash
# Example of prysm validator's password file
sudo chown validator:validator -R $HOME/.eth2validators/validators-password.txt
```
{% endhint %}

## ✨ Additional validator node best practices

<table>
  <thead>
    <tr>
      <th style="text-align:left"></th>
      <th style="text-align:left"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align:left">ネットワーク</td>
      <td style="text-align:left">
        <p></p>
        <p>静的内部IPをバリデータノードとデイリーノートパソコンの両方に割り当てます。
          これは、ufw および Fail2ban&apos;のホワイトリスト
          機能と組み合わせて便利です。 通常、これはルーター&apos;の設定で設定できます。
          手順については、ルーター&apos;のマニュアルを参照してください。</p>
      </td>
    </tr>
    <tr>
      <td style="text-align:left">停電状態</td>
      <td style="text-align:left">停電の場合は、電源が利用可能になったらすぐに
        バリデーターマシンを再起動する必要があります。 BIOS 設定で、 <b>Restore on AC / Power Loss</b> または <b>After Power Loss</b> 設定
        を常にオンに変更します。 もっと良いことに、無停電電源装置(UPS)を設置してください。</td>
    </tr>
    <tr>
      <td style="text-align:left">Bash 履歴を消去</td>
      <td style="text-align:left">
        <p>上矢印キーを押すと、
          の機密データを含むコマンドが表示されます。 これをクリアするには、以下を実行します。</p>
        <p><code>shred -u ~/.bash_history &amp;&amp; touch ~/.bash_history</code>
        </p>
      </td>
    </tr>
  </tbody>
</table>

{% hint style="info" %}
必ず [チェックリスト\| 健全な機能ETH2バリデータを確認する方法を確認してください。](guide-or-how-to-setup-a-validator-on-eth2-mainnet/checklist-or-how-to-confirm-a-healthy-functional-eth2-validator.md)
{% endhint %}

## 🤖 Start staking by building a validator

### 私たちの [メインネットガイド](guide-or-how-to-setup-a-validator-on-eth2-mainnet/) 、 [テストネットガイド](guide-or-how-to-setup-a-validator-on-eth2-testnet.md)についてはこちらをご覧ください。

{% hint style="success" %}
おめでとうございます。ガイドが完成しました。 ✨

私たちのガイドが役に立ちましたか？ ヒント付きのシグナルを送信してください。アップデートを続けます。

最高の暗号ガイドを作成し続けることは、本当に私たちに力を与えてくれます。

[coint.eeを使用して、寄付 ](https://cointr.ee/coincashew)アドレスを見つけてください。 🙏

どんなフィードバックとすべてのプルリクエストは非常に高く評価されます。 🌛

Discordで仲間のステーカーとチャットしましょう @

[https://discord.gg/w8Bx8W2HPW](https://discord.gg/w8Bx8W2HPW)😃
{% endhint %}

🎊 **2020-12 Update**: Thanks to all [Gitcoin](https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew) contributors, where you can contribute via [quadratic funding](https://vitalik.ca/general/2019/12/07/quadratic.html) and make a big impact. 資金調達完了！ ありがとうございます!🙏

{% embed url="https://gitcoin.co/grants/1653/eth2-staking-guides-by-constashew" %}

## 🚀 References

{% embed url="https://medium.com/@BaneBiddix/how-to-harden-your-ubuntu-18-04-server-ffc4b6658fe7" caption="" %}

{% embed url="https://linux-audit.com/ubuntu-server-hardening-guide-quick-and-secure/" caption="" %}

{% embed url="https://www.digitalocean.com/community/tutorials/how-to-harden-openssh-on-ubuntu-18-04" caption="" %}

{% embed url="https://ubuntu.com/tutorials/configure-ssh-2fa\#1-overview" caption="" %}

{% embed url="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/" %}

[https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3\#file-ubuntu-hardening-md](https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3#file-ubuntu-hardening-md)

{% embed url="https://www.lifewire.com/harden-ubuntu-server-security-4178243" caption="" %}

{% embed url="https://www.ubuntupit.com/best-linux-hardening-security-tips-a-comprehensive-checklist/" caption="" %}

