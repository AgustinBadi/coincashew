---
description: >-
  Torne-se um validador e ajude a proteger eth2, uma blockchain proof-of-stake Qualquer um com 32 ETH pode entrar.
---

# Guia: Como fazer staking no Mantenedor ETH2 com Prysm no Ubuntu

{% hint style="danger" %}
**Atualização de Novembro 24 2020**: O [novo guia principal está localizado aqui](guide-or-how-to-setup-a-validator-on-eth2-mainnet/).

As instruções abaixo estão agora obsoletas e apenas para referência.
{% endhint %}











{% hint style="info" %}
[Prysm](https://github.com/prysmaticlabs/prysm) é uma implementação Go do protocolo Ethereum 2.0 com foco na usabilidade, segurança e confiabilidade. Prysm é desenvolvido pelo [Laboratório Prysmático](https://prysmaticlabs.com/), uma empresa com o único foco no desenvolvimento de seu cliente. Prysm é escrito em Go e lançado sob uma licença GPL-3.0.
{% endhint %}

## 🏁 0. Pré-requisitos

### 👩💻 Habilidades para operar um validador eth2 e um nó de farol

Como um validador para eth2, você normalmente terá as seguintes habilidades:

* conhecimento operacional de como configurar, executar e manter um nó eth2 e validador continuamente
* um compromisso de manter seu validador 24/7/365
* habilidades básicas do sistema operacional
* aprendeu o essencial ao ver ['Intro a Eth2 & Staking for Beginners' by Superphiz](https://www.youtube.com/watch?v=tpkpW031RCI)
* foram aprovados ou estão ativamente matriculados no [Curso do Estudo Eth2 Master](https://ethereumstudymaster.com/)
* e ter lido [8 Coisas Todos os validadores do Eth2 devem saber.](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

### 🎗 **Requisitos mínimos de configuração**

* **Sistema operacional:** 64-bit Linux \(por exemplo, Ubuntu 20.04 LTS\)
* **Processador:** ual core CPU, Intel Core i5–760 ou AMD FX-8100 ou melhor
* **Memory:** 8GB RAM
* **Armazenamento:** 20GB de SSD
* **Internet:** Conexão de Internet de banda larga com velocidades de pelo menos 1 Mbps.
* **Poder:** Energia elétrica confiável.
* **Saldo ETH:** pelo menos 32 ETH e alguns ETH pelas taxas de transação de depósito
* **Carteira**: Metamask instalado

### :person_elevando_pesos:♂ Configuração de hardware recomendada

* **Sistema operacional:** 64-bit Linux \(por exemplo, Ubuntu 20.04 LTS\)
* **Processador:** Quad core CPU, Intel Core i7–4770 ou AMD FX-8310 ou superior
* **Memória:** 16 GB de RAM ou mais
* **Armazenamento:** 1TB SSD ou mais
* **Internet:** Conexões à Internet de banda larga com velocidades de pelo menos 10 Mbps
* **Poder:** Confiabilidade de energia elétrica com fonte ininterrupta \(UPS\)
* **Saldo ETH:** pelo menos 32 ETH e alguns ETH pelas taxas de transação de depósito
* **Carteira**: Metamask instalado

{% hint style="warning" %}
✨ **Dica do Pro Validator**: altamente recomendável começar com uma nova instância de SO, VM e/ou máquina. Evite dores de cabeça NÃO reutilizando chaves de testnet ou bancos de dados para seu validador mainnet.
{% endhint %}

### :desbloqueado: Validador de Melhores Práticas de Segurança Recomendadas

Se precisar de ideias ou um lembrete sobre como proteger seu validador, consulte

{% page-ref page="guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md" %}

### 🛠 Setup Ubuntu

Se você precisar instalar o Ubuntu, consulte

{% page-ref page="../overview-xtz/guide-how-to-setup-a-baker/install-ubuntu.md" %}

### 🎭 Configuração de Metamask

Se você precisar instalar o Metamask, consulte

{% page-ref page="../../wallets/browser-wallets/metamask-ethereum.md" %}

## 🌱 1. Compre/troca ou consolidação ETH

{% hint style="info" %}
Cada 32 ETH que você possui permite que você faça 1 validador. Você pode executar milhares de validadores com o seu nó de sinalizador.
{% endhint %}

Seu ETH \(ou múltiplos de 32 ETH\) devem ser consolidados em um único endereço acessível com Metamask.

Se você precisar comprar/trocar ou recarregar seu ETH para vários de 32, confira:

{% page-ref page="guide-how-to-buy-eth.md" %}

## 👩💻 2. Cadastre-se para ser um validador no Launchpad

1. Instale as dependências, a ferramenta de depósito da Fundação ethereum e gere seus dois conjuntos de pares chave.

{% hint style="info" %}
Cada validador terá dois conjuntos de pares de chaves. Uma **assinar a chave** e uma **chave de retirada.** Essas chaves são derivadas de uma única frase mnemônica. [Saiba mais sobre chaves.](https://blog.ethereum.org/2020/05/21/keys/)
{% endhint %}

Você tem a opção de baixar a ferramenta de depósito da [ethereum foundation pré-construída](https://github.com/ethereum/eth2.0-deposit-cli) ou construí-la a partir da fonte.

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
Baixe eth2deposit-cli.

```bash
cd $HOME
wget https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.0.0/eth2deposit-cli-9310de0-linux-amd64.tar.gz
```

Verifique se o SHA256 Checksum corresponde ao checksum na [página de lançamentos](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.0.0).

```bash
sha256sum eth2deposit-cli-9310de0-linux-amd64.tar.gz 
# SHA256 deve ser
# b09da136895a7f77a4b430924ea2ae5827fa47b2bf444c4ea6fcfac5b04b8c8a
```

Extraia o arquivo.

```text
tar -xvf eth2deposit-cli-9310de0-linux-amd64.tar.gz
cd eth2deposit-cli-9310de0-linux-amd64
```

Faça um novo mnemônico.

```text
./depósito novo-mnemônico --chain mainnet
```
{% endtab %}

{% tab title="Build from source code" %}
Instalar dependências.

```text
sudo apt update
sudo apt install python3-pip git -y
```

Baixe o código-fonte e instale.

```text
mkdir ~/git
cd ~/git
git clone https://github.com/ethereum/eth2.0-deposit-cli.git
cd eth2.0-deposit-cli
sudo ./deposit.sh install
```

Faça um novo mnemônico.

```text
./deposit.sh novo-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
🔥**\[ Optional \] Pro Security Tip**: Run the eth2deposit-cli tool and generate your **mnemonic seed** for your validator keys on an **air-gapped offline machine**.

Você pode copiar por meio de uma chave USB os binários do eth2deposit-cli pré-construído de uma máquina online para uma máquina offline destacada.

* Protege contra ataques de registro de chaves, ataques baseados em malware/vírus e outros firewall ou exploradores de segurança.
* fisicamente isolado do resto da sua rede.
* Não é possível ter uma conexão de rede, com fio ou sem fio.
* Não é uma VM em uma máquina com conexão à rede.
* Saiba mais sobre [aerotanque no wikipedia](https://en.wikipedia.org/wiki/Air_gap_%28networking%29).
{% endhint %}
{% endtab %}
{% endtabs %}

1. Siga as instruções e escolha uma senha. Anote seu mnemônico e mantenha seguro e **offline**.
2. Siga as etapas em [https://launchpad.ethereum.org/](https://launchpad.ethereum.org/) enquanto ignorar as etapas que você já acabou de completar. Estude o material geral da etapa 2 da fase 0. Compreender o eth2 é a chave para o sucesso!
3. Volte ao site do launchpad , carregue seu`deposit_data-#########.json` encontrado no diretório `validator_keys`.
4. Conecte ao launchpad com sua carteira Metamask e revise e aceite os termos.
5. Confirme a transação(s\). Há uma transação de depósito de 32 ETH para cada validador.

{% hint style="info" %}
Your transaction is sending and depositing your ETH to the [official ETH2 deposit contract address. ](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)

**Verifique**, _double-check_, _**verificação tripla**_ que o endereço oficial do contrato do depósito da Eth2 está correto.[`0x00000000219ab540356cBB839Cbe05303d7705Fa`](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)
{% endhint %}

{% hint style="danger" %}
Não se esqueça de anotar ou gravar sua semente mnemônica **offline**. _Não é e-mail. Não está nublado._

Faça **backups off-line**, como uma chave USB, de **`validator_keys`** \`\`directory.
{% endhint %}

## 🛸 3. Install a ETH1 node

{% hint style="info" %}
O Ethereum 2.0 requer uma conexão com a Ethereum 1.0 para monitorar para 32 depósitos validadores do ETH. Organizar o seu próprio nó Ethereum 1.0 é a melhor maneira de maximizar a descentralização e minimizar a dependência de terceiros, como Infura.
{% endhint %}

{% hint style="warning" %}
Os passos subsequentes assumem que você concluiu o [guia de segurança das melhores práticas](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md).
{% endhint %}

Sua escolha entre [**OpenEthereum**](https://www.parity.io/ethereum/)**,** [**Obter**](https://geth.ethereum.org/)**, ,** [**Besu**](https://besu.hyperledger.org/) **ou** [**Nethermind**](https://www.nethermind.io/)**.**

{% tabs %}
{% tab title="OpenEthereum \(Parity\)" %}
#### 🤖 Instale e execute o OpenEthereum.

```text
mkdir ~/openethereum && cd ~/openethereum
wget https://github.com/openethereum/openethereum/releases/download/v3.0.1/openethereum-linux-v3.0.1.zip
unzip *.zip
chmod +x openethereum
rm openethereum*.zip 

```

(ExplicitText="⚙ **Configuração e configuração do sistema**

Execute o seguinte para criar um **arquivo unitário** para definir a sua configuração de `eth1.service`.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descrição = serviço eth1 openethereum
Desejos = rede online. arget
Depois = rede online. arget 

[Service]
Usuário = $(whoami)
WorkingDirectory= /home/$(whoami)/openethereum
ExecStart = /home/$(whoami)/openethereum/openethereum --chain foundation
Restart = on-failure

[Install]
WantedBy = multi-user. arget
EOF
```

Mover o arquivo unitário para `/etc/systemd/system` e dar-lhe permissões.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Execute o seguinte para ativar o início automático na hora de inicialização.

```text
sudo systemctl daemon-reload
sudo systemctl enable eth1
```

#### ⛓ Comece o OpenEthereum no mainnet.

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Geth" %}
#### 🧬 Instalar do repositório.

```text
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update -y
sudo apt-get install ethereum -y
```

⚙ **Configurar e configurar o systemd**

Execute o seguinte para criar um **arquivo unitário** para definir a sua configuração de `eth1.service`.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descrição = obter serviço eth1
Desejos = rede online. arget
Depois = rede online. arget 

[Service]
Usuário = $(whoami)
ExecStart = /usr/bin/geth --rpc --http
Restart = on-failure

[Install]
WantedBy = multi-usuário. arget
EOF
```

Mover o arquivo unitário para `/etc/systemd/system` e dar-lhe permissões.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

Execute o seguinte para ativar o início automático na hora de inicialização.

```text
sudo systemctl daemon-reload
sudo systemctl enable eth1
```

#### ⛓ Comece a pegar no mainnet.

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Besu" %}
#### 🧬 Instalar dependência Java.

```text
sudo apt install openjdk-11-jdk
```

#### 🌜 Baixar e descompactar Besu.

```text
cd
wget -O besu.tar.gz https://bintray.com/hyperledger-org/besu-repo/download_file?file_path=besu-1.5.0.tar.gz
tar -xvf besu.tar.gz
rm besu.tar.gz
mv besu-1.5.0 besu
```

⚙ **Configurar e configurar o systemd**

Execute o seguinte para criar um **arquivo unitário** para definir a sua configuração de `eth1.service`.

```bash
gato > $HOME/eth1. ervice << EOF 
[Unit]
Descrição = serviço eth1 openethereum
Desejos = rede online. arget
Depois = rede online. arget 

[Service]
Usuário = $(whoami)
WorkingDirectory= /home/$(whoami)/besu/bin
ExecStart = /home/$(whoami)/besu/bin/besu --data-path="$HOME/. thereum_besu"
Reiniciar = on-failed

[Install]
WantedBy = multi-usuário. arget
EOF
```

Mover o arquivo unitário para `/etc/systemd/system` e dar-lhe permissões.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

Execute o seguinte para ativar o início automático na hora de inicialização.

```text
sudo systemctl daemon-reload
sudo systemctl enable eth1
```

#### ⛓ Iniciar besu no mainnet.

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Nethermind" %}
#### ⚙ Instalar dependências.

```text
sudo apt-get update && sudo apt-get install libsnappy-dev libc6-dev libc6 unzip -y
```

#### 🌜 Baixar e descompactar o Nethermin.

```text
mkdir ~/nethermind && cd ~/nethermind
wget -O nethermind.zip https://nethdev.blob.core.windows.net/builds/nethermind-linux-amd64-1.8.77-9d3a58a.zip
unzip nethermind.zip
rm nethermind.zip
```

#### 🛸 Lança Nethermente.

```text
./Nethermind.Launcher
```

* Selecione `Nó Ethereum`
* Selecione `Ethereum (mainnet)` e depois selecione `Sincronização rápida`
* Sim para habilitar RPC web3 / JSON
* Aceitar IP padrão
* Ignorar registro do ethstats
{% endtab %}

{% tab title="Minimum Hardware Setup" %}
{% hint style="info" %}
A Infura é adequada para configurações de espaço em disco limitado. Sempre execute seu próprio nó completo em eth1 quando possível.
{% endhint %}

Cadastre-se para uma chave de acesso API em [https://infura.io/](https://infura.io/)

1. Crie uma conta gratuita.
2. Confirme seu endereço de e-mail.
3. Acesse seu painel de controle [https://infura.io/dashboard](https://infura.io/dashboard)
4. Crie um projeto, dê um nome a ele.
5. Selecione **principal** como o ENDPOINT
6. Copie sua chave da API.
7. Atualize o parâmetro **http-web3provider** na seção **comece o beacon chain**.

```bash
#parâmetro de exemplo
--http-web3provider=https://infura.io/v3/<YOUR_API_KEY>
```
{% endtab %}
{% endtabs %}



{% hint style="info" %}
A sincronização do nó eth1 pode demorar até 24 horas.
{% endhint %}

{% hint style="success" %}
O seu nó eth1 está totalmente sincronizado quando estes eventos ocorrem.

* **`OpenEthereum:`** `Imported #<block number>`
* **`Geth:`** `Segmento da cadeia importado`
* **`Besu:`** `Importado #<block number>`
* **`Nethermind:`** `Não sincronizando mais cabeçalhos antigos`
{% endhint %}

#### 🛠 Comandos eth1.serviço úteis

£🗒 **Para visualizar e seguir logs de eth1**

```text
journalctl -u eth1 -f
```

🗒 **Para parar o serviço eth1**

```text
sudo systemctl stop eth1
```

{% hint style="danger" %}
🛑 **Antes de continuar o resto deste guia, recomendamos que você espere até mais perto de Dez 1, uma vez que o código Prysm está se preparando rapidamente para o mainnet.**🚧
{% endhint %}

## 💡 4. Install Prysm

```bash
mkdir ~/prysm && cd ~/prysm 
curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && chmod +x prysm.sh 
```

{% hint style="info" %}
Prysm é um cliente Ethereum 2.0 e está presente em dois componentes.

**Beacon chain client** - Responsável por gerenciar o estado da cadeia de farinha, validador desfocado e muito mais.

**Cliente validador** - Responsável por produzir novos blocos e atestações na cadeia de sinalizadores e cadeias de fragmentos.
{% endhint %}

## 🔥 5. Configurar o encaminhamento de porta e/ou firewall

Específico para sua configuração de rede ou configurações do provedor da nuvem, [certifique-se de que as portas do firewall do seu validador estão abertas e acessíveis.](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Prysm beacon chain node** irá usar a porta 12000 para udp e a porta 13000 para tcp
* **eth1** o nó requer porta 30303 para tcp e udp

{% hint style="info" %}
✨ **Dica de Redirecionamento de Porta:** Você precisará encaminhar e abrir as portas ao seu validador. Verifique se está funcionando com [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) ou [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## 🎩 6. Importar chave do validador

Escolha o comando correto dependendo de como você instalou o **eth2deposit-cli.**

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
```bash
$HOME/prysm/prysm.sh validator accounts import --keys-dir=$HOME/eth2deposit-cli-9310de0-linux-amd64/validator_keys
```
{% endtab %}

{% tab title="Built from source code" %}
```bash
$HOME/prysm/prysm.sh validator accounts import --keys-dir=$HOME/git/eth2.0-deposit-cli/validator_keys
```
{% endtab %}
{% endtabs %}

Aceitar localização padrão da carteira, insira uma nova senha para criptografar sua carteira e digite a senha para suas contas importadas.

{% hint style="danger" %}
**AVISO**: NÃO USE OS CHAVES ORIGINAIS PARA VALIDAR COM OUTRO CLIENTE, OU VOCÊ GANHARÁ SALIDADO.
{% endhint %}

## 🏂 7. Inicie o sinalizador

{% hint style="warning" %}
Se você participou de alguma das redes de teste anteriores, você precisa limpar o banco de dados.

```bash
$HOME/prysm/prysm.sh beacon-chain --clear-db
```
{% endhint %}

Sua escolha de rodar uma cadeia de beacon e validador manualmente da linha de comando ou automaticamente com o sistema.

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 Benefícios de usar sistema para a sua cadeia de sinalizadores e validadores <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Inicie automaticamente a cadeia de sinalização quando o computador reinicia devido a manutenção, falta de energia, etc.
2. Reiniciar automaticamente o beacon com processos em cadeia quebrados.
3. Maximize seu farol chain up e performance.

#### 🛠 Instruções de configuração

Execute o seguinte para criar um **arquivo unitário** para definir a configuração do seu`beacon-chain.service`.

```bash
gato > $HOME/beacon-chain. ervice << EOF 
# O serviço de cadeia de feixes eth2 (parte do sistema)
# arquivo: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Descrição = eth2 beacon service em cadeia
Desejados = rede online. arget
Depois = rede online. arget 

[Service]
Usuário = $(whoami)
Ambiente = "ClientIP=$(curl -s v4. dent.me)"
WorkingDirectory= /home/$(whoami)/prysm
ExecStart = /home/$(whoami)/prysm/prysm.sh beacon-chain --p2p-host-ip=${ClientIP} --monitoring-host="0.0.0. " --http-web3provider=http://127.0.0. :8545 --accept-terms-of-use 
Restart = on-failure

[Install]
WantedBy = multi-usuário. arget
EOF
```

{% hint style="info" %}
Usuários do Geth podem obter maior desempenho com

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}

Mover o arquivo unitário para `/etc/systemd/system` e dar-lhe permissões.

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
sudo chmod 644 /etc/systemd/system/beacon-chain.service
```

Execute o seguinte para ativar o início automático na hora de inicializar e, em seguida, iniciar o seu serviço com o nó de sinal.

```text
sudo systemctl daemon-reload
sudo systemctl enable beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Bom trabalho. Sua cadeia de sinalização agora é gerenciada pela confiabilidade e robustez do sistema. Abaixo estão alguns comandos para usar o sistema.
{% endhint %}

### 🛠 Alguns comandos úteis no sistema

#### ✅ Verifique se a cadeia de sinalização está ativa

```text
sudo systemctl está ativo beacon-chain
```

#### 🔎 Veja o status da cadeia de sinalização

```text
sudo systemctl status beacon-chain
```

#### 🔄 Reiniciando a cadeia de sinalização

```text
sudo systemctl recload-or-reiniciar beacon-chain
```

#### 🛑 Parando a cadeia de sinalizador

```text
sudo systemctl stop beacon-chain
```

#### 🗒 Visualizando e filtrando logs

```bash
journalctl --unit=beacon-chain --since=ontem
journalctl --unit=beacon-chain --since=today
journalctl --unit=beacon-chain --since='2020-12-01 00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
Em um novo terminal, inicie a cadeia de sinalizador.

```bash
$HOME/prysm/prysm.sh beacon-chain \
--p2p-host-ip=$(curl -s v4.ident.me) \
--http-web3provider="http://127.0.0.1:8545"
--monitoring-host="0.0.0" \
--accept-terms-of-use
```

{% hint style="info" %}
Usuários do Geth podem obter maior desempenho com

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}
{% endtab %}
{% endtabs %}

## 🧬 8. Iniciar o validador <a id="9-start-the-validator"></a>

Armazene a senha do seu validador em um arquivo e torna-o somente para leitura.

```bash
echo "my_password_goes_here" > $HOME/.eth2validators/validators-password.txt
sudo chmod 600 $HOME/.eth2validators/validators-password.txt
```

Sua escolha de executar um validador manualmente da linha de comando ou automaticamente com o sistema.

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 Benefícios de usar sistema para seu validador <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Iniciar automaticamente o validador quando o computador reinicia devido a manutenção, falta de energia, etc.
2. Automaticamente reiniciar os processos do validador falhados.
3. Maximize seu validador a tempo e desempenho.

#### 🛠 Instruções de configuração

Execute o seguinte para criar um **arquivo unitário** para definir a configuração do seu`validator.service`.

```bash
gato > $HOME/validator. ervice << EOF 
# O serviço de validação eth2 (parte do sistema)
# arquivo: /etc/systemd/system/system/validator. ervice 

[Unit]
Descrição = serviço de validador eth2
Desejados = rede online. arget beacon-chain.service
After = network online. arget 

[Service]
Usuário = $(whoami)
WorkingDirectory= /home/$(whoami)/prysm
ExecStart = /home/$(whoami)/prysm/prysm. h validador --accept-terms-of-use --wallet-password-file /home/$(whoami)/.eth2validators/validators-password. xt
Restart = on-failu

[Install]
WantedBy = multi-usuário. arget
EOF
```

Mover o arquivo unitário para `/etc/systemd/system` e dar-lhe permissões.

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
sudo chmod 644 /etc/systemd/system/validator.service
```

Execute o seguinte para ativar o início automático na hora de inicializar e depois iniciar o validador.

```text
sudo systemctl daemon-reload
sudo systemctl enable validator
sudo systemctl start validator
```

### 🛠 Alguns comandos úteis no sistema

#### ✅ Verifique se o validador está ativo

```text
validador de sudo systemctl está ativo
```

#### 🔎 Veja o status do validador

```text
sudo systemctl status validator
```

#### 🔄 Reiniciando o validador

```text
sudo systemctl recarregar-or-reiniciar validador
```

#### 🛑 Parando o validador

```text
sudo systemctl stop validator
```

#### 🗄 Visualizando e filtrando logs

```bash
journalctl --unit=validator --since=ontem
journalctl --unit=validator --since=today
journalctl --unit=validator --since='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
Em um novo terminal, inicie o validador.

```bash
$HOME/prysm/prysm.sh validator \
--accept-terms-of-use \
--wallet-password-file /home/$(whoami)/.eth2validators/validators-password.txt
```
{% endtab %}
{% endtabs %}

Verifique se sua **chave pública validador** aparece nos logs. Exemplo abaixo:

```text
INFO Validador habilitado voting_pubkey: 0x2374.....7121
```

{% hint style="info" %}
**Cliente validador** - Responsável por produzir novos blocos e atestações na cadeia de sinalizadores e cadeias de fragmentos.

**Beacon chain client** - Responsável por gerenciar o estado da cadeia de farinha, validador desfocado e muito mais.
{% endhint %}

{% hint style="success" %}
Parabéns. Assim que seu sinalizador estiver sincronizado, valide e rodando, você só espera pela ativação. Este processo demora até 24 horas. Quando você for designado, o seu validador começará a criar e votar em blocos enquanto ganha ETH staking recompensas.

Use o [beaconcha.in](https://beaconcha.in/) e [registre uma conta](https://beaconcha.in/register) para criar alertas e acompanhar o desempenho de seu validador.
{% endhint %}

## 🕒 9. Sincronização de Hora

{% hint style="info" %}
Porque o beacon chain depende de horários precisos para executar atestações e produzir blocos, o tempo do seu computador deve ser preciso ao NTP ou NTS tempo real dentro de 0. segundos.
{% endhint %}

Configurar **Chrony** com o seguinte guia.

{% hint style="info" %}
cronia é uma implementação do Protocolo de Tempo de Rede e ajuda a manter o tempo do seu computador sincronizado com NTP.
{% endhint %}

## 🔎 10. Monitorando o seu validador com Grafana e Prometheus

Prometheus é uma plataforma de monitoramento que coleta métricas de alvos monitorados, removendo métricas de endpoints HTTP nesses alvos. [Documentação oficial está disponível aqui.](https://prometheus.io/docs/introduction/overview/) Grafana é um painel usado para visualizar os dados coletados.

### 🐣 Instalação 10.1

Instale o exportador de nó prometheus e prometheus.

```text
sudo apt-get install -y prometheus prometheus-node-exporter
```

Instale o grafana.

```bash
wget -q -O - https://packages.grafana.com/gpg.key ├sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" > grafana. ist
sudo mv grafana.list /etc/apt/sources.list.d/grafana.list
sudo apt-get update && sudo apt-get install -y grafana
```

Habilitar os serviços para que iniciem automaticamente.

```bash
sudo systemctl habilita grafana-server.service
sudo systemctl habilita prometheus.service
sudo systemctl habilita prometheus-node-exporter.service
```

Atualização **prometheus.yml** localizada em `/etc/prometheus/prometheus.yml`

```bash
gato > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15s # por padrão, alvos de scrape a cada 15 segundos.

  # Anexar essas etiquetas a qualquer série de horas ou alertas ao se comunicar com
  # sistemas externos (federação, armazenamento remoto, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# Uma configuração de scrape contendo exatamente um endpoint para scrape:
# Aqui é o próprio Prometheus.
scrape_configs:
  - job_name: 'node_exportter'
    static_configs:
      - alvos: ['localhost:9100']
  - job_name: 'validator'
    static_configs:
      - alvos: ['localhost:8081']
  - job_name: 'beacon node'
    static_configs:
      - alvos: ['localhost:808080']
  - job_name: 'slasher'
    static_configs:
      - alvos: ['localhost:8082']
EOF
sudo mv $HOME/prometheus. ml /etc/prometheus/prometheus.yml
```

Por último, reinicie os serviços.

```bash
sudo systemctl reiniciar grafana-server.service
sudo systemctl reiniciar prometheus.service
sudo systemctl reiniciar prometheus-node-exporter.service
```

Verifique se os serviços estão funcionando corretamente:

```text
sudo systemctl status grafana-server.service prometheus.service prometheus-node-exporter.service
```

{% hint style="info" %}
💡 **Lembrete**: certificar que a porta 3000 esteja aberta no firewall e/ou porta encaminhada, se você pretende ver as informações de monitoramento de uma máquina diferente.
{% endhint %}

### 📶 10,2 Configurando painéis do Grafana

1. Abra [http://localhost:3000](http://localhost:3000) ou [http://&lt;your](http://<your) validator's ip address&gt;:3000 no seu navegador local.
2. Entrar com **administrador** / **administrador**
3. Mudar Senha
4. Clique no ícone de **configuração de engrenagem** e depois **Adicionar fonte de dados**
5. Selecione **Prometheus**
6. Defina **Nome** para **"Prometheus**"
7. Define **URL** para [http://localhost:9090](http://localhost:9090)
8. Clique em **Salvar & Testar**
9. **Baixe e salve** este [**arquivo json**](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)**.** Ou se tiver mais de 10 validadores, use este [arquivo json](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json).
10. Clique **Criar +** ícone &gt; **Importar**
11. Adicionar dashboard por **Upload de arquivo JSON**
12. Clique no botão **Importar**.

![Painel de Impressão](../../.gitbook/assets/prysm_dash.png)

### ⚠ Alerta de Configuração 10.3

{% hint style="info" %}
Alertas de configuração para serem notificados se os seus validadores ficarem offline.
{% endhint %}

Seja notificado de problemas com seus validadores. Escolha entre e-mail, telegrama, discord ou laxista.

{% tabs %}
{% tab title="Email Notifications" %}
1. Visite [https://beaconcha.in/](https://beaconcha.in/)
2. Cadastre-se **para uma conta ****
3. Verifique seu **e-mail**
4. Pesquisar o endereço público de seu **validador**
5. Adicione validadores à sua lista de desejos clicando no **símbolo de marcador**.
{% endtab %}

{% tab title="Telegram Notifications" %}
1. No menu de Grafana, selecione **canais de notificação** sob o ícone de sino. ![](../../.gitbook/assets/gra-noti.png)
2. Clique em **Adicionar canal**.
3. Dê ao canal de notificação um **nome**.
4. Selecione **Telegram** na lista de tipos.
5. Para concluir as **configurações da API do Telegram**, um canal e um bot são necessários. Para obter instruções sobre como configurar um bot com `@Botpai`, consulte [esta seção](https://core.telegram.org/bots#6-botfather) da documentação do Telegram.
6. Uma vez concluído, convide o bot para o canal recém-criado.
{% endtab %}

{% tab title="Discord Notifications" %}
1. No menu de Grafana, selecione **canais de notificação** sob o ícone de sino. ![](../../.gitbook/assets/gra-noti.png)
2. Clique em **Adicionar canal**.
3. Adicione um **nome** ao canal de notificação.
4. Selecione **Discord** da lista de tipos.
5. Para completar a configuração, um servidor Discord \(e um canal de texto disponível\), bem como uma URL de Webhook são necessários. Para obter instruções sobre como configurar os Webhooks do Discord, consulte [esta seção](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks) de sua documentação.
6. Digite a **URL do Webhook** no painel de configurações de notificação do Discord.
7. Clique em **Enviar Teste**, que irá empurrar uma mensagem de confirmação para o canal do Discord.
{% endtab %}

{% tab title="Slack Notifications" %}
1. No menu de Grafana, selecione **canais de notificação** sob o ícone de sino. ![](../../.gitbook/assets/gra-noti.png)
2. Clique em **Adicionar canal**.
3. Adicione um **nome** ao canal de notificação.
4. Selecione **Slack** na lista de tipos.
5. Para obter instruções sobre como configurar os Webhooks recebidos do Slack, consulte [esta seção](https://api.slack.com/messaging/webhooks) de sua documentação.
6. Digite a URL do Webhook de Entrada do Slack no campo **URL**.
7. Clique em **Enviar Teste**, que irá empurrar uma mensagem de confirmação para o canal Slack.
{% endtab %}
{% endtabs %}

{% hint style="success" %}
🎉 Parabéns pela configuração do seu validador! Você é bom para ir ao eth2.0.

Você achou nosso guia útil? Avise-nos com uma dica e continuaremos atualizando.

Use [cointr.ee para encontrar nossos endereços de doação ](https://cointr.ee/coincashew). 🙌

Quaisquer comentários e pull requests muito apreciados. 😃

Aguente e converse com outros participantes no telegram @ [https://t.me/coincashew](https://t.me/coincashew)🌛
{% endhint %}

## 🧙♂ 11. Atualizando Imysm

Reiniciar o beacon chain e validador como um procedimento normal de operação.

{% tabs %}
{% tab title="Systemd - Automated" %}
```text
sudo systemctl reload-or-restart beacon-chain
sudo systemctl reload-or-restart validator
```
{% endtab %}

{% tab title="CLI - Manual" %}
```bash
#Control C para sair do beacon-chain e do processo do validador 
#Pressione a seta para cima e entre para reiniciar.
```
{% endtab %}
{% endtabs %}

## 🧩 12. Material de referência

Aprecie o trabalho árduo realizado pelos excelentes funcionários nas seguintes ligações, que serviram de base à criação deste guia.

{% embed url="https://discord.gg/KSA7rPr" %}

{% embed url="https://launchpad.ethereum.org/" caption="" %}

{% embed url="https://prylabs.net/participa" %}

{% embed url="https://docs.prylabs.network/docs/getting-started/" %}

## 🎉 13. Links de Bônus

### 🌰 Guias CoinCashew para outros clientes ETH2

{% page-ref page="guide-how-to-stake-on-eth2-with-lighthouse.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-teku-on-ubuntu.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-nimbus.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-lodestar.md" %}

### 🧱 Exploradores de Blocos ETH2

{% embed url="https://beaconcha.in" caption="" %}

{% embed url="https://beaconscan.com" caption="" %}

### 🗒 Últimas Informações da Eth2

{% embed url="https://www.reddit.com/r/ethstaker" caption="" %}

{% embed url="https://blog.ethereum.org" caption="" %}

{% embed url="http://invite.gg/ethstaker" legenda="" %}

{% embed url="https://hackmd.io/@benjaminion/eth2\_news/" caption="" %}

## 🔥 14. Dicas adicionais úteis

### 🛑 14.1 Saída voluntária de um validador

{% hint style="info" %}
Use este comando para sinalizar suas intenções para parar de validar com seu validador. Isso significa que você não quer mais fazer staking com seu validador e quer desativar seu nó.

* A saída voluntária leva um mínimo de 2048 períodos \(ou ~9dias \). Há uma fila para sair e um atraso antes que seu validador seja finalmente exilado.
* Uma vez que um validador é encerrado na fase 0, isso não é reversível e você não pode mais reiniciar a validação novamente.
* Seus fundos não estarão disponíveis para retirada até a fase 1.5 ou posterior.
* Depois que o validador sai da fila de saída e é realmente exilado, é seguro desativar o seu nó e o validador de sinalizador.
{% endhint %}

```bash
$HOME/prysm/prysm.sh contas validator voluntárias-Saídas
```

### 🔐 14.2 Verifique sua frase mnemônica

Usando a ferramenta eth2deposit-cli para garantir que você possa regenerar os mesmos pares de chaves eth2 restaurando seus `validator_keys`

```bash
./depósito existente-mnemônico --chain mainnet
```

{% hint style="info" %}
Quando a **pubkey** é idêntica, isso significa que seu **arquivo de keystore** que você verificou corretamente sua frase mnemônica. Outros campos serão diferentes por causa da venda.
{% endhint %}

### 🤖 14.3 Adicionar validadores adicionais

Usando a ferramenta eth2deposit-cli você pode adicionar mais validadores criando um novo arquivo de dados de depósito e `validator_keys`

Por exemplo, no caso de criarmos originalmente 3 validadores, mas agora queremos adicionar mais 5 validadores, poderíamos usar o seguinte comando.

```bash
./depositar existente-mnemônico --validator_start_index 3 --num_validators 5 --chain mainnet
```

Complete os passos para fazer o upload do `deposit_data-#########.json` para o site do lançamento.

