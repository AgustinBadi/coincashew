---
description: >-
  成为一个验证程序并帮助保护伦理2，一个验证的股份区块链。 任何拥有32 ETH的人都可以加入。
---

# 指南：如何在Ubuntu与 Prysm 的ETH2 Mainnet

{% hint style="danger" %}
**202020年11月24日更新**: [新主网指南位于这里](guide-or-how-to-setup-a-validator-on-eth2-mainnet/)。

下面的指示现在已经废弃，仅供参考。
{% endhint %}











{% hint style="info" %}
[Prysm](https://github.com/prysmaticlabs/prysm) 是一个 Ethereum 2.0 协议的实现，以可用性、安全性和可靠性为重点。 Prysm是由 [Prysmatic Labs](https://prysmaticlabs.com/)开发的，是一家完全关注客户发展的公司。 Prysm是以 Go 写的，并在 GPL 3.0 许可下发布。
{% endhint %}

## 🏁 0. 必备条件

### 👩:laptop_compute: 操作eth2 验证器和信标节点的技能

作为伦理2的验证器，您通常具有以下能力：

* 操作如何持续设置、运行和维护一个 eth2 信标节点和验证器
* 承诺保持您的验证程序24/7/365
* 基本操作系统技能
* 通过观看 [Superphiz的“民族简介” & Staking for Beginners](https://www.youtube.com/watch?v=tpkpW031RCI)
* 已通过或正在积极参与 [Eth2 Study Master课程](https://ethereumstudymaster.com/)
* 并且已经阅读了 [8 件每个E2 验证器应该知道的事情。](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

### :emergder_ribbbon: **最低安装要求**

* **操作系统：** 64 位 Linux \(即) Ubuntu 20.04 LTS\)
* **处理器：** 双重核心CPU, Intel Core i5-760 或 AMD FX-8100 或更高版本
* **Memory:** 8GB RAM
* **存储:** 20GB SSD
* **Internet:** 宽带互联网连接，速度至少为 1 Mbps.
* **能量：** 可靠的电力。
* **ETH余额：** 至少32 ETH和一些ETH存款交易费
* **钱包**: 已安装 Metamask

### :person_提升重量:♂ 推荐硬件设置

* **操作系统：** 64 位 Linux \(即) Ubuntu 20.04 LTS\)
* **处理器：** 四核心CPU，Intel Core i7- 4770 或 AMD FX-8310 或更好的
* **内存：** 16 GB 内存或更多
* **存储:** 1TB SSD 或更多
* **Internet:** 宽带互联网连接，速度至少 10 Mbps
* **电源:** 可靠的电源和不间断电源\(UPS\)
* **ETH余额：** 至少32 ETH和一些ETH存款交易费
* **钱包**: 已安装 Metamask

{% hint style="warning" %}
:sparkles： **Pro Validator 提示**: 高度推荐您以一个全新的 OS、VM 和/或机器实例开始。 避免为您的主机验证器重新使用测试网键、钱包或数据库。
{% endhint %}

### 🔓 推荐eth2 验证器安全最佳做法

如果您需要关于如何保护您的验证程序的想法或提醒，请参阅：

{% page-ref page="guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md" %}

### 🛠 Setup Ubuntu

如果您需要安装 Ubuntu, 请参考

{% page-ref page="../overview.xtz/guide-how to setup-a-baker/install-ubuntu.md" %}

### 🎭 设置Metamask

如果您需要安装Metamask，请参阅：

{% page-ref page="../../wallets/browser-wallets/metamask-ethereum.md" %}

## 🌱 1. 购买/交换或合并ETH

{% hint style="info" %}
您拥有的每32个ETH允许您制作1个验证器。 您可以用您的信标节点运行数千个验证器。
{% endhint %}

您的ETH \(或32ETH的倍数)应合并成一个可与Metamask访问的单一地址。

如果您需要购买/交换或充值您的ETH到32倍，请查看：

{% page-ref page="guide-how-to-buy-eth.md" %}

## 👩💻 2. 注册为 Launchpad 的验证程序

1. 安装依赖，etherum基金会存款工具和生成两套密钥。

{% hint style="info" %}
每个验证器将有两组密钥对。 一个 **签名密钥** 和 **提款密钥。** 这些密钥来自单词句。 [了解更多关于密钥的信息](https://blog.ethereum.org/2020/05/21/keys/)
{% endhint %}

您可以选择下载预构建的 [etherum基础存款工具](https://github.com/ethereum/eth2.0-deposit-cli) 或从源代码构建它。

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
下载 eth2dosit-cli。

```bash
cd $HOME
wget https://github.com/etherum/eth2.0-dosit-cli/releases/download/v1.0.0/eth2dosit-cli-9310de0-Linux-amd64.tar.gz
```

验证 SHA256 校验和与 [发布页面](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.0.0) 的校验和匹配。

```bash
sha256sum eth2dosit-cli-9310dew-linux-amd64.tar.gz 
# SHA256 应该是
# b09da136895a7f77a4b430924ea2ae5827fa47b2bf444c4ea6fcfac5b04b8c8a
```

解压缩归档。

```text
tar -xvf eth2deposit-cli-9310de0-linux-amd64.tar.gz
cd eth2deposit-cli-9310de0-linux-amd64
```

制作一个新的 mnemonic。

```text
./consein new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Build from source code" %}
安装依赖项。

```text
sudo apt update
sudo apt install python3-pip git -y
```

下载源代码并安装。

```text
mkdir ~/git
cd ~/git
git clone https://github.com/etherum/eth2.0-存款-cli.git
cd eth2.0-存款-cli
sudo ./den.sh 安装
```

制作一个新的 mnemonic。

```text
./deposit.sh new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
🔥**\[ Optional \] Pro Security 提示**: 运行 eth2sorit-cli 工具并在一个 **空格脱机机机上生成您的 **mnemonic 种子** 用于验证器密钥**

您可以通过 USB 键将预制的 eth2矿床-cli 二进制片机从在线机器复制到空格脱机机。

* 保护免受密钥记录攻击、基于恶意/病毒的攻击和其他防火墙或安全爆炸。
* 与您的网络其他部分实际隔离。
* 必须没有网络连接，有线或无线。
* 不是网络连接的机器上的 VM
* 在维基百科了解更多关于 [空调](https://en.wikipedia.org/wiki/Air_gap_%28networking%29) 的信息。
{% endhint %}
{% endtab %}
{% endtabs %}

1. 跟随提示并选择密码。 请写下您的助记符并保持这个安全并且 **离线**。
2. 跳过您刚刚完成的步骤时，请在 [https://launchpad.eferum.org/](https://launchpad.ethereum.org/) 上按照这些步骤。 研究eth2阶段0概览材料。 了解eth2是成功的关键！
3. 返回启动板网站，上传您的`deposit_data-#########.json` 在 `validator_key` 目录中找到。
4. 使用您的Metamask钱包连接到启动板，审查并接受条款。
5. 确认交易\(s\)。 每个验证器有一个32个ETH的存款交易。

{% hint style="info" %}
您的交易是将您的ETH发送到 [官方ETH2 存款合同地址。 ](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)

**检查**, _两次检查_, _**三次检查**_ 官方的 Eth2 存款合同地址是否正确。[`0x000000219ab540356cB839Cbe05303d7705Fa`](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)
{% endhint %}

{% hint style="danger" %}
请务必写下或录制您的助记种子 **离线**。 _不是电子邮件。 未云。_

让 **脱机备份**, 例如您的 **的 USB 密钥。`validator_key`** \`\`directory.
{% endhint %}

## 🛸 3. Install a ETH1 node

{% hint style="info" %}
以太坊2.0需要连接到以太坊1.0，才能监视32个ETH验证器存款。 托管您自己的Ethereum 1.0 节点是最大限度地下放权力和尽量减少对因富拉等第三方依赖的最佳途径。
{% endhint %}

{% hint style="warning" %}
随后的步骤假定您已完成了 [最佳做法安全指南](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md)。
{% endhint %}

您的选择 [**OpenEthereum**](https://www.parity.io/ethereum/)**** [**Geth**](https://geth.ethereum.org/)**,** [**别斯库**](https://besu.hyperledger.org/) **或** [**荷兰**](https://www.nethermind.io/)**.**

{% tabs %}
{% tab title="OpenEtherum\(parity\)" %}
#### 🤖 安装并运行 OpenEtherum.

```text
mkdir ~/openetherum && cd ~/openeysethum
wget https://github.com/openetherum/openetherum/releases/download/v3.0.1/openetherum-linux-v3.0.1.zip
unzip openetherum*.zip
chmod +x openenethereum
rm openeumeneum *.zip
```

⚙ **设置并配置 systemd**

运行下面的操作来创建一个 **单元文件** 来定义您的 `E1.service` 配置。

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = openethereum eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
WorkingDirectory= /home/$(whoami)/openethereum
ExecStart       = /home/$(whoami)/openethereum/openethereum --chain foundation
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

移动单位文件到 `/etc/system/system/system` 并授予它权限。

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

运行以下以启用启动时自动启动。

```text
sudo systemctl daemon-reload
sudo systemctl 启用eth1
```

#### :chains：在主机上启动 OpenEthereum

```text
sudo systemctl 起始eth1
```
{% endtab %}

{% tab title="Geth" %}
#### 🧬 从资源库安装。

```text
sudo additional apt-reposite-y pa:etherum/eysuthum
sudo apt-get update -y
sudo apt-get install etherum -y
```

⚙ **设置并配置 systemd**

运行下面的操作来创建一个 **单元文件** 来定义您的 `E1.service` 配置。

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = geth eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
ExecStart       = /usr/bin/geth --rpc --http
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

移动单位文件到 `/etc/system/system/system` 并授予它权限。

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

运行以下以启用启动时自动启动。

```text
sudo systemctl daemon-reload
sudo systemctl 启用eth1
```

#### :chains：从主机上开始游戏。

```text
sudo systemctl 起始eth1
```
{% endtab %}

{% tab title="Besu" %}
#### 🧬 安装 java 依赖关系。

```text
sudo apt install openjdk-11-jdk
```

#### :last_quarter_moon_face：下载并解压别斯。

```text
cd
wget -O besu.tar.gz https://biny.com/hyledger-org/besu-repo/download_file?file_path=besu-1.5.0.tar.gz
tar -xvf besu.tar.gz
rm besu.tar.gz
mv besu-1.5.0 besu
```

⚙ **设置并配置 systemd**

运行下面的操作来创建一个 **单元文件** 来定义您的 `E1.service` 配置。

```bash
cat > $HOME/eth1.service << EOF 
[Unit]
Description     = openethereum eth1 service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
WorkingDirectory= /home/$(whoami)/besu/bin
ExecStart       = /home/$(whoami)/besu/bin/besu --data-path="$HOME/.ethereum_besu"
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

移动单位文件到 `/etc/system/system/system` 并授予它权限。

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

运行以下以启用启动时自动启动。

```text
sudo systemctl daemon-reload
sudo systemctl 启用eth1
```

#### :chains：在主网上开始Besu。

```text
sudo systemctl 起始eth1
```
{% endtab %}

{% tab title="Nethermind" %}
#### ⚙ 安装依赖项。

```text
sudo apt-get 更新 && sudo apt-get install libsnappy-dev libc6-dev unzip -y
```

#### :last_quarter_moon_face：下载并解压缩荷兰的想法。

```text
mkdir ~/nethermind && cd ~/nethermind
wget -O nethermind.zip https://nethdev.blob.core.core.windows.net/builds/nethermind-linux-amd64-1.8.77-9d3a58a.zip
unzip nethermind.zip
rm nethermind.zip
```

#### 🛸 launching Netherlands.

```text
./Nethermind.Launcher
```

* 选择 `以太节点`
* 选择 `Ethereum (mainnet)` 然后选择 `快速同步`
* 是要启用 web3 / JSON RPC
* 接受默认IP
* 跳过族裔统计注册
{% endtab %}

{% tab title="Minimum Hardware Setup" %}
{% hint style="info" %}
Infura适合有限的磁盘空间设置。 在可能时总是运行您自己的完整的 eth1 节点。
{% endhint %}

在 [https://infura.io/](https://infura.io/) 注册API访问密钥

1. 注册免费帐户。
2. 确认您的电子邮件地址。
3. 访问您的仪表板 [https://infura.io/控制面板](https://infura.io/dashboard)
4. 创建一个项目，给它一个名称。
5. 选择 **Mainnet** 作为ENDPOINT
6. 复制您的 API 密钥。
7. 在 **开始信标链** 部分中更新参数 **http-web3provider**

```bash
#example 参数
--http-web3provider=https://infura.io/v3/<YOUR_API_KEY>
```
{% endtab %}
{% endtabs %}



{% hint style="info" %}
同步 eth1 节点可能需要 24 小时。
{% endhint %}

{% hint style="success" %}
发生这些事件时，您的 eth1 节点已完全同步。

* **`OpenEthereum:`** `Imported #<block number>`
* **`Geth：`** `导入了新链段`
* **`此外:`** `导入的 #<block number>`
* **`荷兰：`** `不再同步旧头`
{% endhint %}

#### 🛠 帮助的 eth1.service 命令

:spiral_notepad： **查看并关注eth1日志**

```text
journalctl -u eth1 -f
```

:spiral_notepad： **停止eth1服务**

```text
sudo systemctl stop eth1
```

{% hint style="danger" %}
🛑 **在继续本指南其余部分之前, 我们建议您等待更接近十二月一日，因为Prysm代码正在快速准备主网。**🚧
{% endhint %}

## 💡 4. Install Prysm

```bash
mkdir ~/prysm && cd ~/prysm 
curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && chmod +x prysm.sh 
```

{% hint style="info" %}
Prysm 是 Ethereum 2.0 客户端，分为两个组件。

**信标链客户端** - 负责管理信标链状态、验证器随机排序等等。

**验证器客户端** - 负责在信标链和碎片链中生成新区块和认证。
{% endhint %}

## 🔥 5. 配置端口转发和/或防火墙

针对您的网络设置或云端提供商设置， [确保您的验证器防火墙端口是打开和可访问的。](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Prysm 信标链节点** 将使用端口 12000 用于udp 和 tcp 端口13000
* **eth1** 节点需要 tcp 和 udp 的 30303 端口

{% hint style="info" %}
:sparkles： **端口转发提示：** 您需要转发并打开端口到您的验证器。 验证它使用 [https://www.yugetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) 或 [https://canyousee.org/](https://canyouseeme.org/)。
{% endhint %}

## 🎩 6. 导入验证器密钥

选择正确的命令，取决于您如何安装 **eth2存款-cli**

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
```bash
$HOME/prysm/prysm.sh 验证帐户导入 --keys-dir=$HOME/ eth2存款-cli-9310deb0-Linux-amd64/validator_keys
```
{% endtab %}

{% tab title="Built from source code" %}
```bash
$HOME/prysm/prysm.sh 验证帐户导入 --keys-dir=$HOME/git/eth2.0-存款-cli/validator_keys
```
{% endtab %}
{% endtabs %}

接受默认的钱包位置，输入新密码来加密你的钱包，并为你的导入帐户输入密码。

{% hint style="danger" %}
**警告**: 不要使用普通钥匙。不要使用其他密钥。或者你想要使用其他密钥。
{% endhint %}

## 🏂 7. 启动信标链。

{% hint style="warning" %}
如果您参与了任何先前的测试网，您需要清除该数据库。

```bash
$HOME/prysm/prysm.sh 信标-chain --cleardb
```
{% endhint %}

您选择从命令行手动运行信标链和验证器或与系统自动运行。

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 为您的信标链和验证器使用系统的利益 <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. 在计算机因维修、停电等而重启时自动启动信标链。
2. 自动重启崩溃信标链流程。
3. 最大限度地提高您的信标链的持续时间和性能。

#### 🛠 设置说明

运行以下以创建一个 **单元文件** 来定义您的`信标链。服务` 配置。

```bash
cat > $HOME/beacon-chain.service << EOF 
# The eth2 beacon chain service (part of systemd)
# file: /etc/systemd/system/beacon-chain.service 

[Unit]
Description     = eth2 beacon chain service
Wants           = network-online.target
After           = network-online.target 

[Service]
User            = $(whoami)
Environment     = "ClientIP=$(curl -s v4.ident.me)"
WorkingDirectory= /home/$(whoami)/prysm
ExecStart       = /home/$(whoami)/prysm/prysm.sh beacon-chain --p2p-host-ip=${ClientIP} --monitoring-host="0.0.0.0" --http-web3provider=http://127.0.0.1:8545 --accept-terms-of-use 
Restart         = on-failure

[Install]
WantedBy    = multi-user.target
EOF
```

{% hint style="info" %}
Geth用户可以通过以下方式实现更高的性能：

```bash
--http-web3provider=$HOME/.therum/geth.ipc
```
{% endhint %}

移动单位文件到 `/etc/system/system/system` 并授予它权限。

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-chain.service
sudo chmod 644 /etc/system/system/beacon-chain.service
```

运行以下以启用启动时自动启动，然后启动您的信标节点服务。

```text
sudo systemctl daemon-reload
sudo systemctl 启用信标-chain
sudo systemctl start 信标-chain
```

{% hint style="success" %}
好工作。 您的信标链现在由系统的可靠性和强度管理。 下面是一些使用系统的命令。
{% endhint %}

### 🛠 一些有用的systemd 命令

#### :whit_heavy_check_mark: 检查信标链是否激活

```text
sudo systemctl is-acon-chain
```

#### 🔎 查看信标链的状态

```text
sudo systemctl 状态信标
```

#### :countrockwise_arrows_buton: 重新启动信标链。

```text
sudo systemctl 重新加载或重新启动信标
```

#### 🛑 停止信标链中

```text
sudo systemctl stop 信标-chain
```

#### 🗒 查看和过滤日志

```bash
journalctl --unit=beacon-chain --sun=昨天
journalctl --unit=beacon-chain --sun=tay
journalctl --unit=beacon-chain --sin='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
在一个新终端中启动信标链。

```bash
$HOME/prysm/prysm.sh 信标链\
--p2p-host-ip=$(curl -s v4.ident.me)
--http-web3provider="http://127.0.1:8545"
--monitoring-host="0.0.0.0"
--accept-terms of use
```

{% hint style="info" %}
Geth用户可以通过以下方式实现更高的性能：

```bash
--http-web3provider=$HOME/.therum/geth.ipc
```
{% endhint %}
{% endtab %}
{% endtabs %}

## 🧬 8. 启动验证程序 <a id="9-start-the-validator"></a>

将您的验证密码存储在一个文件中，并使其成为只读。

```bash
echo "my_password_goes_here" > $HOME/.eth2validators/validators-password.txt
sudo chmod 600 $HOME/.eth2validators/validators-password.txt
```

您选择从命令行手动运行验证器或与系统自动运行。

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 使用系统给您的验证器带来的利益 <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. 因维护、停电等原因重启计算机时自动启动验证程序。
2. 自动重启验证进程崩溃了。
3. 最大化您的验证程序的上传时间和性能。

#### 🛠 设置说明

运行以下以创建一个 **单元文件** 来定义您的`验证服务` 配置。

```bash
cat > $HOME/validator。 ervice << EOF 
# eth2 validator service (part of system)
# 文件：/etc/systemd/system/validator。 ervice 

[Unit]
描述 = eth2 validator 服务
Wants = 网络在线。 arget 信标-chain.service
After = network-online。 arget 

[Service]
用户 = $(whoami)
WorkingDirectory= /home/$(whoami)/ prysm
ExecStart = /home/$(whoami)/prysm/prysm. h validator --accept-terms of use --wallet-passward-file /home/$(whoami)/.eth2validators/validators-password xt
重启 = 发生故障

[Install]
WantedBy = 多用户。 arget
EOF
```

移动单位文件到 `/etc/system/system/system` 并授予它权限。

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
sudo chmod 644 /etc/systemd/system/validator.service
```

运行以下以启用启动时自动启动，然后启动您的验证器。

```text
sudo systemctl daemon-reload
sudo systemctl 启用验证器
sudo systemctl start validator
```

### 🛠 一些有用的systemd 命令

#### :whit_heavy_check_mark: 检查验证器是否激活

```text
sudo systemctl is-activated validator
```

#### 🔎 查看验证器状态

```text
sudo systemctl status validator
```

#### :countrockwise_arrows_buton: 重新启动验证器

```text
sudo systemctl 重新加载或重新启动验证器
```

#### 🛑 停止验证器

```text
sudo systemctl stop validator
```

#### 🗄 查看和过滤日志

```bash
journalctl --unit=validator --sin=昨天
journalctl --un=validator --sin=tay
journalctl --unit=validator --sin='2020-12-01 00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
在新的终端中，启动验证器。

```bash
$HOME/prysm/prysm.sh validator \
--accept-terms of use \
--wallet-password-file /home/$(whoami)/.eth2validators/validators-password.txt
```
{% endtab %}
{% endtabs %}

验证您的 **验证器公钥** 是否出现在日志中。 下面示例：

```text
INFO 启用验证器投票 pubkey: 0x2374...7121
```

{% hint style="info" %}
**验证器客户端** - 负责在信标链和碎片链中生成新区块和认证。

**信标链客户端** - 负责管理信标链状态、验证器随机排序等等。
{% endhint %}

{% hint style="success" %}
恭喜。 一旦您的信标链已同步，验证器已上传并运行，您只需等待激活。 这个过程需要长达24小时。 当您被指派时，您的验证器将开始创建并投票方块，同时获得ETH staking 奖励

使用 [信标。in](https://beaconcha.in/) and [注册一个帐户](https://beaconcha.in/register) 来创建警报并跟踪您的验证器性能。
{% endhint %}

## 🕒 9. 时间同步

{% hint style="info" %}
因为信标链依靠准确的时间来进行证明和制作区块， 您的计算机时间必须准确到实际NTP 或 NTS 时间在 0 之间。 秒。
{% endhint %}

安装 **Chrony** 带有以下指南。

{% hint style="info" %}
时间是网络时间协议的执行，有助于使您的计算机时间与NTP保持同步。
{% endhint %}

## 🔎 10. 用Grafana 和 Prometheus 监视您的验证器

Prometheus 是一个监测平台，它通过拆卸关于这些目标的计量标准HTTP端点，从受监测的目标收集计量。 [官方文档可在这里获取](https://prometheus.io/docs/introduction/overview/) Grafana 是一个用于可视化收集数据的仪表盘。

### 🐣 10.1 安装

安装 prometheus 和 prometheus 节点导出器。

```text
sudo apt-get install -y promeus promeus-node-exporter
```

安装Grafana。

```bash
wget -q -O - https://pack.grafana.com/gpg.key | sudo apt-key added -
echo "deb https://packes.grafana.com/oss/deb stable main" > grafana. ist
sudo mv grafana.list /etc/apt/sources.list.d/grafana.list
sudo apt-get update && sudo apt-get install -y grafana
```

启用服务以便自动启动。

```bash
sudo systemctl 启用gramana-server.service
sudo systemctl enable prometheus.service
sudo systemctl enablish prometheus-node-exportter.service
```

更新 **promeus.yml** 分别位于 `/etc/prometheus.yml`

```bash
cat > $HOME/prometheus.yml << EOF
global：
  scrape_interval: 15s # 默认情况下，扫描每15秒。

  # 在与
  # 外部系统通信时将这些标签附加到任何时间序列或警报(排序、远程存储、警报管理器)。
  外部标签：
    显示器：'codelab-monitor'

# 一个包含到scrape的一个端点的扫描配置：
# 这里是Prometheus本身。
scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['localhost:9100']
  - job_name: 'validator'
    static_configs:
      - targets: ['localhost:8081']
  - job_name: 'beacon node'
    static_configs:
      - targets: ['localhost:808080']
  - job_name: 'slasher'
    static_configs:
      - targets: ['localhost:8082']
EOF
sudo mv $HOME/promethus. ml /etc/promeus/prometheus.yml
```

最后，重新启动服务。

```bash
sudo systemctl 重启 gravana-server.service
sudo systemctl 重启 prometheus.service
sudo systemctl 重启 prometheus-node-exportter.service
```

验证服务运行正常：

```text
sudo systemctl status grafana-server.service prometheus.service prometheus-node-exportter.service
```

{% hint style="info" %}
💡 **提醒**: 如果您打算从另一台机器查看监视信息，请确保在防火墙和/或转发端口上打开3000端口。
{% endhint %}

### :nava_bars: 10.2 设置 Grafana 仪表板

1. 在您的本地浏览器中打开 [http://localhost:3000](http://localhost:3000) 或 [http://&lt;your](http://<your) validator's ip address&gt;:3000。
2. 使用 **管理员** / **管理员登录**
3. 更改密码
4. 点击 **配置设备** 图标，然后 **添加数据源**
5. 选择 **Prometheus**
6. 将 **名称** 设置为 **"Prometheus**"
7. 将 **URL** 设置为 [http://localhost:9090](http://localhost:9090)
8. 点击 **保存 & 测试**
9. **下载并保存** 此 [**json 文件**](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)**.** 或者如果您拥有超过 10 个验证程序，请使用此 [json 文件](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json)。
10. 点击 **创建 +** 图标 &gt; **导入**
11. 通过 **添加仪表板上传 JSON 文件**
12. 点击 **导入** 按钮。

![Prysm 仪表板](../../.gitbook/assets/prysm_dash.png)

### ⚠ 10.3 安装提醒通知

{% hint style="info" %}
设置提醒以在您的验证器离线时获得通知。
{% endhint %}

获取验证程序问题的通知。 选择电子邮件、电报、不和或是slack。

{% tabs %}
{% tab title="Email Notifications" %}
1. 访问 [https://信标.in/](https://beaconcha.in/)
2. 注册 ****为一个 **帐户**
3. 验证您的 **电子邮件**
4. 搜索您的 **验证器的公开地址**
5. 点击 **书签符号** 将验证器添加到您的观察列表。
{% endtab %}

{% tab title="Telegram Notifications" %}
1. 在 Grafana 菜单中，在铃声图标下选择 **个通知频道**。 ![](../../.gitbook/assets/gra-noti.png)
2. 点击 **添加频道**。
3. 给通知频道一个 **名称**。
4. 从类型列表中选择 **Telegram**。
5. 要完成 **Telegram API 設定**，需要一个 Telegram 頻道和機器人。 关于使用 `@Botfather`的机器人设置的说明，请参阅 [Telegram 文档的](https://core.telegram.org/bots#6-botfather) 部分。
6. 完成后，邀请机器人进入新创建的频道。
{% endtab %}

{% tab title="Discord Notifications" %}
1. 在 Grafana 菜单中，在铃声图标下选择 **个通知频道**。 ![](../../.gitbook/assets/gra-noti.png)
2. 点击 **添加频道**。
3. 在通知频道中添加 **名称**。
4. 从类型列表中选择 **Discord**。
5. 要完成设置，需要一个 Discord 服务器 \(和文本频道可用\) 和 Webhook URL。 For instructions on setting up a Discord's Webhooks, see [this section](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks) of their documentation.
6. 在 Discord 通知设置面板中输入 Webhook **URL**。
7. 点击 **发送测试**, 以便将确认消息推送到 Discord 频道。
{% endtab %}

{% tab title="Slack Notifications" %}
1. 在 Grafana 菜单中，在铃声图标下选择 **个通知频道**。 ![](../../.gitbook/assets/gra-noti.png)
2. 点击 **添加频道**。
3. 在通知频道中添加 **名称**。
4. 从类型列表中选择 **Slack**。
5. 关于设置Slack传入Webhooks的指示，请参阅 [他们的文档](https://api.slack.com/messaging/webhooks) 部分。
6. 输入 **URL** 字段中的 Slack 传入的 Webhook URL。
7. 点击 **发送测试**, 以便将确认消息推送到 Slack 频道。
{% endtab %}
{% endtabs %}

{% hint style="success" %}
:party_poper: 恭喜您设置验证器！ 你很高兴继续使用 eth2.0 。

你觉得我们的指南有用吗？ 让我们知道一个小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小小，我们会不断更新它。

使用 [cointr.ee 找到我们的捐赠 ](https://cointr.ee/coincashew)个地址。 🙌

任何反馈和所有拉取请求都非常感激。 😃

在电报@上挂起并与他人聊天 [https://t.me/coincashew](https://t.me/coincashew) :first_quarter_moon_face
{% endhint %}

## 🧙♂ 11. 正在更新Prysm

按照正常操作程序重新启动信标链和验证器。

{% tabs %}
{% tab title="Systemd - Automated" %}
```text
sudo systemctl 重新加载或重新启动信标链
sudo systemctl 重新加载或重新启动验证器
```
{% endtab %}

{% tab title="CLI - Manual" %}
```bash
#Control C 退出信标链和验证器进程 
#按上箭头进入重启。
```
{% endtab %}
{% endtabs %}

## 🧩 12. 参考材料

赞赏优秀民俗在以下链接所做的艰苦工作，以此作为编写本指南的基础。

{% 嵌入的 url="https://discord.gg/KSA7rPr" %}

{% 嵌入的 url="https://launchpad.eysum.org/" caption="" %}

{% 嵌入的 url="https://prylabs.net/participate" %}

{% 嵌入的 url="https://docs.prylabs.network/docs/getting-started/" %}

## 🎉 13. 红包链接

### 🌰 CoinCashew Guides for other ETH2 Clients

{% page-ref page="guide-how-to-stake-on-eth2-with-lighthouse.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-teku-on-ubuntu.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-nimbus.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-lodestar.md" %}

### 🧱 ETH2 区块浏览器

{% 嵌入的 url="https://信标.in" 标题="" %}

{% 嵌入的 url="https://信标scan.com" 标题="" %}

### 🗒 最新Eth2 信息

{% embed url="https://www.reddit.com/r/ethstaker" caption="" %}

{% 嵌入的 url="https://blog.eferum.org" 字幕="" %}

{% 嵌入的 url="http://invite.gg/ethstaker" 字幕="" %}

{% 嵌入的 url="https://hackmd.io/@benjaminion/eth2\_news/" caption="" %}

## 🔥 14. 其他有用的提示

### 🛑 14.1 自愿退出验证器

{% hint style="info" %}
使用此命令表示您打算停止与您的验证器验证。 这意味着您不再想要与您的验证器关联，想要关闭您的节点。

* 自愿退出至少需要 2048 epochs \(或~9days \)。 在您的验证程序最终退出之前，有一个要退出的队列和延迟。
* 一旦验证器在阶段0退出，这是不可逆转的，您无法重新开始验证。
* 您的资金将在1.5或更高阶段前无法提款。
* 在您的验证器离开出口队列并真正退出后，关闭您的信标节点和验证器是安全的。
{% endhint %}

```bash
$HOME/prysm/prysm.sh 验证帐户自愿退出
```

### 🔐 14.2 验证您的助记词

使用 eth2seosit-cli 工具来恢复您的 `validator_key` 以确保您可以重新生成相同的 eth2 键对。

```bash
./存款 existing-mnemonic --chain mainnet
```

{% hint style="info" %}
当 **pubkey** 相同时，这意味着您的 **密钥存储文件** 您正确地验证了您的密语句。 其他字段因为打折而不同。
{% endhint %}

### 🤖 14.3 添加额外的验证器

使用 eth2dosit-cli 工具，您可以通过创建新的存款数据文件和 `validator_keys` 来添加更多的验证器

例如，如果我们最初创建了3个验证器，但现在希望添加5个验证器，我们可以使用以下命令。

```bash
./life existing-mnemonic --validator_start_index 3 --num_validators 5 --chain mainnet
```

完成上传 `deposit_data-#########.json` 到发射台站的步骤。

