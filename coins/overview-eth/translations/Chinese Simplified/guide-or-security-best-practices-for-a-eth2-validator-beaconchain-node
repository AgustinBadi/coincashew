---
description: 快速保护节点的步骤。
---

# 指南 \| ETH2 验证信标链节点的安全最佳做法

## 🤖 前提条件

* 已安装 Ubuntu 服务器或 Ubuntu 桌面
* 已安装 SSH 服务器
* 一个 SSH 客户端或终端窗口访问

如果您需要安装 SSH 服务器，请参考：

{% 嵌入的 url="https://www.simportfied.guide/ubuntu/install-sh-server" %}

如果您的操作系统需要一个 SSH 客户端，请参考：

{% 嵌入的 url="https://www.howtogeek.com/311287/how-connect-to-an-ssh-server-from-windows-macos-or linux/" %}

## 🧙:♂创建一个非根用户，拥有sudo 权限

{% hint style="info" %}
使用非根帐户登录到您的服务器的习惯。 如果发生错误，这将防止文件被意外删除。 例如，如果root 用户错误地运行，命令 `rm` 可以擦除整个服务器。
{% endhint %}

{% hint style="danger" %}
🔥**提示**: 不要经常使用根帐户。 使用 `su` 或 `sudo`, 总是.
{% endhint %}

通过您的 SSH 客户端到您的服务器

```bash
ssh username@server.public.ip.address
# 示例
# ssh myUsername@77.22.161.10
```

创建一个叫做etherum的新用户

```text
sudo useradd -m -s /bin/bash ethereum
```

设置etherum用户密码

```text
sudo passwd ethereum
```

将etherum添加到sudo组

```text
sudo usermod -aG sudo ethereum
```

## 🔐 **禁用 SSH 密码验证并仅使用 SSH 密钥**

{% hint style="info" %}
加强SSH的基本规则是：

* 没有访问SSH 的密码 \(使用私钥\)
* 不允许 SSH \(适当用户应该在 SSH 中，然后 `su` 或 `sudo`\)
* 对用户使用 `sudo` 以便命令被记录
* 记录未经授权的登录尝试 \(并考虑软件到屏蔽/封禁用户，他们试图访问您的服务器太多次，如失败2ban\)
* 锁定SSH 到只需要的 IP 范围\(如果你觉得它喜欢它\)
{% endhint %}

在您的本地机器上创建新的 SSH 密钥对。 在您的本地机器上运行它。 您将被要求输入要保存密钥的文件名。 这将是您的 **关键名**。

您选择 [ED25519 或 RSA](https://goteleport.com/blog/comparing-ssh-keys/) 公钥算法。

{% tabs %}
{% tab title="ED25519" %}
```
ssh-keygen -t ed25519
```
{% endtab %}

{% tab title="RSA" %}
```bash
ssh-keygen -t rsa -b 4096
```
{% endtab %}
{% endtabs %}

将公钥传输到您的远程节点。 正确更新 **keyname.pub**。

```bash
ssh-copy-id -i $HOME/.ssh/keyname.pub ethereum@server.public.ip.address
```

使用您的新用户登录

```text
ssh ethereum@server.public.ip.address
```

禁用基于根登录和密码的登录。 编辑 `/etc/ssh/sshd_config 文件`

```text
sudo nano /etc/ssh/sshd_config
```

找到 **个挑战响应身份验证** 并更新为 no

```text
ChallengeResponseAuthentication no
```

找到 **个密码认证** 更新至无

```text
PasswordAuthentication no
```

找到 **PermitRoot登录** 并更新为无

```text
PermitRootLogin no
```

找到 **PermittemptyPasswords** 并更新为 no

```text
PermitEmptyPasswords no
```

**可选的**: 定位 **端口** 并自定义您的 **随机** 端口。

{% hint style="info" %}
使用 **随机** 端口 \# 从 1024 推送到49141 。 [检查可能发生的冲突。 ](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)
{% endhint %}

```bash
Port <port number>
```

验证您新的 SSH 配置的语法。

```text
sudo sshd -t
```

如果语法验证没有错误，则重新加载 SSH 进程

```text
sudo service sshd reload
```

验证登录仍然工作

{% tabs %}
{% tab title="Standard SSH Port 22" %}
```text
ssh ethereum@server.public.ip.address
```
{% endtab %}

{% tab title="Custom SSH Port" %}
```bash
ssh ethereum@server.public.ip.address -p <custom port number>
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
或者，您可能需要使用。 如果您使用了自定义 SSH 端口，添加 `-p <port#>` 标记。

```bash
ssh -i <path to your SSH_key_name.pub> ethereum@server.public.ip.address
```
{% endhint %}

## 🤖 **更新你的系统**

{% hint style="warning" %}
非常重要的是，要使您的系统跟上最新的补丁，以防止闯入者访问您的系统。
{% endhint %}

```bash
sudo apt-get update -y && sudo apt-get upgrade -y
sudo apt-get autoremove
sudo apt-get autoclean
```

启用自动更新，您不必手动安装。

```text
sudo apt-get install unattended-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades
```

## 🐻 禁用根帐户

系统管理员不应经常以 root 身份登录以维护服务器安全。 相反，您可以使用 sudo 执行要求低级特权。

```bash
# 要禁用根帐户，只需使用 -l 选项。
sudo passwd -l root
```

```bash
# 如果由于某些有效的原因，您需要重新启用帐户，只需使用 -u 选项。
sudo passwd -u root
```

## 🛠 设置 SSH 的两步验证 \[可选\]

{% hint style="info" %}
SSH是安全的外壳，经常用于访问远程Linux系统。 因为我们经常使用它来连接包含重要数据的计算机，建议添加另一个安全层。 这里是双重身份验证 \(_2FA_\)。
{% endhint %}

```text
sudo apt install libpam-google-authenticator -y
```

要使用 Google 身份验证器 PAM 模块，编辑 `/etc/pam.d/sshd` 文件：

```text
sudo nano /etc/pam.d/sshd
```

增加以下行：

```text
auth required pam_google_authenticator.so
```

现在您需要重启 `sshd` 守护程序使用：

```text
sudo systemctl restart sshd.service
```

修改 `/etc/ssh/sshd_config`

```text
sudo nano /etc/ssh/sshd_config
```

找到 **个挑战响应身份验证** 并更新为 yes

```text
ChallengeResponseAuthentication yes
```

找到 **UsePAM** 并更新为是的

```text
UsePAM yes
```

保存文件并退出。

运行 **Google 身份验证器** 命令。

```text
google-authenticator
```

它会向您提出一系列问题，这里是推荐的配置：

* 让令牌“时间基础”：“是”
* 更新 `.google_author` 文件：是
* 不允许多次使用：是
* 增加最初生成时间限制：无
* 启用频率限制：是

您可能已经注意到过程中出现的巨型二维码。 下面是如果您无法访问您的手机时将使用的紧急验证码：将其写在纸上，并将其保存在一个安全的地方。

现在在您的手机上打开谷歌身份验证器并添加您的密钥以使两步验证正常。

{% hint style="danger" %}
**Note**: If you are enabling 2FA on a remote machine that you access over SSH you need to follow **steps 2 and 3** of [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-18-04) to make 2FA work.
{% endhint %}

## 🧩 安全共享内存

{% hint style="info" %}
您应该做的第一件事是保护系统上共享的 [内存](https://www.lifewire.com/what-is-random-access-memory-ram-2618159)。 如果您不清楚，共享内存可以用于攻击运行中的服务。 因此，确保系统内存的这一部分。

要了解更多关于安全共享内存的信息，请阅读 [techRepublic.com文章](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/)。
{% endhint %}

{% hint style="warning" %}
### 一个例外情况

您可能有理由需要将内存空间挂载在读/写模式\(例如一个 **DappNode** 这样的特定服务器应用程序需要此种访问共享内存或诸如Google Chrome\等标准应用程序)。 在这种情况下，使用 fstab 文件的下列行，并在下面加以说明。

```text
none /run/shm tmpfs rw,noexec,nosuid,nodev 0 0
```

上面的行将挂载共享内存，带有读/写访问权限，但没有执行程序的权限。 更改运行程序的 UID 或在命名空间中创建方块或字符设备。 这是默认设置的净安全性改进。

### 谨慎使用

有一些试用版和错误，您可能会发现一些应用程序\(**像DappNode**\) 在只读模式下无法使用共享内存。 为了最高的安全性，如果与您的应用程序兼容，执行此安全共享内存设置是值得努力的。

资料来源： [techRepublic.com](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/)
{% endhint %}

编辑 `/etc/fstab`

```text
sudo nano /etc/fstab
```

插入以下行到文件底部并保存/关闭. 将共享内存设置为只读模式。

```text
tmpfs    /run/shm    tmpfs    ro,noexec,nosuid    0 0
```

重启节点以使更改生效。

```text
sudo reboot
```

## :chains：**安装失败2ban**

{% hint style="info" %}
Fail2ban 是一个防止侵入的系统，用于监测日志文件和搜索与失败登录尝试相对应的特定模式。 如果从指定的 IP 地址\(在指定时间内\)检测到一定数量的失败登录， 失败2封禁方块从该IP地址访问。
{% endhint %}

```text
sudo apt-get install fail2ban -y
```

编辑监视SSH登录的配置文件。

```text
sudo nano /etc/fail2ban/jail.local
```

将以下行添加到文件底部。

{% hint style="info" %}
🔥 **将IP地址提示**: `忽略` 参数接受IP地址 您可以指定允许连接的 IP 范围或 DNS 主机. 这是您想要指定本地机器，本地IP范围或本地域名，用空格隔开。

```bash
# Example
ignoreip = 192.168.1.0/24 127.0.0.1/8 
```
{% endhint %}

```bash
[sshd]
enabled = true
port = <22 or your random port number>
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
# whitelisted IP addresses
ignoreip = <list of whitelisted IP address, your local daily laptop/pc>
```

保存/关闭文件。

重启失败2封禁以使设置生效。

```text
sudo systemctl restart fail2ban
```

## 🧱**配置你的防火墙**

标准的 UFW 防火墙可以用来控制您节点的网络访问。

任何新安装都将禁用 ufw 默认。 通过以下设置启用它。

* 端口 22 \(或您的随机端口 \#\) SSH 连接
* P2p 流量的端口
  * 灯塔使用端口 9000 tcp/udp
  * Teku 使用端口 9000 tcp/udp
  * Prysm使用端口 13000 tcp 和 12000 udp
  * Nimbus使用端口 9000 tcp/udp
  * Lodestar使用端口 30607 tcp 和 9000 udp
* 端口 303 tcp/udp eth1 节点
* Grafana 的 3000 tcp 端口
* Prometheus导出数据的端口 900 tcp \(optional\)

{% tabs %}
{% tab title="Lighthouse" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Prysm" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 13000/tcp
sudo ufw allow 12000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Teku" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 30607/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}
{% endtabs %}

{% hint style="danger" %}
不要将Grafana \(porter 3000\) 和 Prometheus 端点 \(端口 90\) 泄露到公共互联网，因为这会引起新的攻击表面！ 一个安全的解决方案将是通过 Wireguard 的 ssh 隧道访问Grafana 。
{% endhint %}

仅在家庭路由器防火墙或其他网络防火墙后的本地主楼安装端口打开以下端口。

\*\*\*🔥 **在 VPS/cloud 节点上打开这些端口是危险的。**

```bash
sudo ufw allow 3000/tcp
sudo ufw allow 9090/tcp
```

确认设置已生效。
> ```csharp
     To                         Action      From
     --                         ------      ----
[ 1] 22/tcp                     ALLOW IN    Anywhere
# SSH
[ 2] 3000/tcp                   ALLOW IN    Anywhere
# Grafana
[ 3] 9000/tcp                   ALLOW IN    Anywhere
# eth2 p2p traffic
[ 4] 9090/tcp                   ALLOW IN    Anywhere
# Prometheus
[ 5] 30303/tcp                  ALLOW IN    Anywhere
# eth1 node
[ 6] 22/tcp (v6)                ALLOW IN    Anywhere (v6)
# SSH
[ 7] 3000/tcp (v6)              ALLOW IN    Anywhere (v6)
# Grafana
[ 8] 9000/tcp (v6)              ALLOW IN    Anywhere (v6)
# eth2 p2p traffic
[ 9] 9090/tcp (v6)              ALLOW IN    Anywhere (v6)
# Prometheus
[10] 30303/tcp (v6)             ALLOW IN    Anywhere (v6)
# eth1 node
```

**\[ 可选但推荐\]** 白名单\(或允许从特定IP\进行连接) 可以通过以下命令进行设置。

```bash
sudo ufw allow from <your local daily laptop/pc>
# Example
# sudo ufw allow from 192.168.50.22
```

{% hint style="info" %}
 🎊 **端口转发提示:** 您需要转发并打开端口到您的验证器。 验证它使用 [https://www.yugetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) 或 [https://canyousee.org/](https://canyouseeme.org/)。
{% endhint %}

## :phone_receiver: 验证监听端口

如果你想要维护一个安全的服务器，你应该每次一次验证监听网络端口。 这将为您提供有关您网络的基本信息。

```bash
sudo ss -tulpn
# 示例输出。 确保端口号是正确的。
# Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
# tcp ListeN 0128 127. 0.0.1:5052 0.0.0。 * 用户:("灯塔",pid=12160) d=22)
tcp LISTEN 0 128 127。 0.1:5054 0.0.0.0：* 用户:("灯塔",pid=12160) d=23)
# tcp LISTEN 0 1024 0。 0.0:9000 0.0.0。 * 用户:("灯塔",pid=12160) d=21)
# udp UNCONN 0 *：30303 *：users:("geth", id=22117。 d=158)
# tcp LISTEN 0 4096 *：30303 *：users:("geth", id=22117,fd=156))
```

或者，您可以使用 `netstat`

```bash
sudo netstat -tulpn
# 示例输出。 确保端口号是正确的。
# Proto Recv-Q Send-Q 本地地址异常地址状态 PID/程序名
# tcp 0 0 127。 0.0.1:5052 0.0.0。 * * ISTEN 12160/lightthouse
# tcp 0 0 127。 0。 :5054 0.0.0。 * * ISTEN 12160/lightthouse
# tcp 0 0 0。 0.0:9000 0.0.0。 * * LISTEN 12160/lightthouse
# tcp6 0 0 0 ::::::::30303 :::* LISTEN 22117/geth
# udp6 0 0 :::30303 :*::* LISTEN 22117/geth
```

## 👩🚀 **使用** 系统用户帐户 - 最少特权原则 \[高级用户/可选\]

{% hint style="info" %}
**仅推荐高级用户**

**特权最少的原则**: 每个eth2 进程都被分配一个 _系统用户帐户_ 并且运行的权限最少是运行的权限才能正常运行。 这种最佳做法保护人们免受在某一特定过程中发现的脆弱性或剥削可能使人们能够进入其他系统过程的情况。
{% endhint %}

```bash
# 为eth1 服务创建系统用户帐户
sudo adduser --system --no-create-home eth1

# 为验证服务创建系统用户帐户
sudo adduser --system --no-create-home validator

# 为信标链服务创建系统用户帐户
sudo adduser --system --no-create-home beacon-chain

# 为slasher 创建系统用户帐户
sudo adduser --system --no-create-home slasher
```

{% hint style="danger" %}
\*\*\*🔥 **为高级用户提供的护法**

如果您决定使用 **系统用户帐户**，请记住用相应的用户替换 **系统单位文件**。

```bash
# 信标链的示例。服务单元文件
用户 = 信标链。
```

此外，确保正确的 **文件所有权** 已经分配给您的 **系统用户帐户**。

```bash
# prysm 验证器密码文件示例
sudo chown validator:validator -R $HOME/.eth2validators/validators-password.txt
```
{% endhint %}

## :sparkls: 额外验证节点最佳做法

<table>
  <thead>
    <tr>
      <th style="text-align:left"></th>
      <th style="text-align:left"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align:left">建立网络</td>
      <td style="text-align:left">
        <p></p>
        <p>将静态内部IP分配给您的验证器节点和每日笔记本/PC。
          这与ufw 和 Fail2ban&apos;s 白名单
          功能是有用的。 通常，这可以在您的路由器&apos;s设置中进行配置。
          请参考您的路由器&apos;s 手册了解说明。</p>
      </td>
    </tr>
    <tr>
      <td style="text-align:left">电源故障</td>
      <td style="text-align:left">在停电的情况下，你想要你的验证机器在
        可用时重新启动。 在 BIOS 设置中，更改电源丢失时的 <b>还原</b> 或 <b>电源丢失后</b> 设置
        以便继续开启。 更好的是，安装一个不可中断的电源(UPS)。</td>
    </tr>
    <tr>
      <td style="text-align:left">清除基础历史记录</td>
      <td style="text-align:left">
        <p>当按下上箭头键时，您可以看到先前的命令可能包含
          个敏感数据。 若要清除此项，请运行以下操作：</p>
        <p><code>shred -u ~/.bash_history &amp;&amp; tount ~/.bash_history</code>
        </p>
      </td>
    </tr>
  </tbody>
</table>

{% hint style="info" %}
请务必查看 [清单 \| 如何确认一个健康的 ETH2 验证器。](guide-or-how-to-setup-a-validator-on-eth2-mainnet/checklist-or-how-to-confirm-a-healthy-functional-eth2-validator.md)
{% endhint %}

## 🤖 通过构建一个验证器来开始舞蹈。

### 为我们的 [主要指南](guide-or-how-to-setup-a-validator-on-eth2-mainnet/) 访问此处，为我们的 [测试网指南](guide-or-how-to-setup-a-validator-on-eth2-testnet.md) 访问此处。

{% hint style="success" %}
恭喜您完成了指南。 ✨

你觉得我们的指南有用吗？ 向我们发送一个带有提示的信息，我们将不断更新它。

它真正激励我们继续创建最好的加密指南。

使用 [cointr.ee 找到我们的捐赠 ](https://cointr.ee/coincashew)个地址。 🙏

任何反馈和所有拉取请求都非常感激。 🌛

在 Discord 上挂起并与他人聊天 @

[https://discord.gg/w8Bx8W2HPW](https://discord.gg/w8Bx8W2HPW)😃
{% endhint %}

🎊 **2020-12 更新**: 感谢所有 [Gitcoin](https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew) 贡献者 您可以通过 [二次供资](https://vitalik.ca/general/2019/12/07/quadratic.html) 做出贡献并产生重大影响。 融资已完成！ 谢谢！:folded_hands：

{% embed url="https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew" %}

## 🚀 参考

{% embed url="https://med.com/@BaneBiddix/howto harden-ubuntu-18-04-server-ffc4b6658fe7" caption="" %}

{% 嵌入的 url="https://linux-audit.com/ubuntu-server-hardening-guide-Quice-and-secure/" caption="" %}

{% embed url="https://www.digitalocean.com/community/tutorials/how to harden-openssh-on-ubuntu-18-04" caption="" %}

{% 嵌入的 url="https://ubuntu.com/tutorials/configure-ssh-2fa\#1-overview.”标题="" %}

{% 嵌入的 url="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/" %}

[https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3\#file-ubuntu-hardening-md](https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3#file-ubuntu-hardening-md)

{% 嵌入的 url="https://www.lifewire.com/harden-ubuntu-server-security,4178243"字幕="" %}

{% 嵌入的 url="https://www.ubuntupit.com/best-linux-hardening-security-tips-a-complesive-checklist/" caption="" %}

