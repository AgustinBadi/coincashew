---
description: 快速保护节点的步骤。
---

# 指南 \| ETH2 验证信标链节点的安全最佳做法

## 🤖 前提条件

* 已安装 Ubuntu 服务器或 Ubuntu 桌面
* 已安装 SSH 服务器
* 一个 SSH 客户端或终端窗口访问

如果您需要安装 SSH 服务器，请参考：

{% 嵌入的 url="https://www.simportfied.guide/ubuntu/install-sh-server" %}

如果您的操作系统需要一个 SSH 客户端，请参考：

{% 嵌入的 url="https://www.howtogeek.com/311287/how-connect-to-an-ssh-server-from-windows-macos-or linux/" %}

## 🧙:♂创建一个非根用户，拥有sudo 权限

{% hint style="info" %}
使用非根帐户登录到您的服务器的习惯。 如果发生错误，这将防止文件被意外删除。 例如，如果root 用户错误地运行，命令 `rm` 可以擦除整个服务器。
{% endhint %}

{% hint style="danger" %}
🔥**提示**: 不要经常使用根帐户。 使用 `su` 或 `sudo`, 总是.
{% endhint %}

通过您的 SSH 客户端到您的服务器

```bash
ssh username@server.public.ip.address
# 示例
# ssh myUsername@77.22.161.10
```

创建一个叫做etherum的新用户

```text
sudo useradd -m -s /bin/bash ethereum
```

设置etherum用户密码

```text
sudo passwd ethereum
```

将etherum添加到sudo组

```text
sudo usermod -aG sudo ethereum
```

## 🔐 **禁用 SSH 密码验证并仅使用 SSH 密钥**

{% hint style="info" %}
加强SSH的基本规则是：

* 没有访问SSH 的密码 \(使用私钥\)
* 不允许 SSH \(适当用户应该在 SSH 中，然后 `su` 或 `sudo`\)
* 对用户使用 `sudo` 以便命令被记录
* 记录未经授权的登录尝试 \(并考虑软件到屏蔽/封禁用户，他们试图访问您的服务器太多次，如失败2ban\)
* 锁定SSH 到只需要的 IP 范围\(如果你觉得它喜欢它\)
{% endhint %}

在您的本地机器上创建新的 SSH 密钥对。 在您的本地机器上运行它。 您将被要求输入要保存密钥的文件名。 这将是您的 **关键名**。

您选择 [ED25519 或 RSA](https://goteleport.com/blog/comparing-ssh-keys/) 公钥算法。

{% tabs %}
{% tab title="ED25519" %}
```
ssh-keygen -t ed25519
```
{% endtab %}

{% tab title="RSA" %}
```bash
ssh-keygen -t rsa -b 4096
```
{% endtab %}
{% endtabs %}

将公钥传输到您的远程节点。 正确更新 **keyname.pub**。

```bash
ssh-copy-id -i $HOME/.ssh/keyname.pub ethereum@server.public.ip.address
```

使用您的新用户登录

```text
ssh ethereum@server.public.ip.address
```

禁用基于根登录和密码的登录。 编辑 `/etc/ssh/sshd_config 文件`

```text
sudo nano /etc/ssh/sshd_config
```

找到 **个挑战响应身份验证** 并更新为 no

```text
ChallengeResponseAuthentication no
```

找到 **个密码认证** 更新至无

```text
PasswordAuthentication no
```

找到 **PermitRoot登录** 并更新为无

```text
PermitRootLogin no
```

找到 **PermittemptyPasswords** 并更新为 no

```text
PermitEmptyPasswords no
```

**可选的**: 定位 **端口** 并自定义您的 **随机** 端口。

{% hint style="info" %}
使用 **随机** 端口 \# 从 1024 推送到49141 。 [检查可能发生的冲突。 ](https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers)
{% endhint %}

```bash
Port <port number>
```

验证您新的 SSH 配置的语法。

```text
sudo sshd -t
```

如果语法验证没有错误，则重新加载 SSH 进程

```text
sudo service sshd reload
```

验证登录仍然工作

{% tabs %}
{% tab title="Standard SSH Port 22" %}
```text
ssh ethereum@server.public.ip.address
```
{% endtab %}

{% tab title="Custom SSH Port" %}
```bash
ssh ethereum@server.public.ip.address -p <custom port number>
```
{% endtab %}
{% endtabs %}

{% hint style="info" %}
Alternatively, you might need to add the `-p <port#>` flag if you used a custom SSH port.

```bash
ssh -i <path to your SSH_key_name.pub> ethereum@server.public.ip.address
```
{% endhint %}

**Optional**: Make logging in easier by updating your local ssh config.

To simplify the ssh command needed to log in to your server, consider updating your local `$HOME/.ssh/config` file:

```bash
Host ethereum-server
  User ethereum
  HostName <server.public.ip.address>
  Port <custom port number>
```

This will allow you to log in with `ssh ethereum-server` rather than needing to pass through all ssh parameters explicitly.

## 🤖 **Update your system**

{% hint style="warning" %}
It's critically important to keep your system up-to-date with the latest patches to prevent intruders from accessing your system.
{% endhint %}

```bash
sudo apt-get update -y && sudo apt-get upgrade -y
sudo apt-get autoremove
sudo apt-get autoclean
```

Enable automatic updates so you don't have to manually install them.

```text
sudo apt-get install unattended-upgrades
sudo dpkg-reconfigure -plow unattended-upgrades
```

## 🐻 Disable root account

System admins should not frequently log in as root in order to maintain server security. Instead, you can use sudo execute that require low-level privileges.

```bash
# To disable the root account, simply use the -l option.
sudo passwd -l root
```

```bash
# If for some valid reason you need to re-enable the account, simply use the -u option.
sudo passwd -u root
```

## 🛠 Setup Two Factor Authentication for SSH \[Optional\]

{% hint style="info" %}
SSH, the secure shell, is often used to access remote Linux systems. Because we often use it to connect with computers containing important data, it’s recommended to add another security layer. Here comes the two factor authentication \(_2FA_\).
{% endhint %}

```text
sudo apt install libpam-google-authenticator -y
```

To make SSH use the Google Authenticator PAM module, edit the `/etc/pam.d/sshd` file:

```text
sudo nano /etc/pam.d/sshd
```

Add the following line:

```text
auth required pam_google_authenticator.so
```

Now you need to restart the `sshd` daemon using:

```text
sudo systemctl restart sshd.service
```

Modify `/etc/ssh/sshd_config`

```text
sudo nano /etc/ssh/sshd_config
```

Locate **ChallengeResponseAuthentication** and update to yes

```text
ChallengeResponseAuthentication yes
```

Locate **UsePAM** and update to yes

```text
UsePAM yes
```

Save the file and exit.

Run the **google-authenticator** command.

```text
google-authenticator
```

It will ask you a series of questions, here is a recommended configuration:

* 让令牌“时间基础”：“是”
* 更新 `.google_author` 文件：是
* 不允许多次使用：是
* 增加最初生成时间限制：无
* 启用频率限制：是

You may have noticed the giant QR code that appeared during the process, underneath are your emergency scratch codes to be used if you don’t have access to your phone: write them down on paper and keep them in a safe place.

Now, open Google Authenticator on your phone and add your secret key to make two factor authentication work.

{% hint style="danger" %}
**Note**: If you are enabling 2FA on a remote machine that you access over SSH you need to follow **steps 2 and 3** of [this tutorial](https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-18-04) to make 2FA work.
{% endhint %}

## 🧩 Secure Shared Memory

{% hint style="info" %}
One of the first things you should do is secure the shared [memory](https://www.lifewire.com/what-is-random-access-memory-ram-2618159) used on the system. If you're unaware, shared memory can be used in an attack against a running service. Because of this, secure that portion of system memory.

To learn more about secure shared memory, read this [techrepublic.com article](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/).
{% endhint %}

{% hint style="warning" %}
### 一个例外情况

There may be a reason for you needing to have that memory space mounted in read/write mode \(such as a specific server application like **DappNode** that requires such access to the shared memory or standard applications like Google Chrome\). In this case, use the following line for the fstab file with instructions below.

```text
none /run/shm tmpfs rw,noexec,nosuid,nodev 0 0
```

The above line will mount the shared memory with read/write access but without permission to execute programs, change the UID of running programs, or to create block or character devices in the namespace. This a net security improvement over default settings.

### 谨慎使用

With some trial and error, you may discover some applications\(**like DappNode**\) do not work with shared memory in read-only mode. For the highest security and if compatible with your applications, it is a worthwhile endeavor to implement this secure shared memory setting.

Source: [techrepublic.com](https://www.techrepublic.com/article/how-to-enable-secure-shared-memory-on-ubuntu-server/)
{% endhint %}

Edit `/etc/fstab`

```text
sudo nano /etc/fstab
```

Insert the following line to the bottom of the file and save/close. This sets shared memory into read-only mode.

```text
tmpfs    /run/shm    tmpfs    ro,noexec,nosuid    0 0
```

Reboot the node in order for changes to take effect.

```text
sudo reboot
```

## ⛓**Install Fail2ban**

{% hint style="info" %}
Fail2ban is an intrusion-prevention system that monitors log files and searches for particular patterns that correspond to a failed login attempt. If a certain number of failed logins are detected from a specific IP address \(within a specified amount of time\), fail2ban blocks access from that IP address.
{% endhint %}

```text
sudo apt-get install fail2ban -y
```

Edit a config file that monitors SSH logins.

```text
sudo nano /etc/fail2ban/jail.local
```

Add the following lines to the bottom of the file.

{% hint style="info" %}
🔥 **Whitelisting IP address tip**: The `ignoreip` parameter accepts IP addresses, IP ranges or DNS hosts that you can specify to be allowed to connect. This is where you want to specify your local machine, local IP range or local domain, separated by spaces.

```bash
# Example
ignoreip = 192.168.1.0/24 127.0.0.1/8 
```
{% endhint %}

```bash
[sshd]
enabled = true
port = <22 or your random port number>
filter = sshd
logpath = /var/log/auth.log
maxretry = 3
# whitelisted IP addresses
ignoreip = <list of whitelisted IP address, your local daily laptop/pc>
```

Save/close file.

Restart fail2ban for settings to take effect.

```text
sudo systemctl restart fail2ban
```

## 🧱**Configure your Firewall**

The standard UFW firewall can be used to control network access to your node.

With any new installation, ufw is disabled by default. Enable it with the following settings.

* 端口 22 \(或您的随机端口 \#\) SSH 连接
* P2p 流量的端口
  * 灯塔使用端口 9000 tcp/udp
  * Teku 使用端口 9000 tcp/udp
  * Prysm使用端口 13000 tcp 和 12000 udp
  * Nimbus使用端口 9000 tcp/udp
  * Lodestar使用端口 30607 tcp 和 9000 udp
* 端口 303 tcp/udp eth1 节点

{% tabs %}
{% tab title="Lighthouse" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Prysm" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 13000/tcp
sudo ufw allow 12000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Teku" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Nimbus" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 9000/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}

{% tab title="Lodestar" %}
```bash
sudo ufw allow <22 or your random port number>/tcp
sudo ufw allow 30607/tcp
sudo ufw allow 9000/udp
sudo ufw allow 30303/tcp
sudo ufw allow 30303/udp
sudo ufw enable
sudo ufw status numbered
```
{% endtab %}
{% endtabs %}

{% hint style="danger" %}
Do not expose Grafana \(port 3000\) and Prometheus endpoint \(port 9090\) to the public internet as this invites a new attack surface! A secure solution would be to access Grafana through a ssh tunnel with Wireguard.
{% endhint %}

Only open the following ports on local home staking setups behind a home router firewall or other network firewall.

\*\*\*\*🔥 **It is dangerous to open these ports on a VPS/cloud node.**

```bash
sudo ufw allow 3000/tcp
sudo ufw allow 9090/tcp
```

Confirm the settings are in effect.
> ```csharp
     To                         Action      From
     --                         ------      ----
[ 1] 22/tcp                     ALLOW IN    Anywhere
# SSH
[ 2] 3000/tcp                   ALLOW IN    Anywhere
# Grafana
[ 3] 9000/tcp                   ALLOW IN    Anywhere
# eth2 p2p traffic
[ 4] 9090/tcp                   ALLOW IN    Anywhere
# Prometheus
[ 5] 30303/tcp                  ALLOW IN    Anywhere
# eth1 node
[ 6] 22/tcp (v6)                ALLOW IN    Anywhere (v6)
# SSH
[ 7] 3000/tcp (v6)              ALLOW IN    Anywhere (v6)
# Grafana
[ 8] 9000/tcp (v6)              ALLOW IN    Anywhere (v6)
# eth2 p2p traffic
[ 9] 9090/tcp (v6)              ALLOW IN    Anywhere (v6)
# Prometheus
[10] 30303/tcp (v6)             ALLOW IN    Anywhere (v6)
# eth1 node
```

**\[ Optional but recommended \]** Whitelisting \(or permitting connections from a specific IP\) can be setup via the following command.

```bash
sudo ufw allow from <your local daily laptop/pc>
# Example
# sudo ufw allow from 192.168.50.22
```

{% hint style="info" %}
 🎊 **Port Forwarding Tip:** You'll need to forward and open ports to your validator. 验证它使用 [https://www.yugetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) 或 [https://canyousee.org/](https://canyouseeme.org/)。
{% endhint %}

## 📞 Verify Listening Ports

If you want to maintain a secure server, you should validate the listening network ports every once in a while. This will provide you essential information about your network.

```bash
sudo ss -tulpn
# Example output. 确保端口号是正确的。
# Netid  State    Recv-Q  Send-Q    Local Address:Port   Peer Address:Port   Process
# tcp    LISTEN   0       128       127.0.0.1:5052       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=22))
# tcp    LISTEN   0       128       127.0.0.1:5054       0.0.0.0:*           users:(("lighthouse",pid=12160,fd=23))
# tcp    LISTEN   0       1024      0.0.0.0:9000         0.0.0.0:*           users:(("lighthouse",pid=12160,fd=21))
# udp    UNCONN   0       0         *:30303              *:*                 users:(("geth",pid=22117,fd=158))
# tcp    LISTEN   0       4096      *:30303              *:*                 users:(("geth",pid=22117,fd=156))
```

Alternatively you can use `netstat`

```bash
sudo netstat -tulpn
# Example output. 确保端口号是正确的。
# Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
# tcp        0      0 127.0.0.1:5052          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 127.0.0.1:5054          0.0.0.0:*               LISTEN      12160/lighthouse
# tcp        0      0 0.0.0.0:9000            0.0.0.0:*               LISTEN      12160/lighthouse
# tcp6       0      0 :::30303                :::*                    LISTEN      22117/geth
# udp6       0      0 :::30303                :::*                    LISTEN      22117/geth
```

## 👩🚀 **Use** system user accounts - Principle of Least Privilege \[Advanced Users / Optional\]

{% hint style="info" %}
**Recommended for Advanced Users Only**

**Principle of Least Privilege**: Each eth2 process is assigned a _system user account_ and runs under the least amount of privileges required in order to function. This best practice protects against a scenario where a vulnerability or exploit discovered in a specific process might enable access other system processes.
{% endhint %}

```bash
# creates system user account for eth1 service
sudo adduser --system --no-create-home eth1

# creates system user account for validator service
sudo adduser --system --no-create-home validator

# creates system user account for beacon-chain service
sudo adduser --system --no-create-home beacon-chain

# creates system user account for slasher
sudo adduser --system --no-create-home slasher
```

{% hint style="danger" %}
\*\*\*\*🔥 **Caveats For Advanced Users**

If you decide to use **system user accounts**, remember to replace the **systemd unit files** with the corresponding users.

```bash
# Example of beacon-chain.service unit file
User            = beacon-chain
```

Furthermore, ensure the correct **file ownership** is assigned to your **system user account** where applicable.

```bash
# Example of prysm validator's password file
sudo chown validator:validator -R $HOME/.eth2validators/validators-password.txt
```
{% endhint %}

## ✨ Additional validator node best practices

<table>
  <thead>
    <tr>
      <th style="text-align:left"></th>
      <th style="text-align:left"></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align:left">建立网络</td>
      <td style="text-align:left">
        <p></p>
        <p>将静态内部IP分配给您的验证器节点和每日笔记本/PC。
          这与ufw 和 Fail2ban&apos;s 白名单
          功能是有用的。 通常，这可以在您的路由器&apos;s设置中进行配置。
          请参考您的路由器&apos;s 手册了解说明。</p>
      </td>
    </tr>
    <tr>
      <td style="text-align:left">电源故障</td>
      <td style="text-align:left">在停电的情况下，你想要你的验证机器在
        可用时重新启动。 在 BIOS 设置中，更改电源丢失时的 <b>还原</b> 或 <b>电源丢失后</b> 设置
        以便继续开启。 更好的是，安装一个不可中断的电源(UPS)。</td>
    </tr>
    <tr>
      <td style="text-align:left">清除基础历史记录</td>
      <td style="text-align:left">
        <p>当按下上箭头键时，您可以看到先前的命令可能包含
          个敏感数据。 若要清除此项，请运行以下操作：</p>
        <p><code>shred -u ~/.bash_history &amp;&amp; tount ~/.bash_history</code>
        </p>
      </td>
    </tr>
  </tbody>
</table>

{% hint style="info" %}
请务必查看 [清单 \| 如何确认一个健康的 ETH2 验证器。](guide-or-how-to-setup-a-validator-on-eth2-mainnet/checklist-or-how-to-confirm-a-healthy-functional-eth2-validator.md)
{% endhint %}

## 🤖 Start staking by building a validator

### 为我们的 [主要指南](guide-or-how-to-setup-a-validator-on-eth2-mainnet/) 访问此处，为我们的 [测试网指南](guide-or-how-to-setup-a-validator-on-eth2-testnet.md) 访问此处。

{% hint style="success" %}
恭喜您完成了指南。 ✨

你觉得我们的指南有用吗？ 向我们发送一个带有提示的信息，我们将不断更新它。

它真正激励我们继续创建最好的加密指南。

使用 [cointr.ee 找到我们的捐赠 ](https://cointr.ee/coincashew)个地址。 🙏

任何反馈和所有拉取请求都非常感激。 🌛

在 Discord 上挂起并与他人聊天 @

[https://discord.gg/w8Bx8W2HPW](https://discord.gg/w8Bx8W2HPW) :grinning_face_with_big_eyes：
{% endhint %}

🎊 **2020-12 更新**: 感谢所有 [Gitcoin](https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew) 贡献者 您可以通过 [二次供资](https://vitalik.ca/general/2019/12/07/quadratic.html) 做出贡献并产生重大影响。 融资已完成！ 谢谢！:folded_hands：

{% embed url="https://gitcoin.co/grants/1653/eth2-staking-guides-by-coincashew" %}

## 🚀 References

{% embed url="https://medium.com/@BaneBiddix/how-to-harden-your-ubuntu-18-04-server-ffc4b6658fe7" caption="" %}

{% embed url="https://linux-audit.com/ubuntu-server-hardening-guide-quick-and-secure/" caption="" %}

{% embed url="https://www.digitalocean.com/community/tutorials/how-to-harden-openssh-on-ubuntu-18-04" caption="" %}

{% embed url="https://ubuntu.com/tutorials/configure-ssh-2fa\#1-overview" caption="" %}

{% embed url="https://linuxize.com/post/install-configure-fail2ban-on-ubuntu-20-04/" %}

[https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3\#file-ubuntu-hardening-md](https://gist.github.com/lokhman/cc716d2e2d373dd696b2d9264c0287a3#file-ubuntu-hardening-md)

{% embed url="https://www.lifewire.com/harden-ubuntu-server-security-4178243" caption="" %}

{% embed url="https://www.ubuntupit.com/best-linux-hardening-security-tips-a-comprehensive-checklist/" caption="" %}

