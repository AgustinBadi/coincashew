---
description: >-
  Bliv en validator og hjælp med at sikre eth2, en proof-of-stake blockchain. Alle med 32 ETH kan deltage.
---

# Guide: Hvordan til at satse på ETH2 Mainnet med Prysm på Ubuntu

{% hint style="danger" %}
**24 nov 2020 Opdatering**: Den [nye mainnet guide er placeret her](guide-or-how-to-setup-a-validator-on-eth2-mainnet/).

Instruktionerne nedenfor er nu forældet og kun til reference.
{% endhint %}











{% hint style="info" %}
[Prysm](https://github.com/prysmaticlabs/prysm) er en Go implementering af Ethereum 2.0 protokol med fokus på brugervenlighed, sikkerhed og pålidelighed. Prysm er udviklet af [Prysmatic Labs](https://prysmaticlabs.com/), en virksomhed med det eneste fokus på udviklingen af deres klient. Prysm er skrevet i Go og udgivet under en GPL-3.0-licens.
{% endhint %}

## 🏁 0. Forudsætninger

### 👩💻 Færdigheder til at drive en eth2 validator og fyr node

Som validator for eth2, vil du typisk have følgende evner:

* operationel viden om, hvordan et eth2-fyr oprettes, køres og vedligeholdes kontinuerligt
* en forpligtelse til at vedligeholde din validator 24/7/365
* grundlæggende operativsystem færdigheder
* har lært det væsentlige ved at se ['Introduktion til Eth2 & Staking for begyndere' af Superphiz](https://www.youtube.com/watch?v=tpkpW031RCI)
* har bestået eller er aktivt tilmeldt [Eth2 Study Master kurset](https://ethereumstudymaster.com/)
* og har læst [8 Ting Hver Eth2 validator bør vide.](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

### 🎗 **Minimumskrav**

* **Operativsystem:** 64-bit Linux \(dvs. Ubuntu 20.04 LTS\)
* **Processor:** Dual core CPU, Intel Core i5-760 eller AMD FX-8100 eller bedre
* **Memory:** 8GB RAM
* **Opbevaring:** 20 GB SSD
* **Internet:** Bredbåndsinternetforbindelse med hastigheder på mindst 1 Mbps.
* **Effekt:** Pålidelig elektrisk effekt.
* **ETH saldo:** mindst 32 ETH og nogle ETH for indskudsgebyrer
* **Wallet**: Metamask installeret

### 🏋♂ Anbefalet Hardwareopsætning

* **Operativsystem:** 64-bit Linux \(dvs. Ubuntu 20.04 LTS\)
* **Processor:** Quad core CPU, Intel Core i7-4770 eller AMD FX-8310 eller bedre
* **Hukommelse:** 16 GB RAM eller mere
* **Opbevaring:** 1TB SSD eller mere
* **Internet:** Bredbåndsinternetforbindelser med hastigheder på mindst 10 Mbps
* **Effekt:** Pålidelig elektrisk effekt med uafbrudt strømforsyning \(UPS\)
* **ETH saldo:** mindst 32 ETH og nogle ETH for indskudsgebyrer
* **Wallet**: Metamask installeret

{% hint style="warning" %}
:gnister: **Pro Validator Tip**: Anbefaler du meget at begynde med en helt ny udgave af et OS, VM og/eller maskine. Undgå hovedpine ved IKKE at genbruge testnet-nøgler, tegnebøger eller databaser til din mainnet validator.
{% endhint %}

### 🔓 Anbefalet eth2 validator Security Best Practices

Hvis du har brug for ideer eller en påmindelse om, hvordan du sikrer din validator, henvises til

{% page-ref page="guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md" %}

### 🛠 Setup Ubuntu

Hvis du har brug for at installere Ubuntu, henvises til

{% page-ref page="../overview-xtz/guide-how-to-setup-a-baker/install-ubuntu.md" %}

### 🎭 Opsætning Metamask

Hvis du har brug for at installere Metamask, henvises til

{% page-ref page="../../wallets/browser-wallets/metamask-ethereum.md" %}

## 🌱 1. Køb/bytte eller konsolidere ETH

{% hint style="info" %}
Hver 32 ETH du ejer giver dig mulighed for at gøre 1 validator. Du kan køre tusindvis af validatorer med dit fyr node.
{% endhint %}

Din ETH \(eller multipla af 32 ETH\) bør konsolideres i en enkelt adresse, der er tilgængelig med Metamask.

Hvis du har brug for at købe/udveksle eller supplere din ETH til et multiplum af 32, så tjek ud:

{% page-ref page="guide-how-to-buy-eth.md" %}

## 👩💻 2. Tilmelding til at være en validator på Launchpad

1. Installer afhængigheder, ethereum fundament indbetalingsværktøj og generere dine to sæt af centrale par.

{% hint style="info" %}
Hver validator vil have to sæt nøglepar. En **signeringsnøgle** og en **tilbagetrækningsnøgle.** Disse nøgler er afledt af en enkelt mnemonic sætning. [Få mere at vide om nøgler.](https://blog.ethereum.org/2020/05/21/keys/)
{% endhint %}

Du har valget mellem at downloade det forudbyggede [ethereum foundation depositum værktøj](https://github.com/ethereum/eth2.0-deposit-cli) eller bygge det fra kilden.

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
Download eth2deposit-kli.

```bash
cd $HOME
wget https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.0.0/eth2deposit-cli-9310de0-linux-amd64.tar.gz
```

Verificer SHA256 Checksum matcher checksummen på [udgivelsessiden](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.0.0).

```bash
sha256sum eth2deposit-cli-9310de0-linux-amd64.tar.gz 
# SHA256 skal være
# b09da136895a7f77a4b430924ea2ae5827fa47b2bf444c4ea6fcfac5b04b8c8a
```

Udpak arkivet.

```text
tar -xvf eth2deposit-cli-9310de0-linux-amd64.tar.gz
cd eth2deposit-cli-9310de0-linux-amd64
```

Lav en ny mnemonic.

```text
./depositum new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Build from source code" %}
Installér afhængigheder.

```text
sudo apt update
sudo apt install python3-pip git -y
```

Download kildekode og installer.

```text
mkdir ~/git
cd ~/git
git clone https://github.com/ethereum/eth2.0-deposit-cli.git
cd eth2.0-deposit-cli
sudo ./deposit.sh install
```

Lav en ny mnemonic.

```text
./deposit.sh new-mnemonic --chain mainnet
```
{% endtab %}

{% tab title="Advanced - Most Secure" %}
{% hint style="warning" %}
🔥**\[ Valgfri \] Pro Security Tip**: Kør eth2deposit-cli værktøjet og generer din **mnemonic seed** til dine validator nøgler på en **air-gapped offline maskine**.

Du kan kopiere via USB-nøgle de forudbyggede eth2deposit-cli binære filer fra en online maskine til en air-gapped offline maskine.

* Beskytter mod nøgle-logning angreb, malware / virusbaserede angreb og andre firewall eller sikkerhedsudnyttelser.
* Fysisk isoleret fra resten af dit netværk.
* Må ikke have en netværksforbindelse, kablet eller trådløs.
* Er ikke en VM på en maskine med en netværksforbindelse.
* Få mere at vide om [air-gapping at wikipedia](https://en.wikipedia.org/wiki/Air_gap_%28networking%29).
{% endhint %}
{% endtab %}
{% endtabs %}

1. Følg anvisningerne og vælg en adgangskode. Skriv din mnemonic ned og behold dette sikkert og **offline**.
2. Følg trinene på [https://launchpad.ethereum.org/](https://launchpad.ethereum.org/) mens du springer over de trin, du allerede lige har gennemført. Undersøgelse af et2 fase 0 oversigtsmateriale. Forståelse af eth2 er nøglen til succes!
3. Tilbage på launchpad websitet, upload din`deposit_data-#########.json` fundet i `validator_keys` mappe.
4. Forbind til startskærmen med din Metamask tegnebog, gennemse og acceptér vilkårene.
5. Bekræft transaktionen\(s\). Der er en indskudstransaktion på 32 ETH for hver validator.

{% hint style="info" %}
Din transaktion sender og deponerer din ETH til den [officielle ETH2 indbetalingskontraktadresse. ](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)

**Tjek**, _dobbeltcheck_, _**triple-check**_ at den officielle Eth2 depositum adresse er korrekt.[`0x00000000219ab540356cBB839Cbe05303d7705Fa`](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)
{% endhint %}

{% hint style="danger" %}
Sørg for at skrive ned eller optage din mnemoniske seed **offline**. _Ikke e-mail. Ikke sky._

Lav **offline sikkerhedskopier**, såsom til en USB-nøgle til din **`validator_keys`** \`\`mappe.
{% endhint %}

## 🛸 3. Install a ETH1 node

{% hint style="info" %}
Ethereum 2.0 kræver en tilslutning til Ethereum 1.0 for at overvåge for 32 ETH validator indbetalinger. Hosting din egen Ethereum 1.0 node er den bedste måde at maksimere decentralisering og minimere afhængighed af tredjeparter såsom Infura.
{% endhint %}

{% hint style="warning" %}
De efterfølgende trin antager, at du har gennemført [best practices security guide](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md).
{% endhint %}

Dit valg af enten [**OpenEthereum**](https://www.parity.io/ethereum/)**,** [**Geth**](https://geth.ethereum.org/)**,** [**Besu**](https://besu.hyperledger.org/) **eller** [**Nethermind**](https://www.nethermind.io/)**.**

{% tabs %}
{% tab title="OpenEthereum \(Parity\)" %}
#### 🤖 Installer og kør OpenEthereum.

```text
mkdir ~/openethereum && cd ~/openethereum
wget https://github.com/openethereum/openethereum/releases/download/v3.0.1/openethereum-linux-v3.0.1.zip
unzip openethereum*.zip
chmod +x openethereum
rm openethereum*.zip
```

opdatering: gear: **Opsætning og konfigurer systemd**

Kør følgende for at oprette en **enhedsfil** for at definere din `eth1.service` -konfiguration.

```bash
kat > $HOME/eth1. ervice << EOF 
[Unit]
Beskrivelse = openethereum eth1 tjeneste
Ønsker = network-online. arget
Efter = network-online. arget 

[Service]
Bruger = $(whoami)
WorkingDirectory= /home/$(whoami)/openethereum
ExecStart = /home/$(whoami)/openethereum/openethereum --chain foundation
Genstart = on-failure

[Install]
WantedBy = multi-user. arget
EOF
```

Flyt enhedsfilen til `/etc/systemd/system` og giv tilladelser.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
```

```bash
sudo chmod 644 /etc/systemd/system/eth1.service
```

Kør følgende for at aktivere auto-start ved opstart.

```text
sudo systemctl daemon-reload
sudo systemctl aktiverer eth1
```

#### ⛓ Start OpenEthereum på mainnet.

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Geth" %}
#### 🧬 Installer fra lageret.

```text
sudo add-apt-repository -y ppa:ethereum/ethereum
sudo apt-get update -y
sudo apt-get install ethereum -y
```

⚙ **Opsætning og konfigurer systemd**

Kør følgende for at oprette en **enhedsfil** for at definere din `eth1.service` -konfiguration.

```bash
kat > $HOME/eth1. ervice << EOF 
[Unit]
Beskrivelse = få eth1 tjeneste
Ønsker = network-online. arget
Efter = network-online. arget 

[Service]
Bruger = $(whoami)
ExecStart = /usr/bin/geth --rpc --http
Genstart = on-failure

[Install]
ØnskeAf = multi-bruger. arget
EOF
```

Flyt enhedsfilen til `/etc/systemd/system` og giv tilladelser.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

Kør følgende for at aktivere auto-start ved opstart.

```text
sudo systemctl daemon-reload
sudo systemctl aktiverer eth1
```

#### ⛓ Begynd at få på mainnet.

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Besu" %}
#### 🧬 Installer java afhængighed.

```text
sudo apt install openjdk-11-jdk
```

#### 🌜 Download og unzip Besu.

```text
cd
wget -O besu.tar.gz https://bintray.com/hyperledger-org/besu-repo/download_file?file_path=besu-1.5.0.tar.gz
tar -xvf besu.tar.gz
rm besu.tar.gz
mv besu-1.5.0 besu
```

⚙ **Opsætning og konfigurer systemd**

Kør følgende for at oprette en **enhedsfil** for at definere din `eth1.service` -konfiguration.

```bash
kat > $HOME/eth1. ervice << EOF 
[Unit]
Beskrivelse = openethereum eth1 tjeneste
Ønsker = network-online. arget
Efter = network-online. arget 

[Service]
Bruger = $(whoami)
WorkingDirectory= /home/$(whoami)/besu/bin
ExecStart = /home/$(whoami)/besu/bin/besu --data-path="$HOME/. thereum_besu"
Genstart = on-failure

[Install]
ØnsketAf = multi-bruger. arget
EOF
```

Flyt enhedsfilen til `/etc/systemd/system` og giv tilladelser.

```bash
sudo mv $HOME/eth1.service /etc/systemd/system/eth1.service
sudo chmod 644 /etc/systemd/system/eth1.service
```

Kør følgende for at aktivere auto-start ved opstart.

```text
sudo systemctl daemon-reload
sudo systemctl aktiverer eth1
```

#### ⛓ Start besu på mainnet.

```text
sudo systemctl start eth1
```
{% endtab %}

{% tab title="Nethermind" %}
#### ⚙ Installer afhængigheder.

```text
sudo apt-get update && sudo apt-get install libsnappy-dev libc6-dev libc6 unzip -y
```

#### 🌜 Download og udpak Holland.

```text
mkdir ~/nethermind && cd ~/nethermind
wget -O nethermind.zip https://nethdev.blob.core.windows.net/builds/nethermind-linux-amd64-1.8.77-9d3a58a.zip
unzip nethermind.zip
rm nethermind.zip
```

#### :flying_tallerken: Start Holland.

```text
./Holland.Launcher
```

* Vælg `Ethereum Node`
* Vælg `Ethereum (mainnet)` og vælg derefter `Hurtig synkronisering`
* Ja for at aktivere web3 / JSON RPC
* Accepter standard IP
* Spring ethstats registrering over
{% endtab %}

{% tab title="Minimum Hardware Setup" %}
{% hint style="info" %}
Infura er velegnet til begrænsede diskplads opsætninger. Kør altid din egen fulde eth1 node, når det er muligt.
{% endhint %}

Tilmeld dig en API-adgangsnøgle på [https://infura.io/](https://infura.io/)

1. Tilmeld dig for en gratis konto.
2. Bekræft din e-mailadresse.
3. Besøg dit betjeningspanel [https://infura.io/dashboard](https://infura.io/dashboard)
4. Opret et projekt, giv det et navn.
5. Vælg **Mainnet** som ENDPOINT
6. Kopier din API-nøgle.
7. Opdater parameteren **http-web3provider** i afsnittet **start beacon chain**.

```bash
#example parameter
--http-web3provider=https://infura.io/v3/<YOUR_API_KEY>
```
{% endtab %}
{% endtabs %}



{% hint style="info" %}
Synkronisering af eth1 node kan tage op til 24 timer.
{% endhint %}

{% hint style="success" %}
Din eth1 node er fuldt synkroniseret, når disse hændelser opstår.

* **`OpenEthereum:`** `Imported #<block number>`
* **`Geth:`** `Importeret ny kæde segment`
* **`Besu:`** `Importeret #<block number>`
* **`Holland:`** `Synkroniserer ikke længere Gamle Headers`
{% endhint %}

#### 🛠 Nyttige eth1.service kommandoer

¤ 🗒 **For at se og følge eth1 logs**

```text
journalctl - u eth1 - f
```

🗒 **For at stoppe eth1 tjeneste**

```text
sudo systemctl stop eth1
```

{% hint style="danger" %}
🛑 **Før du fortsætter resten af denne guide, Vi anbefaler, at du venter, indtil tættere på 1. dec, da Prysm koden hurtigt forbereder sig på mainnet.**🚧
{% endhint %}

## 💡 4. Install Prysm

```bash
mkdir ~/prysm && cd ~/prysm 
curl https://raw.githubusercontent.com/prysmaticlabs/prysm/master/prysm.sh --output prysm.sh && chmod +x prysm.sh 
```

{% hint style="info" %}
Prysm er en Ethereum 2.0 klient, og det kommer i to komponenter.

**Beacon chain client** - Ansvarlig for styring af tilstand af fyr kæde, validator shuffling, og meget mere.

**Validator client** - Ansvarlig for at producere nye blokke og attester i fyr kæde og shard kæder.
{% endhint %}

## 🔥 5. Konfigurere port videresendelse og/eller firewall

Specifikke til din netværksopsætning eller indstillinger for cloud-udbyderen, [sørg for, at din validators firewall-porte er åbne og tilgængelige.](guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node.md#configure-your-firewall)

* **Prysm beacon chain node** vil bruge port 12000 til udp og port 13000 til tcp
* **eth1** node kræver port 30303 for tcp og udp

{% hint style="info" %}
:gnister: **Port Forwarding Tip:** Du skal videresende og åbne porte til din validator. Kontroller at det virker med [https://www.yougetsignal.com/tools/open-ports/](https://www.yougetsignal.com/tools/open-ports/) eller [https://canyouseeme.org/](https://canyouseeme.org/).
{% endhint %}

## 🎩 6. Importér validator- nøgle

Vælg den korrekte kommando afhængigt af hvordan du har installeret **eth2deposit-cli.**

{% tabs %}
{% tab title="Pre-built eth2deposit-cli" %}
```bash
$HOME/prysm/prysm.sh validator konti import --keys-dir=$HOME/eth2deposit-cli-9310de0-linux-amd64/validator_keys
```
{% endtab %}

{% tab title="Built from source code" %}
```bash
$HOME/prysm/prysm.sh validator konti import --keys-dir=$HOME/git/eth2.0-deposit-cli/validator_keys
```
{% endtab %}
{% endtabs %}

Accepter standard placering af tegnebogen, angiv en ny adgangskode for at kryptere din tegnebog og angiv adgangskoden til dine importerede konti.

{% hint style="danger" %}
**ADVARSEL**: BRUG IKKE OPRINDELSESKEYSTORER TIL GYLDIGHED MED EN ANDEN KLIST, ELLER DU VIL FÅ SLADT.
{% endhint %}

## 🏂 7. Start fyr kæden

{% hint style="warning" %}
Hvis du har deltaget i et af de forudgående testnet, skal du rydde databasen.

```bash
$HOME/prysm/prysm.sh beacon-chain --clear-db
```
{% endhint %}

Dit valg af at køre et fyr kæde og validator manuelt fra kommandolinjen eller automatisk med systemd.

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 Fordele ved at bruge systemd for dit fyr kæde og validator <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Auto-start dit fyr kæde, når computeren genstarter på grund af vedligeholdelse, strømafbrydelse, osv.
2. Genstart automatisk nedbrudt beacon kæde processer.
3. Maksimer dit fyr kæde op-tid og ydeevne.

#### 🛠 Opsætningsvejledning

Kør følgende for at oprette en **enhedsfil** for at definere din`beacon-chain.service` -konfiguration.

```bash
kat > $HOME/beacon-kæde. ervice << EOF 
# The eth2 beacon chain service (del af systemd)
# file: /etc/systemd/system/beacon-chain. ervice 

[Unit]
Beskrivelse = eth2 beacon chain service
Ønsker = network-online. arget
Efter = network-online. arget 

[Service]
Bruger = $(whoami)
Miljø = "ClientIP=$(curl -s v4. dent.me)"
WorkingDirectory= /home/$(whoami)/prysm
ExecStart = /home/$(whoami)/prysm/prysm.sh beacon-chain --p2p-host-ip =${ClientIP} --monitoring-host="0.0.0. " --http-web3provider=http://127.0.0. :8545 --accept-terms-of-use 
Genstart = on-failure

[Install]
WantedBy = multi-user. arget
EOF
```

{% hint style="info" %}
Geth brugere kan opnå højere ydeevne med

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}

Flyt enhedsfilen til `/etc/systemd/system` og giv tilladelser.

```bash
sudo mv $HOME/beacon-chain.service /etc/systemd/system/beacon-kæde.service
sudo chmod 644 /etc/systemd/system/beacon-chain.service
```

Kør følgende for at aktivere auto-start ved opstartstid, og start derefter dit beacon node service.

```text
sudo systemctl daemon-reload
sudo systemctl enable beacon-chain
sudo systemctl start beacon-chain
```

{% hint style="success" %}
Godt arbejde. Dit fyr kæde styres nu af systemets pålidelighed og robusthed. Nedenfor er nogle kommandoer til brug af systemd.
{% endhint %}

### 🛠 Nogle nyttige systemd kommandoer

#### ✅ Kontroller om fyr kæden er aktiv

```text
sudo systemctl is- active beacon- chain
```

#### 🔎 Se status for fyr kæden

```text
sudo systemctl status beacon-chain
```

#### :mod uret: s_button: Genstarter fyr kæden

```text
sudo systemctl reload-or-genstart beacon-chain
```

#### 🛑 Stopper fyr kæden

```text
sudo systemctl stop beacon-chain
```

#### 🗒 Visning og filtrering af logfiler

```bash
journalctl --unit=beacon-chain --since=yesterday
journalctl --unit=beacon-chain --since=today
journalctl --unit=beacon-chain --since='2020-12-01 00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
I en ny terminal, starte fyr kæden.

```bash
$HOME/prysm/prysm.sh beacon-chain \
--p2p-host-ip=$(curl -s v4.ident.me) \
--http-web3provider="http://127.0.0.1:8545"
--monitoring-host="0.0.0.0.0" \
--accept-terms-of-use
```

{% hint style="info" %}
Geth brugere kan opnå højere ydeevne med

```bash
--http-web3provider=$HOME/.ethereum/geth.ipc
```
{% endhint %}
{% endtab %}
{% endtabs %}

## 🧬 8. Start validator <a id="9-start-the-validator"></a>

Gem din validators adgangskode i en fil og gør den skrivebeskyttet.

```bash
echo "my_password_goes_here" > $HOME/.eth2validators/validators-password.txt
sudo chmod 600 $HOME/.eth2validators/validators-password.txt
```

Dit valg af at køre en validator manuelt fra kommandolinjen eller automatisk med systemd.

{% tabs %}
{% tab title="Systemd - Automated" %}
#### 🍰 Fordele ved at bruge systemd til din validator <a id="benefits-of-using-systemd-for-your-stake-pool"></a>

1. Auto-start din validator, når computeren genstarter på grund af vedligeholdelse, strømafbrydelse, osv.
2. Genstart automatisk nedbrudte valideringsprocesser.
3. Maksimer din validator op-tid og ydeevne.

#### 🛠 Opsætningsvejledning

Kør følgende for at oprette en **enhedsfil** for at definere din`validator.service` -konfiguration.

```bash
kat > $HOME/validator. ervice << EOF 
# Den eth2 validator tjeneste (del af systemd)
# fil: /etc/systemd/system/validator. ervice 

[Unit]
Beskrivelse = eth2 validator service
Ønsker = network-online. arget beacon-chain.service
Efter = network-online. arget 

[Service]
Bruger = $(whoami)
WorkingDirectory= /home/$(whoami)/prysm
ExecStart = /home/$(whoami)/prysm/prysm. h validator --accept-terms-of-use --wallet-password-file /home/$(whoami)/.eth2validators/validators-password. xt
Genstart = on-failure

[Install]
ØnsketBy = multi-bruger. arget
EOF
```

Flyt enhedsfilen til `/etc/systemd/system` og giv tilladelser.

```bash
sudo mv $HOME/validator.service /etc/systemd/system/validator.service
sudo chmod 644 /etc/systemd/system/validator.service
```

Kør følgende for at aktivere auto-start på opstartstidspunktet og start derefter din validator.

```text
sudo systemctl daemon-reload
sudo systemctl enable validator
sudo systemctl start validator
```

### 🛠 Nogle nyttige systemd kommandoer

#### ✅ Kontroller om validatoren er aktiv

```text
sudo systemctl is-aktiv validator
```

#### 🔎 Se status for validator

```text
sudo systemctl status validator
```

#### :countercuret s_button: Genstarter validator

```text
sudo systemctl reload-or-genstart validator
```

#### 🛑 Stop validator

```text
sudo systemctl stop validator
```

#### 🗄 Visning og filtrering af logfiler

```bash
journalctl --unit=validator --since=i går
journalctl --unit=validator --since=today
journalctl --unit=validator --since='2020-12-01 00:00:00' --until='2020-12-02 12:00:00'
```
{% endtab %}

{% tab title="CLI - Manual" %}
Start validator i en ny terminal.

```bash
$HOME/prysm/prysm.sh validator \
--accept-terms-of-use \
--wallet-password-file /home/$(whoami)/.eth2validators/validators-password.txt
```
{% endtab %}
{% endtabs %}

Kontroller, at din **validator offentlige nøgle** vises i logfilerne. Eksempel nedenfor:

```text
INFO Aktiveret validator voting_pubkey: 0x2374.....7121
```

{% hint style="info" %}
**Validator client** - Ansvarlig for at producere nye blokke og attester i fyr kæde og shard kæder.

**Beacon chain client** - Ansvarlig for styring af tilstand af fyr kæde, validator shuffling, og meget mere.
{% endhint %}

{% hint style="success" %}
Tillykke. Når dit beacon-kæde er synkroniseret, validator op og køre, du bare vente på aktivering. Denne proces tager op til 24 timer. Når du er tildelt, vil din validator begynde at oprette og stemme på blokke, mens du tjener ETH staking belønninger.

Brug [beaconcha.in](https://beaconcha.in/) og [registrer en konto](https://beaconcha.in/register) til at oprette advarsler og spore din validators ydeevne.
{% endhint %}

## 🕒 9. Tid Synkronisering

{% hint style="info" %}
Fordi fyr kæde er afhængig af nøjagtige tidspunkter for at udføre attesteringer og producere blokke, computerens tid skal være præcis til den rigtige NTP eller NTS-tid inden for 0. sekunder.
{% endhint %}

Opsæt **Chrony** med følgende guide.

{% hint style="info" %}
chrony er en implementering af Network Time Protocol og hjælper med at holde computerens tid synkroniseret med NTP.
{% endhint %}

## 🔎 10. Overvågning af din validator med Grafana og Prometheus

Prometheus er en overvågningsplatform, der indsamler målinger fra overvågede mål ved at skrabe HTTP endepunkter på disse mål. [Officiel dokumentation er tilgængelig her.](https://prometheus.io/docs/introduction/overview/) Grafana er et betjeningspanel, der bruges til at visualisere de indsamlede data.

### 🐣 10.1 Installation

Installer prometheus og prometheus node eksportør.

```text
sudo apt-get install -y prometheus prometheus-node-exporter
```

Installér grafana.

```bash
wget -q -O - https://packages.grafana.com/gpg.key ¤ sudo apt-key add -
echo "deb https://packages.grafana.com/oss/deb stable main" > grafana. ist
sudo mv grafana.list /etc/apt/sources.list.d/grafana.list
sudo apt-get update && sudo apt-get install -y grafana
```

Aktiver tjenester, så de starter automatisk.

```bash
sudo systemctl enable grafana-server.service
sudo systemctl enable prometheus.service
sudo systemctl enable prometheus-node-exporter.service
```

Opdater **prometheus.yml** placeret i `/etc/prometheus/prometheus.yml`

```bash
kat > $HOME/prometheus.yml << EOF
global:
  scrape_interval: 15s # Som standard, skrabe mål hver 15 sekunder.

  # Fastgør disse etiketter til tidsserier eller advarsler, når de kommunikerer med
  # eksterne systemer (føderation, fjernlagring, Alertmanager).
  external_labels:
    monitor: 'codelab-monitor'

# En scrape-konfiguration indeholdende præcis et endepunkt til at skrabe:
# Her er det Prometheus selv.
scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['localhost:9100']
  - job_name: 'validator'
    static_configs:
      - targets: ['localhost:8081']
  - job_name: 'beacon node'
    static_configs:
      - targets: ['localhost:8080']
  - job_name: 'slasher'
    static_configs:
      - targets: ['localhost:8082']
EOF
sudo mv $HOME/prometheus. ml /etc/prometheus/prometheus.yml
```

Endelig genstarte tjenesterne.

```bash
sudo systemctl genstart grafana-server.service
sudo systemctl genstart prometheus.service
sudo systemctl genstart prometheus-node-exporter.service
```

Kontroller, at tjenesterne kører korrekt:

```text
sudo systemctl status grafana-server.service prometheus.service prometheus-node-exporter.service
```

{% hint style="info" %}
💡 **Påmindelse**: Sørg for, at port 3000 er åben på firewall og/eller port viderestillet, hvis du har til hensigt at se overvågningsinfo fra en anden maskine.
{% endhint %}

### 📶 10.2 Opsætning af Grafana Dashboards

1. Åbn [http://localhost:3000](http://localhost:3000) eller [http://&lt;your](http://<your) validator's ip address&gt;:3000 i din lokale browser.
2. Log ind med **admin** / **admin**
3. Skift adgangskode
4. Klik på **konfigurationsgear** ikonet og derefter **Tilføj datakilde**
5. Vælg **Prometheus**
6. Sæt **Navn** til **"Prometheus**"
7. Sæt **URL** til [http://localhost:9090](http://localhost:9090)
8. Klik på **Gem & Test**
9. **Download og gem** denne [**json-fil**](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)**.** Eller hvis du har mere end 10 validatorer, brug denne [json-fil](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json).
10. Klik på **Opret +** ikon &gt; **Import**
11. Tilføj dashboard af **Upload JSON-fil**
12. Klik på **Importér** knappen.

![Prysm dashboard](../../.gitbook/assets/prysm_dash.png)

### ⚠ 10.3 Opsætning Af Alarm Notifikationer

{% hint style="info" %}
Opsæt alarmer for at få besked, hvis dine validatorer går offline.
{% endhint %}

Få besked om problemer med dine validatorer. Vælg mellem e-mail, telegram, discord eller slack.

{% tabs %}
{% tab title="Email Notifications" %}
1. Besøg [https://beaconcha.in/](https://beaconcha.in/)
2. Tilmeld dig ****for en **konto**
3. Bekræft din **e-mail**
4. Søg efter din **validator's offentlige adresse**
5. Tilføj validatorer til din overvågningsliste ved at klikke på **bogmærke-symbolet**.
{% endtab %}

{% tab title="Telegram Notifications" %}
1. Vælg **Notifikationskanaler** under klokkeikonet i menuen på Grafana. ![](../../.gitbook/assets/gra-noti.png)
2. Klik på **Tilføj kanal**.
3. Giv notifikationskanalen et **navn**.
4. Vælg **Telegram** fra typelisten.
5. For at fuldføre **Telegram API-indstillingerne**kræves en Telegram kanal og bot. For instruktioner om opsætning af en bot med `@Botfar`, se [dette afsnit](https://core.telegram.org/bots#6-botfather) i Telegram-dokumentationen.
6. Når afsluttet, invitere bot til den nyoprettede kanal.
{% endtab %}

{% tab title="Discord Notifications" %}
1. Vælg **Notifikationskanaler** under klokkeikonet i menuen på Grafana. ![](../../.gitbook/assets/gra-noti.png)
2. Klik på **Tilføj kanal**.
3. Tilføj et **navn** til notifikationskanalen.
4. Vælg **Discord** fra typelisten.
5. For at fuldføre opsætningen, en Discord server \(og en tekst kanal tilgængelig\) samt en Webhook URL er påkrævet. For instruktioner om opsætning af Discord's Webhooks, se [dette afsnit](https://support.discord.com/hc/en-us/articles/228383668-Intro-to-Webhooks) i deres dokumentation.
6. Angiv Webhook **URL** i Discord notifikationsindstillingspanelet.
7. Klik på **Send Test**, som vil skubbe en bekræftelsesmeddelelse til Discord kanalen.
{% endtab %}

{% tab title="Slack Notifications" %}
1. Vælg **Notifikationskanaler** under klokkeikonet i menuen på Grafana. ![](../../.gitbook/assets/gra-noti.png)
2. Klik på **Tilføj kanal**.
3. Tilføj et **navn** til notifikationskanalen.
4. Vælg **Slack** fra typelisten.
5. For instruktioner om opsætning af en Slacks indgående Webhooks, se [dette afsnit](https://api.slack.com/messaging/webhooks) i deres dokumentation.
6. Angiv Slack Incoming Webhook URL i **URL** feltet.
7. Klik på **Send Test**, som vil skubbe en bekræftelsesmeddelelse til Slack kanalen.
{% endtab %}
{% endtabs %}

{% hint style="success" %}
🎉 Tillykke med opsætningen af din validator! Du er god til at gå på eth2.0.

Har du fundet vores guide nyttig? Lad os vide med et tip og vi vil holde opdatere det.

Brug [cointr.ee til at finde vores donation ](https://cointr.ee/coincashew)adresser. 🙌

Enhver feedback og alle pull anmodninger meget værdsat. 😃

Hæng ud og chat med andre stakere på telegram @ [https://t.me/coincashew](https://t.me/coincashew)🌛
{% endhint %}

## 🧙♂ 11. Opdaterer Prysm

Genstart beacon chain and validator as per normal operating procedures

{% tabs %}
{% tab title="Systemd - Automated" %}
```text
sudo systemctl reload-or-genstart beacon-chain
sudo systemctl reload-or-genstart validator
```
{% endtab %}

{% tab title="CLI - Manual" %}
```bash
#Control C til at afslutte både din beacon-kæde og validator processer 
#Tryk pil op og skriv for at genstarte.
```
{% endtab %}
{% endtabs %}

## 🧩 12. Referencemateriale

Vurder det hårde arbejde udført af de fine folk på følgende links, der tjente som et fundament for at skabe denne guide.

{% embed url="https://discord.gg/KSA7rPr" %}

{% embed url="https://launchpad.ethereum.org/" caption="" %}

{% embed url="https://prylabs.net/participate" %}

{% embed url="https://docs.prylabs.network/docs/getting-started/" %}

## 🎉 13. Bonus Links

### 🌰 CoinCashew Guides for andre ETH2 klienter

{% page-ref page="guide-how-to-stake-on-eth2-with-lighthouse.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-teku-on-ubuntu.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-nimbus.md" %}

{% page-ref page="guide-how-to-stake-on-eth2-with-lodestar.md" %}

### 🧱 ETH2 Blok Explorers

{% embed url="https://beaconcha.in" caption="" %}

{% embed url="https://beaconscan.com" caption="" %}

### 🗒 Seneste Eth2 Info

{% embed url="https://www.reddit.com/r/ethstaker" caption="" %}

{% embed url="https://blog.ethereum.org" caption="" %}

{% embed url="http://invite.gg/ethstaker" caption="" %}

{% embed url="https://hackmd.io/@benjaminion/eth2\_news/" caption="" %}

## 🔥 14. Yderligere Nyttige Tips

### 🛑 14.1 Frivillig afslut en validator

{% hint style="info" %}
Brug denne kommando til at signalere dine intentioner for at stoppe valideringen med din validator. Det betyder, at du ikke længere ønsker at satse med din validator og ønsker at slukke for din node.

* Frivillig udseende, tager mindst 2048 epoker \(eller ~ 9 dage\). Der er en kø til at afslutte og en forsinkelse, før din validator endelig afsluttes.
* Når en validator er forladt i fase 0, er dette ikke reversibelt, og du kan ikke længere genstarte valideringen igen.
* Dine penge vil ikke være tilgængelige for udbetaling før fase 1.5 eller senere.
* Når din validator forlader exit køen og er sandt forladet, er det sikkert at slukke dit fyr node og validator.
{% endhint %}

```bash
$HOME/prysm/prysm.sh validator konti frivillig afslutning
```

### 🔐 14.2 Bekræft din mnemonic sætning

Ved hjælp af eth2deposit-cli værktøjet, sørg for at du kan regenerere de samme eth2 nøgle par ved at genoprette dine `validator_keys`

```bash
./depositum eksisterende-mnemonic --chain mainnet
```

{% hint style="info" %}
Når **pubkey** er identisk, betyder det din **keystore fil** du har bekræftet din mnemonic sætning korrekt. Andre felter vil være forskellige på grund af saltning.
{% endhint %}

### 🤖 14.3 Tilføj yderligere validatorer

Ved hjælp af eth2deposit-cli værktøjet, kan du tilføje flere validatorer ved at oprette en ny indbetalingsdatafil og `validator_keys`

For eksempel, hvis vi oprindeligt oprettede 3 validatorer, men nu ønsker at tilføje 5 flere validatorer, kunne vi bruge følgende kommando.

```bash
./deposit existing-mnemonic --validator_start_index 3 --num_validators 5 --chain mainnet
```

Færdiggør trinene for at uploade `deposit_data-#######.json` til startsiden på startblokken.

